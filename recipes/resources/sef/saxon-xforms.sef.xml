<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:java-type="http://saxon.sf.net/java-type" when="2020-02-22T19:55:54.274Z" id="0" version="30" packageVersion="1" saxonVersion="9.9.1.5" target="JS" targetVersion="1" relocatable="true" implicit="true">
 <co id="0" binds="1 2 1 2 3 3 4 5 6 3 7">
  <template name="Q{}action-insert" flags="os" line="4493" module="saxon-xforms.xsl" slots="18">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4494">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="4495" name="Q{}instanceXML" slot="1" flags="t" as="element()?">
     <empty role="select"/>
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instanceXML">
      <check card="?" diag="8|0|XTTE0590|instanceXML">
       <supplied slot="1"/>
      </check>
     </treat>
    </param>
    <param line="4496" name="Q{}nodeset" slot="2" flags="t" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
      <check card="1" diag="8|0|XTTE0590|nodeset">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|nodeset">
        <data>
         <supplied slot="2"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="4498" var="Q{}ref" as="xs:string" slot="3" eval="16">
     <let var="Q{}relative" as="xs:string" slot="4" eval="16">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
       <check card="1" diag="0|1||xforms:resolveXPathStrings">
        <cvUntyped to="xs:string">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@ref"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <choose line="835">
       <fn name="starts-with">
        <varRef name="Q{}relative" slot="4"/>
        <str val="/"/>
       </fn>
       <varRef line="836" name="Q{}relative" slot="4"/>
       <fn line="838" name="starts-with">
        <varRef name="Q{}relative" slot="4"/>
        <str val="instance("/>
       </fn>
       <varRef line="839" name="Q{}relative" slot="4"/>
       <fn line="4498" name="not">
        <varRef name="Q{}nodeset" slot="2"/>
       </fn>
       <varRef line="842" name="Q{}relative" slot="4"/>
       <or line="844" op="or">
        <fn name="not">
         <varRef name="Q{}relative" slot="4"/>
        </fn>
        <vc op="eq" onEmpty="0" comp="CCC">
         <varRef name="Q{}relative" slot="4"/>
         <str val="."/>
        </vc>
       </or>
       <varRef line="4498" name="Q{}nodeset" slot="2"/>
       <true/>
       <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="5" eval="16">
        <choose>
         <fn name="contains">
          <varRef name="Q{}relative" slot="4"/>
          <str val="/"/>
         </fn>
         <fn name="count">
          <filter flags="b">
           <fn name="tokenize">
            <varRef name="Q{}relative" slot="4"/>
            <str val="/"/>
            <str val=""/>
           </fn>
           <vc op="eq" onEmpty="0" comp="CCC">
            <dot type="xs:string"/>
            <str val=".."/>
           </vc>
          </filter>
         </fn>
         <fn name="contains">
          <varRef name="Q{}relative" slot="4"/>
          <str val=".."/>
         </fn>
         <int val="1"/>
         <true/>
         <int val="0"/>
        </choose>
        <let line="852" var="Q{}slashes" as="xs:integer*" slot="6" eval="4">
         <choose>
          <fn line="4498" name="contains">
           <varRef name="Q{}nodeset" slot="2"/>
           <str val="/"/>
          </fn>
          <fn name="index-of">
           <fn name="string-to-codepoints">
            <varRef line="4498" name="Q{}nodeset" slot="2"/>
           </fn>
           <int val="47"/>
          </fn>
          <true/>
          <int val="0"/>
         </choose>
         <choose line="884">
          <compareToInt op="gt" val="0">
           <varRef name="Q{}parentCallCount" slot="5"/>
          </compareToInt>
          <fn line="888" name="concat">
           <fn name="substring">
            <varRef line="4498" name="Q{}nodeset" slot="2"/>
            <int val="1"/>
            <choose line="863">
             <and op="and">
              <vc op="ge" onEmpty="0" comp="CAVC">
               <fn name="count">
                <varRef name="Q{}slashes" slot="6"/>
               </fn>
               <varRef name="Q{}parentCallCount" slot="5"/>
              </vc>
              <compareToInt op="gt" val="0">
               <varRef name="Q{}parentCallCount" slot="5"/>
              </compareToInt>
             </and>
             <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="7" eval="13">
              <arith op="-" calc="i-i">
               <varRef name="Q{}parentCallCount" slot="5"/>
               <int val="1"/>
              </arith>
              <check card="1" diag="3|0|XTTE0570|parentSlash">
               <filter flags="p">
                <varRef name="Q{}slashes" slot="6"/>
                <arith op="-" calc="i-i">
                 <fn name="last"/>
                 <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="7"/>
                </arith>
               </filter>
              </check>
             </let>
             <true/>
             <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
              <lastOf>
               <varRef name="Q{}slashes" slot="6"/>
              </lastOf>
             </check>
            </choose>
           </fn>
           <fn name="replace">
            <varRef name="Q{}relative" slot="4"/>
            <str val="\.\./"/>
            <str val=""/>
            <str val=""/>
           </fn>
          </fn>
          <true/>
          <fn line="4498" name="concat">
           <varRef name="Q{}nodeset" slot="2"/>
           <str val="/"/>
           <varRef line="891" name="Q{}relative" slot="4"/>
          </fn>
         </choose>
        </let>
       </let>
      </choose>
     </let>
     <let line="4499" var="Q{}at" as="xs:string?" slot="8" eval="7">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|at">
       <check card="?" diag="3|0|XTTE0570|at">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|at">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@at"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <let line="4500" var="Q{}position" as="xs:string?" slot="9" eval="7">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|position">
        <check card="?" diag="3|0|XTTE0570|position">
         <cvUntyped to="xs:string" diag="3|0|XTTE0570|position">
          <data>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="Q{}action-map" slot="0"/>
            <str val="@position"/>
           </ifCall>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <let line="4501" var="Q{}origin-ref" as="xs:string?" slot="10" eval="7">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|origin-ref">
         <check card="?" diag="3|0|XTTE0570|origin-ref">
          <cvUntyped to="xs:string" diag="3|0|XTTE0570|origin-ref">
           <data>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="Q{}action-map" slot="0"/>
             <str val="@origin"/>
            </ifCall>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <let line="4516" var="Q{}instanceXML2" as="element()" slot="11" eval="16">
         <choose line="4518">
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <ufCall line="4514" name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="0" eval="6">
             <varRef name="Q{}ref" slot="3"/>
            </ufCall>
            <str val="saxon-forms-default"/>
           </vc>
           <fn name="exists">
            <varRef name="Q{}instanceXML" slot="1"/>
           </fn>
          </and>
          <check line="4519" card="1" diag="3|0|XTTE0570|instanceXML2">
           <varRef name="Q{}instanceXML" slot="1"/>
          </check>
          <true/>
          <check line="4522" card="1" diag="3|0|XTTE0570|instanceXML2">
           <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="1" eval="6">
            <varRef name="Q{}ref" slot="3"/>
           </ufCall>
          </check>
         </choose>
         <let line="4529" var="Q{}instanceXML-origin" as="element()" slot="12" eval="16">
          <choose line="4531">
           <and op="and">
            <vc op="eq" onEmpty="0" comp="CCC">
             <ufCall line="4527" name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="2" eval="16">
              <check card="1" diag="0|0||xforms:getInstanceId">
               <varRef name="Q{}origin-ref" slot="10"/>
              </check>
             </ufCall>
             <str val="saxon-forms-default"/>
            </vc>
            <fn name="exists">
             <varRef name="Q{}instanceXML" slot="1"/>
            </fn>
           </and>
           <check line="4532" card="1" diag="3|0|XTTE0570|instanceXML-origin">
            <varRef name="Q{}instanceXML" slot="1"/>
           </check>
           <true/>
           <check line="4535" card="1" diag="3|0|XTTE0570|instanceXML-origin">
            <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="3" eval="16">
             <check card="1" diag="0|0||xforms:getInstance-JS">
              <varRef name="Q{}origin-ref" slot="10"/>
             </check>
            </ufCall>
           </check>
          </choose>
          <let line="4546" var="Q{}origin-node" as="node()?" slot="13" eval="7">
           <treat line="4547" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|origin-node">
            <check card="?" diag="3|0|XTTE0570|origin-node">
             <evaluate dxns="">
              <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="4" eval="16">
               <check card="1" diag="0|0||xforms:impose">
                <varRef name="Q{}origin-ref" slot="10"/>
               </check>
              </ufCall>
              <varRef role="cxt" name="Q{}instanceXML-origin" slot="12"/>
              <varRef role="nsCxt" name="Q{}instanceXML-origin" slot="12"/>
              <str role="sa" val="no"/>
              <map role="options" size="0"/>
              <map role="wp" size="0"/>
             </evaluate>
            </check>
           </treat>
           <let line="4550" var="Q{}insert-node-location" as="node()" slot="14" eval="16">
            <treat line="4551" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|insert-node-location">
             <check card="1" diag="3|0|XTTE0570|insert-node-location">
              <evaluate dxns="">
               <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="5" eval="16">
                <check card="1" diag="0|0||xforms:impose">
                 <choose line="4512">
                  <vc op="ne" onEmpty="0" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                   <varRef name="Q{}ref" slot="3"/>
                   <str val=""/>
                  </vc>
                  <choose>
                   <fn name="exists">
                    <varRef name="Q{}at" slot="8"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="Q{}ref" slot="3"/>
                    <str val="["/>
                    <varRef name="Q{}at" slot="8"/>
                    <str val="]"/>
                   </fn>
                   <true/>
                   <varRef name="Q{}ref" slot="3"/>
                  </choose>
                 </choose>
                </check>
               </ufCall>
               <varRef role="cxt" name="Q{}instanceXML2" slot="11"/>
               <varRef role="nsCxt" name="Q{}instanceXML2" slot="11"/>
               <str role="sa" val="no"/>
               <map role="options" size="0"/>
               <map role="wp" size="0"/>
              </evaluate>
             </check>
            </treat>
            <sequence line="4554">
             <message>
              <sequence role="select">
               <valueOf>
                <str val="[action-insert] $insert-node-location = "/>
               </valueOf>
               <valueOf>
                <fn name="serialize">
                 <varRef name="Q{}insert-node-location" slot="14"/>
                </fn>
               </valueOf>
              </sequence>
              <str role="terminate" val="no"/>
              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
             </message>
             <message line="4555">
              <sequence role="select">
               <valueOf>
                <str val="[action-insert] $origin-node = "/>
               </valueOf>
               <valueOf>
                <fn name="serialize">
                 <varRef name="Q{}origin-node" slot="13"/>
                </fn>
               </valueOf>
              </sequence>
              <str role="terminate" val="no"/>
              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
             </message>
             <let line="4572" var="Q{}instance-with-insert" as="element()" slot="15" eval="16">
              <treat line="4573" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|instance-with-insert">
               <check card="1" diag="3|0|XTTE0570|instance-with-insert">
                <applyT mode="Q{}insert-node" bSlot="6">
                 <varRef role="select" name="Q{}instanceXML2" slot="11"/>
                 <withParam name="Q{}insert-node-location" flags="t" as="node()">
                  <varRef line="4574" name="Q{}insert-node-location" slot="14"/>
                 </withParam>
                 <withParam name="Q{}node-to-insert" flags="t" as="node()?">
                  <choose line="4561">
                   <fn name="exists">
                    <varRef name="Q{}origin-node" slot="13"/>
                   </fn>
                   <copyOf line="4562" flags="vc">
                    <varRef name="Q{}origin-node" slot="13"/>
                   </copyOf>
                   <true/>
                   <copyOf line="4565" flags="vc">
                    <varRef name="Q{}insert-node-location" slot="14"/>
                   </copyOf>
                  </choose>
                 </withParam>
                 <withParam name="Q{}position-relative" flags="t" as="xs:string?">
                  <varRef line="4576" name="Q{}position" slot="9"/>
                 </withParam>
                </applyT>
               </check>
              </treat>
              <sequence line="4580">
               <ufCall name="Q{http://www.w3.org/2002/xforms}setInstance-JS" tailCall="false" bSlot="7" eval="6 6">
                <varRef name="Q{}ref" slot="3"/>
                <varRef name="Q{}instance-with-insert" slot="15"/>
               </ufCall>
               <choose line="4584">
                <fn name="matches">
                 <varRef name="Q{}at" slot="8"/>
                 <str val="index\s*\("/>
                 <str val=""/>
                </fn>
                <let line="4585" var="Q{}repeat-id" as="xs:string?" slot="16" eval="7">
                 <ufCall name="Q{http://www.w3.org/2002/xforms}getRepeatID" tailCall="false" bSlot="8" eval="16">
                  <check card="1" diag="0|0||xforms:getRepeatID">
                   <varRef name="Q{}at" slot="8"/>
                  </check>
                 </ufCall>
                 <let line="4586" var="Q{}at-position" as="xs:integer" slot="17" eval="16">
                  <treat line="4587" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="3|0|XTTE0570|at-position">
                   <check card="1" diag="3|0|XTTE0570|at-position">
                    <cvUntyped to="xs:integer" diag="3|0|XTTE0570|at-position">
                     <data>
                      <evaluate dxns="">
                       <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="9" eval="16">
                        <check card="1" diag="0|0||xforms:impose">
                         <varRef name="Q{}at" slot="8"/>
                        </check>
                       </ufCall>
                       <empty role="cxt"/>
                       <str role="sa" val="no"/>
                       <map role="options" size="0"/>
                       <map role="wp" size="0"/>
                      </evaluate>
                     </data>
                    </cvUntyped>
                   </check>
                  </treat>
                  <sequence line="4589">
                   <message>
                    <sequence role="select">
                     <valueOf>
                      <str val="[action-insert] $repeat-id = "/>
                     </valueOf>
                     <valueOf>
                      <varRef name="Q{}repeat-id" slot="16"/>
                     </valueOf>
                    </sequence>
                    <str role="terminate" val="no"/>
                    <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                   </message>
                   <message line="4590">
                    <sequence role="select">
                     <valueOf>
                      <str val="[action-insert] $at-position evaluated as "/>
                     </valueOf>
                     <valueOf>
                      <convert from="xs:integer" to="xs:string">
                       <varRef name="Q{}at-position" slot="17"/>
                      </convert>
                     </valueOf>
                    </sequence>
                    <str role="terminate" val="no"/>
                    <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                   </message>
                   <choose line="4592">
                    <fn name="exists">
                     <varRef name="Q{}repeat-id" slot="16"/>
                    </fn>
                    <choose line="4594">
                     <vc op="eq" onEmpty="0" comp="CCC">
                      <varRef name="Q{}position" slot="9"/>
                      <str val="before"/>
                     </vc>
                     <ifCall line="4595" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                      <check card="1" diag="0|0||ixsl:call">
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                      </check>
                      <str val="setRepeatIndex"/>
                      <arrayBlock>
                       <varRef name="Q{}repeat-id" slot="16"/>
                       <varRef name="Q{}at-position" slot="17"/>
                      </arrayBlock>
                     </ifCall>
                     <true/>
                     <ifCall line="4598" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                      <check card="1" diag="0|0||ixsl:call">
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                      </check>
                      <str val="setRepeatIndex"/>
                      <arrayBlock>
                       <varRef name="Q{}repeat-id" slot="16"/>
                       <arith op="+" calc="i+i">
                        <varRef name="Q{}at-position" slot="17"/>
                        <int val="1"/>
                       </arith>
                      </arrayBlock>
                     </ifCall>
                    </choose>
                   </choose>
                  </sequence>
                 </let>
                </let>
               </choose>
               <callT line="4608" name="Q{}xforms-recalculate" bSlot="10" flags="t"/>
              </sequence>
             </let>
            </sequence>
           </let>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="8" binds="1 2 3 3 9 5 6 3 7">
  <template name="Q{}action-delete" flags="os" line="4621" module="saxon-xforms.xsl" slots="18">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4622">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="4623" name="Q{}instanceXML" slot="1" flags="ti" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instanceXML">
      <check card="1" diag="8|0|XTTE0590|instanceXML">
       <supplied slot="1"/>
      </check>
     </treat>
    </param>
    <param line="4624" name="Q{}nodeset" slot="2" flags="t" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
      <check card="1" diag="8|0|XTTE0590|nodeset">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|nodeset">
        <data>
         <supplied slot="2"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="4626" var="Q{}ref" as="xs:string" slot="3" eval="16">
     <let var="Q{}relative" as="xs:string" slot="4" eval="16">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
       <check card="1" diag="0|1||xforms:resolveXPathStrings">
        <cvUntyped to="xs:string">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@ref"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <choose line="835">
       <fn name="starts-with">
        <varRef name="Q{}relative" slot="4"/>
        <str val="/"/>
       </fn>
       <varRef line="836" name="Q{}relative" slot="4"/>
       <fn line="838" name="starts-with">
        <varRef name="Q{}relative" slot="4"/>
        <str val="instance("/>
       </fn>
       <varRef line="839" name="Q{}relative" slot="4"/>
       <fn line="4626" name="not">
        <varRef name="Q{}nodeset" slot="2"/>
       </fn>
       <varRef line="842" name="Q{}relative" slot="4"/>
       <or line="844" op="or">
        <fn name="not">
         <varRef name="Q{}relative" slot="4"/>
        </fn>
        <vc op="eq" onEmpty="0" comp="CCC">
         <varRef name="Q{}relative" slot="4"/>
         <str val="."/>
        </vc>
       </or>
       <varRef line="4626" name="Q{}nodeset" slot="2"/>
       <true/>
       <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="5" eval="16">
        <choose>
         <fn name="contains">
          <varRef name="Q{}relative" slot="4"/>
          <str val="/"/>
         </fn>
         <fn name="count">
          <filter flags="b">
           <fn name="tokenize">
            <varRef name="Q{}relative" slot="4"/>
            <str val="/"/>
            <str val=""/>
           </fn>
           <vc op="eq" onEmpty="0" comp="CCC">
            <dot type="xs:string"/>
            <str val=".."/>
           </vc>
          </filter>
         </fn>
         <fn name="contains">
          <varRef name="Q{}relative" slot="4"/>
          <str val=".."/>
         </fn>
         <int val="1"/>
         <true/>
         <int val="0"/>
        </choose>
        <let line="852" var="Q{}slashes" as="xs:integer*" slot="6" eval="4">
         <choose>
          <fn line="4626" name="contains">
           <varRef name="Q{}nodeset" slot="2"/>
           <str val="/"/>
          </fn>
          <fn name="index-of">
           <fn name="string-to-codepoints">
            <varRef line="4626" name="Q{}nodeset" slot="2"/>
           </fn>
           <int val="47"/>
          </fn>
          <true/>
          <int val="0"/>
         </choose>
         <choose line="884">
          <compareToInt op="gt" val="0">
           <varRef name="Q{}parentCallCount" slot="5"/>
          </compareToInt>
          <fn line="888" name="concat">
           <fn name="substring">
            <varRef line="4626" name="Q{}nodeset" slot="2"/>
            <int val="1"/>
            <choose line="863">
             <and op="and">
              <vc op="ge" onEmpty="0" comp="CAVC">
               <fn name="count">
                <varRef name="Q{}slashes" slot="6"/>
               </fn>
               <varRef name="Q{}parentCallCount" slot="5"/>
              </vc>
              <compareToInt op="gt" val="0">
               <varRef name="Q{}parentCallCount" slot="5"/>
              </compareToInt>
             </and>
             <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="7" eval="13">
              <arith op="-" calc="i-i">
               <varRef name="Q{}parentCallCount" slot="5"/>
               <int val="1"/>
              </arith>
              <check card="1" diag="3|0|XTTE0570|parentSlash">
               <filter flags="p">
                <varRef name="Q{}slashes" slot="6"/>
                <arith op="-" calc="i-i">
                 <fn name="last"/>
                 <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="7"/>
                </arith>
               </filter>
              </check>
             </let>
             <true/>
             <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
              <lastOf>
               <varRef name="Q{}slashes" slot="6"/>
              </lastOf>
             </check>
            </choose>
           </fn>
           <fn name="replace">
            <varRef name="Q{}relative" slot="4"/>
            <str val="\.\./"/>
            <str val=""/>
            <str val=""/>
           </fn>
          </fn>
          <true/>
          <fn line="4626" name="concat">
           <varRef name="Q{}nodeset" slot="2"/>
           <str val="/"/>
           <varRef line="891" name="Q{}relative" slot="4"/>
          </fn>
         </choose>
        </let>
       </let>
      </choose>
     </let>
     <let line="4627" var="Q{}at" as="xs:string?" slot="8" eval="7">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|at">
       <check card="?" diag="3|0|XTTE0570|at">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|at">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@at"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <let line="4637" var="Q{}ref-qualified" as="xs:string" slot="9" eval="16">
       <choose>
        <fn name="exists">
         <varRef name="Q{}at" slot="8"/>
        </fn>
        <fn name="concat">
         <varRef name="Q{}ref" slot="3"/>
         <str val="["/>
         <varRef name="Q{}at" slot="8"/>
         <str val="]"/>
        </fn>
        <true/>
        <varRef name="Q{}ref" slot="3"/>
       </choose>
       <let line="4641" var="Q{}instanceXML2" as="element()" slot="10" eval="16">
        <choose line="4643">
         <vc op="eq" onEmpty="0" comp="CCC">
          <ufCall line="4639" name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="0" eval="6">
           <varRef name="Q{}ref" slot="3"/>
          </ufCall>
          <str val="saxon-forms-default"/>
         </vc>
         <varRef line="4644" name="Q{}instanceXML" slot="1"/>
         <true/>
         <check line="4647" card="1" diag="3|0|XTTE0570|instanceXML2">
          <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="1" eval="6">
           <varRef name="Q{}ref" slot="3"/>
          </ufCall>
         </check>
        </choose>
        <let line="4652" var="Q{}ifVar" as="xs:string?" slot="11" eval="7">
         <choose line="790">
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
           <varRef line="4652" name="Q{}action-map" slot="0"/>
           <str val="@if"/>
          </ifCall>
          <treat line="791" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement#1">
           <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement#1">
            <cvUntyped to="xs:string" diag="5|0|XTTE0780|xforms:getIfStatement#1">
             <data>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <varRef line="4652" name="Q{}action-map" slot="0"/>
               <str val="@if"/>
              </ifCall>
             </data>
            </cvUntyped>
           </check>
          </treat>
         </choose>
         <let line="4655" var="Q{}delete-node" as="node()?" slot="12" eval="7">
          <choose line="4657">
           <and op="and">
            <fn name="exists">
             <varRef name="Q{}ref-qualified" slot="9"/>
            </fn>
            <vc op="ne" onEmpty="1" comp="CCC">
             <varRef name="Q{}ref-qualified" slot="9"/>
             <str val=""/>
            </vc>
           </and>
           <treat line="4658" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|delete-node">
            <check card="?" diag="3|0|XTTE0570|delete-node">
             <evaluate dxns="">
              <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="2" eval="16">
               <check card="1" diag="0|0||xforms:impose">
                <varRef name="Q{}ref-qualified" slot="9"/>
               </check>
              </ufCall>
              <varRef role="cxt" name="Q{}instanceXML2" slot="10"/>
              <varRef role="nsCxt" name="Q{}instanceXML2" slot="10"/>
              <str role="sa" val="no"/>
              <map role="options" size="0"/>
              <map role="wp" size="0"/>
             </evaluate>
            </check>
           </treat>
          </choose>
          <let line="4663" var="Q{}ifExecuted" as="xs:boolean" slot="13" eval="16">
           <choose line="4665">
            <fn name="exists">
             <varRef name="Q{}ifVar" slot="11"/>
            </fn>
            <treat line="4666" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
             <check card="1" diag="3|0|XTTE0570|ifExecuted">
              <cvUntyped to="xs:boolean" diag="3|0|XTTE0570|ifExecuted">
               <data>
                <evaluate dxns="">
                 <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="3" eval="16">
                  <check card="1" diag="0|0||xforms:impose">
                   <varRef name="Q{}ifVar" slot="11"/>
                  </check>
                 </ufCall>
                 <varRef role="cxt" name="Q{}delete-node" slot="12"/>
                 <check role="nsCxt" card="1" diag="4|0|XTTE3170|xsl:evaluate/namespace-context">
                  <varRef name="Q{}delete-node" slot="12"/>
                 </check>
                 <str role="sa" val="no"/>
                 <map role="options" size="0"/>
                 <map role="wp" size="0"/>
                </evaluate>
               </data>
              </cvUntyped>
             </check>
            </treat>
            <true/>
            <true/>
           </choose>
           <choose line="4674">
            <varRef name="Q{}ifExecuted" slot="13"/>
            <let line="4675" var="Q{}instance-with-delete" as="element()" slot="14" eval="16">
             <treat line="4676" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|instance-with-delete">
              <check card="1" diag="3|0|XTTE0570|instance-with-delete">
               <applyT mode="Q{}delete-node" bSlot="4">
                <varRef role="select" name="Q{}instanceXML2" slot="10"/>
                <withParam name="Q{}delete-node" flags="t" as="node()?">
                 <varRef line="4677" name="Q{}delete-node" slot="12"/>
                </withParam>
               </applyT>
              </check>
             </treat>
             <sequence line="4681">
              <ufCall name="Q{http://www.w3.org/2002/xforms}setInstance-JS" tailCall="false" bSlot="5" eval="6 6">
               <varRef name="Q{}ref" slot="3"/>
               <varRef name="Q{}instance-with-delete" slot="14"/>
              </ufCall>
              <choose line="4684">
               <fn name="matches">
                <varRef name="Q{}at" slot="8"/>
                <str val="index\s*\("/>
                <str val=""/>
               </fn>
               <let line="4685" var="Q{}repeat-id" as="xs:string?" slot="15" eval="7">
                <ufCall name="Q{http://www.w3.org/2002/xforms}getRepeatID" tailCall="false" bSlot="6" eval="16">
                 <check card="1" diag="0|0||xforms:getRepeatID">
                  <varRef name="Q{}at" slot="8"/>
                 </check>
                </ufCall>
                <let line="4686" var="Q{}at-position" as="xs:integer" slot="16" eval="16">
                 <treat line="4687" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="3|0|XTTE0570|at-position">
                  <check card="1" diag="3|0|XTTE0570|at-position">
                   <cvUntyped to="xs:integer" diag="3|0|XTTE0570|at-position">
                    <data>
                     <evaluate dxns="">
                      <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="7" eval="16">
                       <check card="1" diag="0|0||xforms:impose">
                        <varRef name="Q{}at" slot="8"/>
                       </check>
                      </ufCall>
                      <empty role="cxt"/>
                      <str role="sa" val="no"/>
                      <map role="options" size="0"/>
                      <map role="wp" size="0"/>
                     </evaluate>
                    </data>
                   </cvUntyped>
                  </check>
                 </treat>
                 <choose line="4690">
                  <fn name="exists">
                   <varRef name="Q{}repeat-id" slot="15"/>
                  </fn>
                  <let line="4691" var="Q{}repeat-size" as="xs:double" slot="17" eval="16">
                   <check card="1" diag="3|0|XTTE0570|repeat-size">
                    <convert from="xs:anyAtomicType" to="xs:double" flags="p" diag="3|0|XTTE0570|repeat-size">
                     <cvUntyped to="xs:double" diag="3|0|XTTE0570|repeat-size">
                      <data>
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                        <check card="1" diag="0|0||ixsl:call">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                        </check>
                        <str val="getRepeatSize"/>
                        <arrayBlock>
                         <varRef name="Q{}repeat-id" slot="15"/>
                        </arrayBlock>
                       </ifCall>
                      </data>
                     </cvUntyped>
                    </convert>
                   </check>
                   <sequence line="4693">
                    <message>
                     <sequence role="select">
                      <valueOf>
                       <str val="[action-delete] Size of repeat '"/>
                      </valueOf>
                      <valueOf>
                       <varRef name="Q{}repeat-id" slot="15"/>
                      </valueOf>
                      <valueOf>
                       <str val="' is "/>
                      </valueOf>
                      <valueOf>
                       <convert from="xs:double" to="xs:string">
                        <varRef name="Q{}repeat-size" slot="17"/>
                       </convert>
                      </valueOf>
                      <valueOf>
                       <str val=", index is "/>
                      </valueOf>
                      <valueOf>
                       <convert from="xs:integer" to="xs:string">
                        <varRef name="Q{}at-position" slot="16"/>
                       </convert>
                      </valueOf>
                     </sequence>
                     <str role="terminate" val="no"/>
                     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                    </message>
                    <choose line="4696">
                     <vc op="eq" onEmpty="0" comp="CAVC">
                      <varRef name="Q{}at-position" slot="16"/>
                      <varRef name="Q{}repeat-size" slot="17"/>
                     </vc>
                     <ifCall line="4698" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                      <check card="1" diag="0|0||ixsl:call">
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                      </check>
                      <str val="setRepeatIndex"/>
                      <arrayBlock>
                       <varRef name="Q{}repeat-id" slot="15"/>
                       <arith op="-" calc="d-d">
                        <varRef name="Q{}repeat-size" slot="17"/>
                        <dbl val="1"/>
                       </arith>
                      </arrayBlock>
                     </ifCall>
                    </choose>
                   </sequence>
                  </let>
                 </choose>
                </let>
               </let>
              </choose>
              <callT line="4707" name="Q{}xforms-recalculate" bSlot="8" flags="t"/>
             </sequence>
            </let>
           </choose>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="10" binds="11">
  <template name="Q{}action-send" flags="os" line="4752" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4753">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <callT line="4759" name="Q{}xforms-submit" bSlot="0" flags="t">
     <withParam name="Q{}submission" flags="c" as="xs:string">
      <treat line="4757" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|submission">
       <check card="1" diag="3|0|XTTE0570|submission">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|submission">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@submission"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </withParam>
    </callT>
   </sequence>
  </template>
 </co>
 <co id="12" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}usesIndexFunction" line="2954" module="saxon-xforms.xsl" eval="8" flags="pU" as="xs:boolean" slots="1">
   <arg name="Q{}this" as="element()"/>
   <fn role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2990" name="exists">
    <sequence line="2965">
     <analyzeString>
      <cvUntyped role="select" to="xs:string">
       <data>
        <slash simple="1">
         <varRef name="Q{}this" slot="0"/>
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </slash>
       </data>
      </cvUntyped>
      <str role="regex" val="\i\c*\("/>
      <str role="flags" val=""/>
      <choose role="matching" line="2968">
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="substring-before">
         <dot type="xs:string"/>
         <str val="("/>
        </fn>
        <str val="index"/>
       </vc>
       <str val="i"/>
      </choose>
      <empty role="nonMatching"/>
     </analyzeString>
     <analyzeString line="2977">
      <cvUntyped role="select" to="xs:string">
       <data>
        <slash simple="1">
         <varRef name="Q{}this" slot="0"/>
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </slash>
       </data>
      </cvUntyped>
      <str role="regex" val="\i\c*\("/>
      <str role="flags" val=""/>
      <choose role="matching" line="2980">
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="substring-before">
         <dot type="xs:string"/>
         <str val="("/>
        </fn>
        <str val="index"/>
       </vc>
       <str val="i"/>
      </choose>
      <empty role="nonMatching"/>
     </analyzeString>
    </sequence>
   </fn>
  </function>
 </co>
 <co id="13" binds="13 14 15 13 13 15">
  <mode name="Q{}form-check" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="27" rank="0" minImp="0" slots="10" flags="s" line="2606" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2607">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2608" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <param line="2609" name="Q{}pendingUpdates" slot="2" flags="t" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="2615" var="Q{}updatedPath" as="xs:string" slot="3" eval="16">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="Q{}position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="Q{}curPath" slot="0"/>
        </atomSing>
        <fn name="name">
         <dot type="element()"/>
        </fn>
        <str val="["/>
        <atomSing card="?" diag="0|3||fn:concat">
         <varRef name="Q{}position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="Q{}curPath" slot="0"/>
        </atomSing>
        <fn name="name">
         <dot type="element()"/>
        </fn>
       </fn>
      </choose>
      <copy line="2623" flags="cin">
       <sequence role="content">
        <applyT mode="Q{}form-check" bSlot="0">
         <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         <withParam name="Q{}curPath" as="xs:string">
          <fn line="2624" name="concat">
           <varRef name="Q{}updatedPath" slot="3"/>
           <str val="/"/>
          </fn>
         </withParam>
        </applyT>
        <let line="2630" var="Q{}associated-form-control" as="element()*" slot="4" eval="8">
         <filter flags="b">
          <filter flags="b">
           <slash simple="1">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
            <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <or op="or">
            <or op="or">
             <fn name="exists">
              <axis name="self" nodeTest="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
             </fn>
             <fn name="exists">
              <axis name="self" nodeTest="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
             </fn>
            </or>
            <fn name="exists">
             <axis name="self" nodeTest="element(Q{}textarea)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='textarea';"/>
            </fn>
           </or>
          </filter>
          <vc op="eq" onEmpty="0" comp="CCC">
           <ufCall name="Q{http://www.w3.org/2002/xforms}resolve-index" tailCall="false" bSlot="1" eval="16">
            <check card="1" diag="0|0||xforms:resolve-index">
             <cvUntyped to="xs:string">
              <attVal name="Q{}data-ref" chk="0"/>
             </cvUntyped>
            </check>
           </ufCall>
           <varRef name="Q{}updatedPath" slot="3"/>
          </vc>
         </filter>
         <sequence line="2632">
          <choose>
           <fn name="exists">
            <tail start="2">
             <varRef name="Q{}associated-form-control" slot="4"/>
            </tail>
           </fn>
           <message line="2633">
            <sequence role="select">
             <valueOf>
              <str val="[form-check] More than one form element controls the value of XForm node at "/>
             </valueOf>
             <valueOf>
              <varRef name="Q{}updatedPath" slot="3"/>
             </valueOf>
             <valueOf>
              <str val="; Saxon-Forms will apply the value of the first"/>
             </valueOf>
            </sequence>
            <str role="terminate" val="no"/>
            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
           </message>
          </choose>
          <choose line="2637">
           <fn name="exists">
            <varRef name="Q{}associated-form-control" slot="4"/>
           </fn>
           <valueOf line="2641" flags="l">
            <fn name="string-join">
             <convert from="xs:anyAtomicType" to="xs:string">
              <data>
               <mergeAdj>
                <applyT mode="Q{}get-field" bSlot="2">
                 <first role="select">
                  <varRef name="Q{}associated-form-control" slot="4"/>
                 </first>
                </applyT>
               </mergeAdj>
              </data>
             </convert>
             <str val=""/>
            </fn>
           </valueOf>
           <and line="2644" op="and">
            <fn name="exists">
             <varRef name="Q{}pendingUpdates" slot="2"/>
            </fn>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
             <check card="1" diag="0|0||map:contains">
              <varRef name="Q{}pendingUpdates" slot="2"/>
             </check>
             <varRef name="Q{}updatedPath" slot="3"/>
            </ifCall>
           </and>
           <valueOf line="2652" flags="l">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <check card="1" diag="0|0||map:get">
              <varRef name="Q{}pendingUpdates" slot="2"/>
             </check>
             <varRef name="Q{}updatedPath" slot="3"/>
            </ifCall>
           </valueOf>
           <true/>
           <valueOf line="2661" flags="l">
            <fn name="normalize-space">
             <fn name="string-join">
              <data>
               <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
              </data>
              <str val=""/>
             </fn>
            </fn>
           </valueOf>
          </choose>
          <forEachGroup line="2666" algorithm="by">
           <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <let role="content" line="2668" var="Q{}updatedChildPath" as="xs:string" slot="5" eval="8">
            <fn name="concat">
             <varRef name="Q{}updatedPath" slot="3"/>
             <str val="/"/>
             <check card="?" diag="0|2||fn:concat">
              <currentGroupingKey/>
             </check>
            </fn>
            <let line="2673" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:string" slot="6" eval="13">
             <fn name="concat">
              <varRef name="Q{}updatedChildPath" slot="5"/>
              <str val="["/>
             </fn>
             <let var="Q{}dataRefWithFilter" as="element()*" slot="7" eval="8">
              <filter flags="b">
               <slash simple="1">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
               <fn name="starts-with">
                <cvUntyped to="xs:string">
                 <attVal name="Q{}data-ref" chk="0"/>
                </cvUntyped>
                <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="6"/>
               </fn>
              </filter>
              <choose line="2676">
               <or op="or">
                <fn name="exists">
                 <tail start="2">
                  <currentGroup/>
                 </tail>
                </fn>
                <fn name="exists">
                 <varRef name="Q{}dataRefWithFilter" slot="7"/>
                </fn>
               </or>
               <let line="2679" var="Q{http://saxon.sf.net/generated-variable}v1" as="xs:string" slot="8" eval="13">
                <fn name="concat">
                 <varRef name="Q{}updatedPath" slot="3"/>
                 <str val="/"/>
                </fn>
                <forEach line="2677">
                 <currentGroup/>
                 <applyT line="2678" mode="Q{}form-check" bSlot="3">
                  <dot role="select"/>
                  <withParam name="Q{}curPath" as="xs:string">
                   <varRef line="2679" name="Q{http://saxon.sf.net/generated-variable}v1" slot="8"/>
                  </withParam>
                  <withParam name="Q{}position" as="xs:integer">
                   <fn line="2680" name="position"/>
                  </withParam>
                 </applyT>
                </forEach>
               </let>
               <true/>
               <let line="2688" var="Q{http://saxon.sf.net/generated-variable}v2" as="xs:string" slot="9" eval="13">
                <fn name="concat">
                 <varRef name="Q{}updatedPath" slot="3"/>
                 <str val="/"/>
                </fn>
                <forEach line="2686">
                 <currentGroup/>
                 <applyT line="2687" mode="Q{}form-check" bSlot="4">
                  <dot role="select"/>
                  <withParam name="Q{}curPath" as="xs:string">
                   <varRef line="2688" name="Q{http://saxon.sf.net/generated-variable}v2" slot="9"/>
                  </withParam>
                 </applyT>
                </forEach>
               </let>
              </choose>
             </let>
            </let>
           </let>
          </forEachGroup>
         </sequence>
        </let>
       </sequence>
      </copy>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="30" rank="0" minImp="0" slots="4" flags="s" line="2826" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2827">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2828" name="Q{}pendingUpdates" slot="1" flags="t" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <let line="2829" var="Q{}updatedPath" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <atomSing card="?" diag="0|0||fn:concat">
        <varRef name="Q{}curPath" slot="0"/>
       </atomSing>
       <str val="@"/>
       <fn name="local-name">
        <dot type="attribute()"/>
       </fn>
      </fn>
      <let line="2838" var="Q{}associated-form-control" as="element()*" slot="3" eval="8">
       <filter flags="b">
        <slash simple="1">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
         <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <vc op="eq" onEmpty="0" comp="CCC">
         <cast as="xs:string" emptiable="1">
          <attVal name="Q{}data-ref" chk="0"/>
         </cast>
         <varRef name="Q{}updatedPath" slot="2"/>
        </vc>
       </filter>
       <choose line="2841">
        <fn name="exists">
         <varRef name="Q{}associated-form-control" slot="3"/>
        </fn>
        <compAtt line="2844">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <fn role="select" line="2845" name="string-join">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <mergeAdj>
             <applyT mode="Q{}get-field" bSlot="5">
              <varRef role="select" name="Q{}associated-form-control" slot="3"/>
             </applyT>
            </mergeAdj>
           </data>
          </convert>
          <str val=""/>
         </fn>
        </compAtt>
        <and line="2848" op="and">
         <fn name="exists">
          <varRef name="Q{}pendingUpdates" slot="1"/>
         </fn>
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
          <check card="1" diag="0|0||map:contains">
           <varRef name="Q{}pendingUpdates" slot="1"/>
          </check>
          <varRef name="Q{}updatedPath" slot="2"/>
         </ifCall>
        </and>
        <compAtt line="2849">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <ifCall role="select" line="2850" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <check card="1" diag="0|0||map:get">
           <varRef name="Q{}pendingUpdates" slot="1"/>
          </check>
          <varRef name="Q{}updatedPath" slot="2"/>
         </ifCall>
        </compAtt>
        <true/>
        <forEach line="2854">
         <dot type="attribute()"/>
         <copyOf flags="vsc">
          <dot type="attribute()"/>
         </copyOf>
        </forEach>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="16" binds="13 13">
  <mode name="Q{}form-check-initial" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="26" rank="0" minImp="0" slots="6" flags="s" line="2544" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2545">
     <param name="Q{}instance-id" slot="0" as="xs:string">
      <str role="select" val="saxon-forms-default"/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|instance-id">
       <check card="1" diag="8|0|XTTE0590|instance-id">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|instance-id">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="2546" name="Q{}pendingUpdates" slot="1" flags="t" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <let line="2552" var="Q{}curPath" as="xs:string" slot="2" eval="16">
      <choose line="2554">
       <vc op="eq" onEmpty="0" comp="CCC">
        <varRef name="Q{}instance-id" slot="0"/>
        <str val="saxon-forms-default"/>
       </vc>
       <str val=""/>
       <true/>
       <cvUntyped line="2558" to="xs:string" diag="3|0|XTTE0570|curPath">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="concat">
          <str val="instance('"/>
          <varRef name="Q{}instance-id" slot="0"/>
          <str val="')/"/>
         </fn>
        </cast>
       </cvUntyped>
      </choose>
      <copy line="2565" flags="cin">
       <forEachGroup role="content" algorithm="by">
        <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        <fn role="key" name="local-name">
         <dot type="element()"/>
        </fn>
        <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
        <let role="content" line="2567" var="Q{}updatedChildPath" as="xs:string" slot="3" eval="8">
         <fn name="concat">
          <varRef name="Q{}curPath" slot="2"/>
          <check card="?" diag="0|1||fn:concat">
           <currentGroupingKey/>
          </check>
         </fn>
         <let line="2572" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:string" slot="4" eval="13">
          <fn name="concat">
           <varRef name="Q{}updatedChildPath" slot="3"/>
           <str val="["/>
          </fn>
          <let var="Q{}dataRefWithFilter" as="element()*" slot="5" eval="8">
           <filter flags="b">
            <slash simple="1">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </slash>
            <fn name="starts-with">
             <cvUntyped to="xs:string">
              <attVal name="Q{}data-ref" chk="0"/>
             </cvUntyped>
             <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="4"/>
            </fn>
           </filter>
           <choose line="2574">
            <or op="or">
             <fn name="exists">
              <tail start="2">
               <currentGroup/>
              </tail>
             </fn>
             <fn name="exists">
              <varRef name="Q{}dataRefWithFilter" slot="5"/>
             </fn>
            </or>
            <forEach line="2575">
             <currentGroup/>
             <applyT line="2576" mode="Q{}form-check" bSlot="0">
              <dot role="select"/>
              <withParam name="Q{}curPath" as="xs:string">
               <varRef line="2577" name="Q{}curPath" slot="2"/>
              </withParam>
              <withParam name="Q{}position" as="xs:integer">
               <fn line="2578" name="position"/>
              </withParam>
             </applyT>
            </forEach>
            <true/>
            <forEach line="2584">
             <currentGroup/>
             <applyT line="2585" mode="Q{}form-check" bSlot="1">
              <dot role="select"/>
              <withParam name="Q{}curPath" as="xs:string">
               <varRef line="2586" name="Q{}curPath" slot="2"/>
              </withParam>
             </applyT>
            </forEach>
           </choose>
          </let>
         </let>
        </let>
       </forEachGroup>
      </copy>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="6" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getRepeatID" line="763" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="1">
   <arg name="Q{}string-to-parse" as="xs:string"/>
   <treat role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="766" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getRepeatID#1">
    <check card="?" diag="5|0|XTTE0780|xforms:getRepeatID#1">
     <cvUntyped to="xs:string" diag="5|0|XTTE0780|xforms:getRepeatID#1">
      <data>
       <analyzeString>
        <varRef role="select" name="Q{}string-to-parse" slot="0"/>
        <str role="regex" val="^.*index\s*\(\s*'([^']+)'\s*\).*$"/>
        <str role="flags" val=""/>
        <fn role="matching" line="768" name="regex-group">
         <int val="1"/>
        </fn>
        <message role="nonMatching" line="771">
         <sequence role="select">
          <valueOf>
           <str val="[xforms:getRepeatID] No repeat identifiable from value '"/>
          </valueOf>
          <valueOf>
           <varRef name="Q{}string-to-parse" slot="0"/>
          </valueOf>
          <valueOf flags="S">
           <str val="'"/>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
       </analyzeString>
      </data>
     </cvUntyped>
    </check>
   </treat>
  </function>
 </co>
 <co id="17" binds="">
  <template name="Q{}action-reset" flags="os" line="4799" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4800">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <message line="4802">
     <valueOf role="select">
      <str val="[action-reset] Reset triggered!"/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
   </sequence>
  </template>
 </co>
 <co id="18" binds="16 2 1 5 19 7 20">
  <template name="Q{}xforms-value-changed" flags="os" line="4118" module="saxon-xforms.xsl" slots="5">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4119">
    <param name="Q{}form-control" slot="0" flags="i" as="node()">
     <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|form-control">
      <check card="1" diag="8|0|XTTE0590|form-control">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <let line="4121" var="Q{}refi" as="attribute(Q{}data-ref)?" slot="1" eval="8">
     <slash simple="1">
      <varRef name="Q{}form-control" slot="0"/>
      <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     </slash>
     <let line="4125" var="Q{}actions" as="item()?" slot="2" eval="8">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getAction"/>
       <arrayBlock>
        <fn name="string">
         <slash simple="1">
          <varRef name="Q{}form-control" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
         </slash>
        </fn>
       </arrayBlock>
      </ifCall>
      <let line="4129" var="Q{}updatedInstanceXML" as="element()" slot="3" eval="16">
       <treat line="4130" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|updatedInstanceXML">
        <check card="1" diag="3|0|XTTE0570|updatedInstanceXML">
         <applyT mode="Q{}form-check-initial" bSlot="0">
          <check role="select" line="4128" card="1" diag="3|0|XTTE0570|instanceXML">
           <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="1" eval="16">
            <check card="1" diag="0|0||xforms:getInstance-JS">
             <cvUntyped to="xs:string">
              <data>
               <varRef name="Q{}refi" slot="1"/>
              </data>
             </cvUntyped>
            </check>
           </ufCall>
          </check>
          <withParam name="Q{}instance-id" as="xs:string">
           <ufCall line="4124" name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="2" eval="16">
            <check card="1" diag="0|0||xforms:getInstanceId">
             <cvUntyped to="xs:string">
              <data>
               <varRef name="Q{}refi" slot="1"/>
              </data>
             </cvUntyped>
            </check>
           </ufCall>
          </withParam>
         </applyT>
        </check>
       </treat>
       <sequence line="4136">
        <ufCall name="Q{http://www.w3.org/2002/xforms}setInstance-JS" tailCall="false" bSlot="3" eval="16 6">
         <check card="1" diag="0|0||xforms:setInstance-JS">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="Q{}refi" slot="1"/>
           </data>
          </cvUntyped>
         </check>
         <varRef name="Q{}updatedInstanceXML" slot="3"/>
        </ufCall>
        <ifCall line="4143" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setPendingUpdates"/>
         <arrayBlock>
          <treat line="4140" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <ifCall line="4144" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setUpdates"/>
         <arrayBlock>
          <treat line="4141" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <forEach line="4146">
         <varRef name="Q{}actions" slot="2"/>
         <let line="4147" var="Q{}action-map" as="item()" slot="4" eval="16">
          <dot/>
          <choose line="4149">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
             <varRef name="Q{}action-map" slot="4"/>
            </treat>
            <str val="@event"/>
           </ifCall>
           <choose line="4150">
            <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
             <data>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                <varRef name="Q{}action-map" slot="4"/>
               </treat>
               <str val="@event"/>
              </ifCall>
             </data>
             <str val="xforms-value-changed"/>
            </gc>
            <callT line="4152" name="Q{}applyActions" bSlot="4">
             <withParam name="Q{}action-map" flags="t" as="item()">
              <varRef line="4153" name="Q{}action-map" slot="4"/>
             </withParam>
             <withParam name="Q{}nodeset" flags="t" as="xs:string">
              <check line="4154" card="1" diag="8|0|XTTE0590|nodeset">
               <cvUntyped to="xs:string" diag="8|0|XTTE0590|nodeset">
                <data>
                 <varRef name="Q{}refi" slot="1"/>
                </data>
               </cvUntyped>
              </check>
             </withParam>
             <withParam name="Q{}instanceXML" flags="t" as="element()">
              <varRef line="4155" name="Q{}updatedInstanceXML" slot="3"/>
             </withParam>
            </callT>
           </choose>
          </choose>
         </let>
        </forEach>
        <callT line="4161" name="Q{}xforms-recalculate" bSlot="5"/>
        <ufCall line="4163" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="6" eval="16">
         <check card="1" diag="0|0||xforms:checkRelevantFields">
          <cvUntyped to="xs:string">
           <data>
            <slash line="4122" simple="1">
             <varRef name="Q{}form-control" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}data-element)" jsTest="return item.name==='data-element'"/>
            </slash>
           </data>
          </cvUntyped>
         </check>
        </ufCall>
       </sequence>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="21" binds="22 23 3 23">
  <template name="Q{}getReferencedInstanceField" flags="os" line="3402" module="saxon-xforms.xsl" slots="5">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3403">
    <param name="Q{}refi" slot="0" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|refi">
      <check card="1" diag="8|0|XTTE0590|refi">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|refi">
        <data>
         <supplied slot="0"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="3407" var="Q{}field" as="node()*" slot="1" eval="8">
     <choose line="3409">
      <varRef name="Q{}refi" slot="0"/>
      <let line="3410" var="Q{}instance-map" as="map(xs:string, xs:string)" slot="2" eval="16">
       <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="0" eval="6">
        <varRef name="Q{}refi" slot="0"/>
       </ufCall>
       <let line="3417" var="Q{}this-instance" as="element()?" slot="3" eval="9">
        <callT line="3418" name="Q{}getInstance" bSlot="1">
         <withParam name="Q{}instance-id" flags="c" as="xs:string">
          <check line="3419" card="1" diag="8|0|XTTE0590|instance-id">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="Q{}instance-map" slot="2"/>
            <str val="instance-id"/>
           </ifCall>
          </check>
         </withParam>
        </callT>
        <treat line="3427" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|field">
         <evaluate dxns="">
          <ufCall role="xpath" line="3423" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="2" eval="16">
           <check card="1" diag="0|0||xforms:impose">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="Q{}instance-map" slot="2"/>
             <str val="xpath"/>
            </ifCall>
           </check>
          </ufCall>
          <varRef role="cxt" name="Q{}this-instance" slot="3"/>
          <check role="nsCxt" card="1" diag="4|0|XTTE3170|xsl:evaluate/namespace-context">
           <varRef name="Q{}this-instance" slot="3"/>
          </check>
          <str role="sa" val="no"/>
          <map role="options" size="0"/>
          <map role="wp" size="0"/>
         </evaluate>
        </treat>
       </let>
      </let>
      <true/>
      <let line="3432" var="Q{}default-instance" as="element()?" slot="4" eval="9">
       <callT line="3433" name="Q{}getInstance" bSlot="3">
        <withParam name="Q{}instance-id" flags="c" as="xs:string">
         <str val="saxon-forms-default"/>
        </withParam>
       </callT>
       <varRef line="3437" name="Q{}default-instance" slot="4"/>
      </let>
     </choose>
     <varRef line="3442" name="Q{}field" slot="1"/>
    </let>
   </sequence>
  </template>
 </co>
 <co id="24" binds="">
  <template name="Q{}action-message" flags="os" line="4719" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4720">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <message line="4724">
     <sequence role="select">
      <valueOf>
       <str val="[action-message] Message reads &#34;"/>
      </valueOf>
      <valueOf>
       <treat line="4722" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|message-value">
        <check card="1" diag="3|0|XTTE0570|message-value">
         <cvUntyped to="xs:string" diag="3|0|XTTE0570|message-value">
          <data>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="Q{}action-map" slot="0"/>
            <str val="value"/>
           </ifCall>
          </data>
         </cvUntyped>
        </check>
       </treat>
      </valueOf>
      <valueOf flags="S">
       <str val="&#34;"/>
      </valueOf>
     </sequence>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
   </sequence>
  </template>
 </co>
 <co id="25" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" line="828" module="saxon-xforms.xsl" eval="16" flags="pU" as="xs:string" slots="5">
   <arg name="Q{}base" as="xs:string"/>
   <arg name="Q{}relative" as="xs:string"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="835">
    <fn name="starts-with">
     <varRef name="Q{}relative" slot="1"/>
     <str val="/"/>
    </fn>
    <varRef line="836" name="Q{}relative" slot="1"/>
    <fn line="838" name="starts-with">
     <varRef name="Q{}relative" slot="1"/>
     <str val="instance("/>
    </fn>
    <varRef line="839" name="Q{}relative" slot="1"/>
    <fn line="841" name="not">
     <varRef name="Q{}base" slot="0"/>
    </fn>
    <varRef line="842" name="Q{}relative" slot="1"/>
    <or line="844" op="or">
     <fn name="not">
      <varRef name="Q{}relative" slot="1"/>
     </fn>
     <vc op="eq" onEmpty="0" comp="CCC">
      <varRef name="Q{}relative" slot="1"/>
      <str val="."/>
     </vc>
    </or>
    <varRef line="845" name="Q{}base" slot="0"/>
    <true/>
    <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="2" eval="16">
     <choose>
      <fn name="contains">
       <varRef name="Q{}relative" slot="1"/>
       <str val="/"/>
      </fn>
      <fn name="count">
       <filter flags="b">
        <fn name="tokenize">
         <varRef name="Q{}relative" slot="1"/>
         <str val="/"/>
         <str val=""/>
        </fn>
        <vc op="eq" onEmpty="0" comp="CCC">
         <dot type="xs:string"/>
         <str val=".."/>
        </vc>
       </filter>
      </fn>
      <fn name="contains">
       <varRef name="Q{}relative" slot="1"/>
       <str val=".."/>
      </fn>
      <int val="1"/>
      <true/>
      <int val="0"/>
     </choose>
     <let line="852" var="Q{}slashes" as="xs:integer*" slot="3" eval="4">
      <choose>
       <fn name="contains">
        <varRef name="Q{}base" slot="0"/>
        <str val="/"/>
       </fn>
       <fn name="index-of">
        <fn name="string-to-codepoints">
         <varRef name="Q{}base" slot="0"/>
        </fn>
        <int val="47"/>
       </fn>
       <true/>
       <int val="0"/>
      </choose>
      <choose line="884">
       <compareToInt op="gt" val="0">
        <varRef name="Q{}parentCallCount" slot="2"/>
       </compareToInt>
       <fn line="888" name="concat">
        <fn name="substring">
         <varRef name="Q{}base" slot="0"/>
         <int val="1"/>
         <choose line="863">
          <and op="and">
           <vc op="ge" onEmpty="0" comp="CAVC">
            <fn name="count">
             <varRef name="Q{}slashes" slot="3"/>
            </fn>
            <varRef name="Q{}parentCallCount" slot="2"/>
           </vc>
           <compareToInt op="gt" val="0">
            <varRef name="Q{}parentCallCount" slot="2"/>
           </compareToInt>
          </and>
          <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="4" eval="13">
           <arith op="-" calc="i-i">
            <varRef name="Q{}parentCallCount" slot="2"/>
            <int val="1"/>
           </arith>
           <check card="1" diag="3|0|XTTE0570|parentSlash">
            <filter flags="p">
             <varRef name="Q{}slashes" slot="3"/>
             <arith op="-" calc="i-i">
              <fn name="last"/>
              <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="4"/>
             </arith>
            </filter>
           </check>
          </let>
          <true/>
          <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
           <lastOf>
            <varRef name="Q{}slashes" slot="3"/>
           </lastOf>
          </check>
         </choose>
        </fn>
        <fn name="replace">
         <varRef name="Q{}relative" slot="1"/>
         <str val="\.\./"/>
         <str val=""/>
         <str val=""/>
        </fn>
       </fn>
       <true/>
       <fn line="891" name="concat">
        <varRef name="Q{}base" slot="0"/>
        <str val="/"/>
        <varRef name="Q{}relative" slot="1"/>
       </fn>
      </choose>
     </let>
    </let>
   </choose>
  </function>
 </co>
 <co id="26" binds="">
  <function name="Q{http://saxonica.com/ns/forms-local}current-date" line="118" module="xforms-function-library.xsl" eval="16" flags="pU" as="xs:string" slots="0">
   <treat role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="119" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|today">
    <check card="1" diag="3|0|XTTE0570|today">
     <cvUntyped to="xs:string" diag="3|0|XTTE0570|today">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getCurrentDate"/>
        <array size="0"/>
       </ifCall>
      </data>
     </cvUntyped>
    </check>
   </treat>
  </function>
 </co>
 <co id="14" binds="27">
  <function name="Q{http://www.w3.org/2002/xforms}resolve-index" line="72" module="xforms-function-library.xsl" eval="8" flags="pU" as="xs:string" slots="2">
   <arg name="Q{}input" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="74" var="Q{}parts" as="xs:string*" slot="1" eval="8">
    <analyzeString line="75">
     <varRef role="select" name="Q{}input" slot="0"/>
     <str role="regex" val="index\s*\(\s*'([^']+)'\s*\)"/>
     <str role="flags" val=""/>
     <cast role="matching" line="78" as="xs:string" emptiable="0">
      <ufCall name="Q{http://www.w3.org/2002/xforms}index" tailCall="false" bSlot="0" eval="16">
       <fn name="regex-group">
        <int val="1"/>
       </fn>
      </ufCall>
     </cast>
     <dot role="nonMatching" line="81" type="xs:string"/>
    </analyzeString>
    <fn line="87" name="string-join">
     <varRef name="Q{}parts" slot="1"/>
    </fn>
   </let>
  </function>
 </co>
 <co id="28" binds="3">
  <template name="Q{}action-setindex" flags="os" line="4772" module="saxon-xforms.xsl" slots="2">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4773">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <let line="4779" var="Q{}new-index" as="xs:integer" slot="1" eval="16">
     <treat line="4780" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="3|0|XTTE0570|new-index">
      <check card="1" diag="3|0|XTTE0570|new-index">
       <cvUntyped to="xs:integer" diag="3|0|XTTE0570|new-index">
        <data>
         <evaluate dxns="">
          <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="0" eval="16">
           <treat line="4776" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|new-index-ref">
            <check card="1" diag="3|0|XTTE0570|new-index-ref">
             <cvUntyped to="xs:string" diag="3|0|XTTE0570|new-index-ref">
              <data>
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <varRef name="Q{}action-map" slot="0"/>
                <str val="@index"/>
               </ifCall>
              </data>
             </cvUntyped>
            </check>
           </treat>
          </ufCall>
          <empty role="cxt"/>
          <str role="sa" val="no"/>
          <map role="options" size="0"/>
          <map role="wp" size="0"/>
         </evaluate>
        </data>
       </cvUntyped>
      </check>
     </treat>
     <sequence line="4783">
      <message>
       <sequence role="select">
        <valueOf>
         <str val="[action-setindex] $action-map = "/>
        </valueOf>
        <valueOf>
         <fn name="serialize">
          <varRef name="Q{}action-map" slot="0"/>
         </fn>
        </valueOf>
       </sequence>
       <str role="terminate" val="no"/>
       <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
      </message>
      <ifCall line="4785" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="setRepeatIndex"/>
       <arrayBlock>
        <treat line="4775" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|repeatID">
         <check card="1" diag="3|0|XTTE0570|repeatID">
          <cvUntyped to="xs:string" diag="3|0|XTTE0570|repeatID">
           <data>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="Q{}action-map" slot="0"/>
             <str val="@repeat"/>
            </ifCall>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <varRef name="Q{}new-index" slot="1"/>
       </arrayBlock>
      </ifCall>
     </sequence>
    </let>
   </sequence>
  </template>
 </co>
 <co id="29" binds="30">
  <template name="Q{}action-setfocus" flags="os" line="4734" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4735">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <callT line="4739" name="Q{}xforms-focus" bSlot="0" flags="t">
     <withParam name="Q{}control" flags="c" as="xs:string">
      <treat line="4737" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|control">
       <check card="1" diag="3|0|XTTE0570|control">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|control">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@control"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </withParam>
    </callT>
   </sequence>
  </template>
 </co>
 <co id="31" binds="1 3 3 32 16 2 5 33">
  <template name="Q{}action-setvalue" flags="os" line="4405" module="saxon-xforms.xsl" slots="14">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4406">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="4407" name="Q{}instanceXML" slot="1" flags="t" as="element()?">
     <empty role="select"/>
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instanceXML">
      <check card="?" diag="8|0|XTTE0590|instanceXML">
       <supplied slot="1"/>
      </check>
     </treat>
    </param>
    <param line="4408" name="Q{}nodeset" slot="2" flags="t" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
      <check card="1" diag="8|0|XTTE0590|nodeset">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|nodeset">
        <data>
         <supplied slot="2"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="4412" var="Q{}refz" as="xs:string" slot="3" eval="16">
     <let var="Q{}relative" as="xs:string" slot="4" eval="16">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
       <check card="1" diag="0|1||xforms:resolveXPathStrings">
        <cvUntyped to="xs:string">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@ref"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <choose line="835">
       <fn name="starts-with">
        <varRef name="Q{}relative" slot="4"/>
        <str val="/"/>
       </fn>
       <varRef line="836" name="Q{}relative" slot="4"/>
       <fn line="838" name="starts-with">
        <varRef name="Q{}relative" slot="4"/>
        <str val="instance("/>
       </fn>
       <varRef line="839" name="Q{}relative" slot="4"/>
       <fn line="4412" name="not">
        <varRef name="Q{}nodeset" slot="2"/>
       </fn>
       <varRef line="842" name="Q{}relative" slot="4"/>
       <or line="844" op="or">
        <fn name="not">
         <varRef name="Q{}relative" slot="4"/>
        </fn>
        <vc op="eq" onEmpty="0" comp="CCC">
         <varRef name="Q{}relative" slot="4"/>
         <str val="."/>
        </vc>
       </or>
       <varRef line="4412" name="Q{}nodeset" slot="2"/>
       <true/>
       <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="5" eval="16">
        <choose>
         <fn name="contains">
          <varRef name="Q{}relative" slot="4"/>
          <str val="/"/>
         </fn>
         <fn name="count">
          <filter flags="b">
           <fn name="tokenize">
            <varRef name="Q{}relative" slot="4"/>
            <str val="/"/>
            <str val=""/>
           </fn>
           <vc op="eq" onEmpty="0" comp="CCC">
            <dot type="xs:string"/>
            <str val=".."/>
           </vc>
          </filter>
         </fn>
         <fn name="contains">
          <varRef name="Q{}relative" slot="4"/>
          <str val=".."/>
         </fn>
         <int val="1"/>
         <true/>
         <int val="0"/>
        </choose>
        <let line="852" var="Q{}slashes" as="xs:integer*" slot="6" eval="4">
         <choose>
          <fn line="4412" name="contains">
           <varRef name="Q{}nodeset" slot="2"/>
           <str val="/"/>
          </fn>
          <fn name="index-of">
           <fn name="string-to-codepoints">
            <varRef line="4412" name="Q{}nodeset" slot="2"/>
           </fn>
           <int val="47"/>
          </fn>
          <true/>
          <int val="0"/>
         </choose>
         <choose line="884">
          <compareToInt op="gt" val="0">
           <varRef name="Q{}parentCallCount" slot="5"/>
          </compareToInt>
          <fn line="888" name="concat">
           <fn name="substring">
            <varRef line="4412" name="Q{}nodeset" slot="2"/>
            <int val="1"/>
            <choose line="863">
             <and op="and">
              <vc op="ge" onEmpty="0" comp="CAVC">
               <fn name="count">
                <varRef name="Q{}slashes" slot="6"/>
               </fn>
               <varRef name="Q{}parentCallCount" slot="5"/>
              </vc>
              <compareToInt op="gt" val="0">
               <varRef name="Q{}parentCallCount" slot="5"/>
              </compareToInt>
             </and>
             <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="7" eval="13">
              <arith op="-" calc="i-i">
               <varRef name="Q{}parentCallCount" slot="5"/>
               <int val="1"/>
              </arith>
              <check card="1" diag="3|0|XTTE0570|parentSlash">
               <filter flags="p">
                <varRef name="Q{}slashes" slot="6"/>
                <arith op="-" calc="i-i">
                 <fn name="last"/>
                 <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="7"/>
                </arith>
               </filter>
              </check>
             </let>
             <true/>
             <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
              <lastOf>
               <varRef name="Q{}slashes" slot="6"/>
              </lastOf>
             </check>
            </choose>
           </fn>
           <fn name="replace">
            <varRef name="Q{}relative" slot="4"/>
            <str val="\.\./"/>
            <str val=""/>
            <str val=""/>
           </fn>
          </fn>
          <true/>
          <fn line="4412" name="concat">
           <varRef name="Q{}nodeset" slot="2"/>
           <str val="/"/>
           <varRef line="891" name="Q{}relative" slot="4"/>
          </fn>
         </choose>
        </let>
       </let>
      </choose>
     </let>
     <let line="4414" var="Q{}instance-id" as="xs:string" slot="8" eval="16">
      <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="0" eval="6">
       <varRef name="Q{}refz" slot="3"/>
      </ufCall>
      <let line="4427" var="Q{}valuez" as="document-node()" slot="9" eval="16">
       <doc line="4429" validation="preserve">
        <choose>
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
          <varRef name="Q{}action-map" slot="0"/>
          <str val="@value"/>
         </ifCall>
         <let line="4430" var="Q{}contexti" as="node()" slot="10" eval="8">
          <evaluate line="4431" as="node()" dxns="">
           <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="1" eval="6">
            <varRef name="Q{}nodeset" slot="2"/>
           </ufCall>
           <varRef role="cxt" name="Q{}instanceXML" slot="1"/>
           <check role="nsCxt" card="1" diag="4|0|XTTE3170|xsl:evaluate/namespace-context">
            <varRef name="Q{}instanceXML" slot="1"/>
           </check>
           <str role="sa" val="no"/>
           <map role="options" size="0"/>
           <map role="wp" size="0"/>
          </evaluate>
          <evaluate line="4434" dxns="">
           <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="2" eval="16">
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||xforms:impose">
             <check card="1" diag="0|0||xforms:impose">
              <cvUntyped to="xs:string">
               <data>
                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                 <varRef name="Q{}action-map" slot="0"/>
                 <str val="@value"/>
                </ifCall>
               </data>
              </cvUntyped>
             </check>
            </treat>
           </ufCall>
           <varRef role="cxt" name="Q{}contexti" slot="10"/>
           <varRef role="nsCxt" name="Q{}contexti" slot="10"/>
           <str role="sa" val="no"/>
           <map role="options" size="0"/>
           <map role="wp" size="0"/>
          </evaluate>
         </let>
         <ifCall line="4437" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
          <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
           <dot flags="a"/>
          </treat>
          <str val="value"/>
         </ifCall>
         <ifCall line="4438" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="Q{}action-map" slot="0"/>
          <str val="value"/>
         </ifCall>
         <true/>
         <str val=""/>
        </choose>
       </doc>
       <sequence line="4448">
        <let line="4450" var="Q{}associated-form-control" as="element()?" slot="11" eval="7">
         <check card="?" diag="3|0|XTTE0570|associated-form-control">
          <filter flags="b">
           <slash simple="1">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
            <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <vc op="eq" onEmpty="0" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <cast as="xs:string" emptiable="1">
             <attVal name="Q{}data-ref" chk="0"/>
            </cast>
            <varRef name="Q{}refz" slot="3"/>
           </vc>
          </filter>
         </check>
         <choose line="4452">
          <fn name="exists">
           <varRef name="Q{}associated-form-control" slot="11"/>
          </fn>
          <sequence line="4453">
           <applyT mode="Q{}set-field" bSlot="3">
            <varRef role="select" name="Q{}associated-form-control" slot="11"/>
            <withParam name="Q{}value" flags="t" as="xs:string">
             <cast line="4454" as="xs:string" emptiable="0">
              <data>
               <varRef name="Q{}valuez" slot="9"/>
              </data>
             </cast>
            </withParam>
           </applyT>
           <ifCall line="4456" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setUpdates"/>
            <arrayBlock>
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
               <check card="1" diag="0|0||map:put">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                 <check card="1" diag="0|0||ixsl:call">
                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                 </check>
                 <str val="getUpdates"/>
                 <array size="0"/>
                </ifCall>
               </check>
              </treat>
              <varRef name="Q{}refz" slot="3"/>
              <cast as="xs:string" emptiable="0">
               <data>
                <varRef name="Q{}valuez" slot="9"/>
               </data>
              </cast>
             </ifCall>
            </arrayBlock>
           </ifCall>
          </sequence>
          <true/>
          <ifCall line="4459" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setPendingUpdates"/>
           <arrayBlock>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
             <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
              <check card="1" diag="0|0||map:put">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                <check card="1" diag="0|0||ixsl:call">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                </check>
                <str val="getPendingUpdates"/>
                <array size="0"/>
               </ifCall>
              </check>
             </treat>
             <varRef name="Q{}refz" slot="3"/>
             <cast as="xs:string" emptiable="0">
              <data>
               <varRef name="Q{}valuez" slot="9"/>
              </data>
             </cast>
            </ifCall>
           </arrayBlock>
          </ifCall>
         </choose>
        </let>
        <choose line="4465">
         <vc op="ne" onEmpty="1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <varRef name="Q{}refz" slot="3"/>
          <str val=""/>
         </vc>
         <let line="4467" var="Q{}pendingUpdates" as="map(xs:string, xs:string)?" slot="12" eval="7">
          <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdates">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="getPendingUpdates"/>
            <array size="0"/>
           </ifCall>
          </treat>
          <let line="4469" var="Q{}updatedInstanceXML" as="element()" slot="13" eval="16">
           <treat line="4470" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|updatedInstanceXML">
            <check card="1" diag="3|0|XTTE0570|updatedInstanceXML">
             <applyT mode="Q{}form-check-initial" bSlot="4">
              <choose role="select" line="4418">
               <and op="and">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}instance-id" slot="8"/>
                 <str val="saxon-forms-default"/>
                </vc>
                <fn name="exists">
                 <varRef name="Q{}instanceXML" slot="1"/>
                </fn>
               </and>
               <check line="4419" card="1" diag="3|0|XTTE0570|instanceXML2">
                <varRef name="Q{}instanceXML" slot="1"/>
               </check>
               <true/>
               <check line="4422" card="1" diag="3|0|XTTE0570|instanceXML2">
                <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="5" eval="6">
                 <varRef name="Q{}refz" slot="3"/>
                </ufCall>
               </check>
              </choose>
              <withParam name="Q{}instance-id" as="xs:string">
               <varRef line="4471" name="Q{}instance-id" slot="8"/>
              </withParam>
              <withParam name="Q{}pendingUpdates" flags="t" as="map(xs:string, xs:string)?">
               <varRef line="4472" name="Q{}pendingUpdates" slot="12"/>
              </withParam>
             </applyT>
            </check>
           </treat>
           <sequence line="4477">
            <ufCall name="Q{http://www.w3.org/2002/xforms}setInstance-JS" tailCall="false" bSlot="6" eval="6 6">
             <varRef name="Q{}refz" slot="3"/>
             <varRef name="Q{}updatedInstanceXML" slot="13"/>
            </ufCall>
            <callT line="4478" name="Q{}refreshOutputs-JS" bSlot="7" flags="t"/>
           </sequence>
          </let>
         </let>
        </choose>
       </sequence>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="34" binds="">
  <globalVariable name="Q{}default-submission-id" type="xs:string" line="76" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <str val="saxon-forms-default-submission"/>
  </globalVariable>
 </co>
 <co id="19" binds="1 2 3 3 31 0 8 28 29 35 7 17 10 24 19">
  <template name="Q{}applyActions" flags="os" line="3650" module="saxon-xforms.xsl" slots="12">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3651">
    <param name="Q{}action-map" slot="0" flags="tr" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|action-map">
      <check card="1" diag="8|0|XTTE0590|action-map">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3652" name="Q{}instanceXML" slot="1" flags="t" as="element()?">
     <empty role="select"/>
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instanceXML">
      <check card="?" diag="8|0|XTTE0590|instanceXML">
       <supplied slot="1"/>
      </check>
     </treat>
    </param>
    <param line="3653" name="Q{}nodeset" slot="2" flags="t" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
      <check card="1" diag="8|0|XTTE0590|nodeset">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|nodeset">
        <data>
         <supplied slot="2"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="3655" var="Q{}ref" as="xs:string?" slot="3" eval="7">
     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|ref">
      <check card="?" diag="3|0|XTTE0570|ref">
       <cvUntyped to="xs:string" diag="3|0|XTTE0570|ref">
        <data>
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="Q{}action-map" slot="0"/>
          <str val="@ref"/>
         </ifCall>
        </data>
       </cvUntyped>
      </check>
     </treat>
     <let line="3656" var="Q{}at" as="xs:string?" slot="4" eval="7">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|at">
       <check card="?" diag="3|0|XTTE0570|at">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|at">
         <data>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}action-map" slot="0"/>
           <str val="@at"/>
          </ifCall>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <let line="3668" var="Q{}ref-qualified" as="xs:string?" slot="5" eval="7">
       <choose>
        <and op="and">
         <fn name="exists">
          <varRef name="Q{}ref" slot="3"/>
         </fn>
         <varRef name="Q{}ref" slot="3"/>
        </and>
        <choose>
         <fn name="exists">
          <varRef name="Q{}at" slot="4"/>
         </fn>
         <fn name="concat">
          <varRef name="Q{}ref" slot="3"/>
          <str val="["/>
          <varRef name="Q{}at" slot="4"/>
          <str val="]"/>
         </fn>
         <true/>
         <varRef name="Q{}ref" slot="3"/>
        </choose>
       </choose>
       <let line="3670" var="Q{}instance-id" as="xs:string" slot="6" eval="16">
        <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="0" eval="16">
         <check card="1" diag="0|0||xforms:getInstanceId">
          <varRef name="Q{}ref" slot="3"/>
         </check>
        </ufCall>
        <let line="3672" var="Q{}instanceXML2" as="element()?" slot="7" eval="7">
         <choose line="3674">
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <varRef name="Q{}instance-id" slot="6"/>
            <str val="saxon-forms-default"/>
           </vc>
           <fn name="exists">
            <varRef name="Q{}instanceXML" slot="1"/>
           </fn>
          </and>
          <varRef line="3675" name="Q{}instanceXML" slot="1"/>
          <fn line="3677" name="exists">
           <varRef name="Q{}ref-qualified" slot="5"/>
          </fn>
          <ufCall line="3678" name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="1" eval="16">
           <check card="1" diag="0|0||xforms:getInstance-JS">
            <varRef name="Q{}ref-qualified" slot="5"/>
           </check>
          </ufCall>
         </choose>
         <let line="3686" var="Q{}context" as="node()?" slot="8" eval="7">
          <choose line="3688">
           <and op="and">
            <and op="and">
             <fn name="exists">
              <varRef name="Q{}ref-qualified" slot="5"/>
             </fn>
             <vc op="ne" onEmpty="1" comp="CCC">
              <varRef name="Q{}ref-qualified" slot="5"/>
              <str val=""/>
             </vc>
            </and>
            <fn name="exists">
             <varRef name="Q{}instanceXML2" slot="7"/>
            </fn>
           </and>
           <treat line="3689" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
            <check card="?" diag="3|0|XTTE0570|context">
             <evaluate dxns="">
              <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="2" eval="16">
               <check card="1" diag="0|0||xforms:impose">
                <varRef name="Q{}ref-qualified" slot="5"/>
               </check>
              </ufCall>
              <varRef role="cxt" name="Q{}instanceXML2" slot="7"/>
              <check role="nsCxt" card="1" diag="4|0|XTTE3170|xsl:evaluate/namespace-context">
               <varRef name="Q{}instanceXML2" slot="7"/>
              </check>
              <str role="sa" val="no"/>
              <map role="options" size="0"/>
              <map role="wp" size="0"/>
             </evaluate>
            </check>
           </treat>
          </choose>
          <let line="3696" var="Q{}ifVar" as="xs:string?" slot="9" eval="7">
           <choose line="790">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
             <varRef line="3696" name="Q{}action-map" slot="0"/>
             <str val="@if"/>
            </ifCall>
            <treat line="791" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement#1">
             <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement#1">
              <cvUntyped to="xs:string" diag="5|0|XTTE0780|xforms:getIfStatement#1">
               <data>
                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                 <varRef line="3696" name="Q{}action-map" slot="0"/>
                 <str val="@if"/>
                </ifCall>
               </data>
              </cvUntyped>
             </check>
            </treat>
           </choose>
           <let line="3700" var="Q{}ifExecuted" as="xs:boolean" slot="10" eval="16">
            <choose line="3702">
             <and op="and">
              <fn name="exists">
               <varRef name="Q{}ifVar" slot="9"/>
              </fn>
              <fn name="exists">
               <varRef name="Q{}context" slot="8"/>
              </fn>
             </and>
             <treat line="3703" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
              <check card="1" diag="3|0|XTTE0570|ifExecuted">
               <cvUntyped to="xs:boolean" diag="3|0|XTTE0570|ifExecuted">
                <data>
                 <evaluate dxns="">
                  <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="3" eval="16">
                   <check card="1" diag="0|0||xforms:impose">
                    <varRef name="Q{}ifVar" slot="9"/>
                   </check>
                  </ufCall>
                  <varRef role="cxt" name="Q{}context" slot="8"/>
                  <check role="nsCxt" card="1" diag="4|0|XTTE3170|xsl:evaluate/namespace-context">
                   <varRef name="Q{}context" slot="8"/>
                  </check>
                  <str role="sa" val="no"/>
                  <map role="options" size="0"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <true/>
             <true/>
            </choose>
            <choose line="3713">
             <varRef name="Q{}ifExecuted" slot="10"/>
             <let line="3714" var="Q{}action-name" as="xs:string" slot="11" eval="16">
              <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|action-name">
               <check card="1" diag="3|0|XTTE0570|action-name">
                <cvUntyped to="xs:string" diag="3|0|XTTE0570|action-name">
                 <data>
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <varRef name="Q{}action-map" slot="0"/>
                   <str val="name"/>
                  </ifCall>
                 </data>
                </cvUntyped>
               </check>
              </treat>
              <sequence line="3717">
               <choose>
                <vc op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="action"/>
                </vc>
                <empty/>
                <vc line="3720" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="setvalue"/>
                </vc>
                <callT line="3721" name="Q{}action-setvalue" bSlot="4">
                 <withParam name="Q{}nodeset" flags="t" as="xs:string">
                  <check line="3722" card="1" diag="8|0|XTTE0590|nodeset">
                   <varRef name="Q{}ref" slot="3"/>
                  </check>
                 </withParam>
                 <withParam name="Q{}instanceXML" flags="t" as="element()">
                  <check line="3723" card="1" diag="8|0|XTTE0590|instanceXML">
                   <varRef name="Q{}instanceXML2" slot="7"/>
                  </check>
                 </withParam>
                </callT>
                <vc line="3726" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="insert"/>
                </vc>
                <callT line="3727" name="Q{}action-insert" bSlot="5">
                 <withParam name="Q{}nodeset" flags="t" as="xs:string">
                  <check line="3728" card="1" diag="8|0|XTTE0590|nodeset">
                   <varRef name="Q{}ref-qualified" slot="5"/>
                  </check>
                 </withParam>
                 <withParam name="Q{}instanceXML" flags="t" as="element()">
                  <check line="3729" card="1" diag="8|0|XTTE0590|instanceXML">
                   <varRef name="Q{}instanceXML2" slot="7"/>
                  </check>
                 </withParam>
                </callT>
                <vc line="3732" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="delete"/>
                </vc>
                <callT line="3733" name="Q{}action-delete" bSlot="6">
                 <withParam name="Q{}nodeset" flags="t" as="xs:string">
                  <check line="3734" card="1" diag="8|0|XTTE0590|nodeset">
                   <varRef name="Q{}ref-qualified" slot="5"/>
                  </check>
                 </withParam>
                 <withParam name="Q{}instanceXML" flags="t" as="element()">
                  <check line="3735" card="1" diag="8|0|XTTE0590|instanceXML">
                   <varRef name="Q{}instanceXML2" slot="7"/>
                  </check>
                 </withParam>
                </callT>
                <vc line="3738" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="setindex"/>
                </vc>
                <callT line="3739" name="Q{}action-setindex" bSlot="7"/>
                <vc line="3744" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="setfocus"/>
                </vc>
                <callT line="3745" name="Q{}action-setfocus" bSlot="8"/>
                <vc line="3750" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="rebuild"/>
                </vc>
                <callT line="3751" name="Q{}xforms-rebuild" bSlot="9"/>
                <vc line="3753" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="recalculate"/>
                </vc>
                <callT line="3754" name="Q{}xforms-recalculate" bSlot="10"/>
                <vc line="3762" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="reset"/>
                </vc>
                <callT line="3763" name="Q{}action-reset" bSlot="11"/>
                <vc line="3768" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="send"/>
                </vc>
                <callT line="3769" name="Q{}action-send" bSlot="12"/>
                <vc line="3771" op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}action-name" slot="11"/>
                 <str val="message"/>
                </vc>
                <callT line="3772" name="Q{}action-message" bSlot="13"/>
                <true/>
                <message line="3775">
                 <sequence role="select">
                  <valueOf>
                   <str val="[applyActions] action '"/>
                  </valueOf>
                  <valueOf>
                   <varRef name="Q{}action-name" slot="11"/>
                  </valueOf>
                  <valueOf>
                   <str val="' not yet handled!"/>
                  </valueOf>
                 </sequence>
                 <str role="terminate" val="no"/>
                 <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                </message>
               </choose>
               <forEach line="3784">
                <ifCall line="3780" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                 <treat as="array(map(*))" jsTest="function v(item) {return SaxonJS.U.isMap(item)};function c(n) {return n==1;};return SaxonJS.U.isArray(item) &amp;&amp; SaxonJS.U.ForArray(item.value).every(function(seq){return c(seq.length) &amp;&amp; SaxonJS.U.ForArray(seq).every(v)});" diag="3|0|XTTE0570|nested-actions-array">
                  <check card="?" diag="3|0|XTTE0570|nested-actions-array">
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <varRef name="Q{}action-map" slot="0"/>
                    <str val="nested-actions"/>
                   </ifCall>
                  </check>
                 </treat>
                </ifCall>
                <callT line="3785" name="Q{}applyActions" bSlot="14">
                 <withParam name="Q{}action-map" flags="t" as="item()">
                  <dot line="3786"/>
                 </withParam>
                </callT>
               </forEach>
              </sequence>
             </let>
            </choose>
           </let>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="4" binds="4">
  <mode name="Q{}insert-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="21" rank="0" minImp="0" slots="3" flags="s" line="1909" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1910">
     <param name="Q{}insert-node-location" slot="0" flags="ti" as="node()">
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|insert-node-location">
       <check card="1" diag="8|0|XTTE0590|insert-node-location">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1911" name="Q{}node-to-insert" slot="1" flags="ti" as="node()">
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|node-to-insert">
       <check card="1" diag="8|0|XTTE0590|node-to-insert">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1912" name="Q{}position-relative" slot="2" flags="t" as="xs:string?">
      <str role="select" val="after"/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|position-relative">
       <check card="?" diag="8|0|XTTE0590|position-relative">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|position-relative">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <choose line="1915">
      <and op="and">
       <is op="is">
        <dot type="element()"/>
        <varRef name="Q{}insert-node-location" slot="0"/>
       </is>
       <vc op="eq" onEmpty="0" comp="CCC">
        <varRef name="Q{}position-relative" slot="2"/>
        <str val="before"/>
       </vc>
      </and>
      <copyOf line="1917" flags="vc">
       <varRef name="Q{}node-to-insert" slot="1"/>
      </copyOf>
     </choose>
     <copy line="1920" flags="cin">
      <sequence role="content">
       <copyOf flags="vc">
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </copyOf>
       <applyT line="1921" mode="Q{}insert-node" bSlot="0">
        <axis role="select" name="child" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
       </applyT>
      </sequence>
     </copy>
     <choose line="1923">
      <and op="and">
       <is op="is">
        <dot type="element()"/>
        <varRef name="Q{}insert-node-location" slot="0"/>
       </is>
       <vc op="eq" onEmpty="0" comp="CCC">
        <varRef name="Q{}position-relative" slot="2"/>
        <str val="after"/>
       </vc>
      </and>
      <copyOf line="1924" flags="vc">
       <varRef name="Q{}node-to-insert" slot="1"/>
      </copyOf>
     </choose>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="36" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}hasClass" line="3032" module="saxon-xforms.xsl" eval="16" flags="pU" as="xs:boolean" slots="2">
   <arg name="Q{}element" as="element()"/>
   <arg name="Q{}string" as="xs:string"/>
   <gc role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3036" op="=" card="N:1" comp="CCC">
    <fn name="tokenize">
     <cvUntyped to="xs:string" diag="3|0|XTTE0570|class">
      <data>
       <slash simple="1">
        <varRef name="Q{}element" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
       </slash>
      </data>
     </cvUntyped>
    </fn>
    <varRef line="3039" name="Q{}string" slot="1"/>
   </gc>
  </function>
 </co>
 <co id="37" binds="">
  <globalParam name="Q{}xforms-instance-id" type="item()*" line="63" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-jinstance"/>
  </globalParam>
 </co>
 <co id="38" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getIfStatement" line="787" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="1">
   <arg name="Q{}map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="790">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="Q{}map" slot="0"/>
     <str val="@if"/>
    </ifCall>
    <treat line="791" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement#1">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement#1">
      <cvUntyped to="xs:string" diag="5|0|XTTE0780|xforms:getIfStatement#1">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="Q{}map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="39" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getClass" line="3053" module="saxon-xforms.xsl" eval="7" flags="pU" as="attribute(Q{}class)?" slots="3">
   <arg name="Q{}element" as="element()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3056" var="Q{}class" as="xs:string?" slot="1" eval="7">
    <choose line="3057">
     <fn name="exists">
      <slash simple="1">
       <varRef name="Q{}element" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
      </slash>
     </fn>
     <cvUntyped line="3058" to="xs:string" diag="3|0|XTTE0570|class">
      <cast as="xs:untypedAtomic" emptiable="0">
       <fn name="string">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <slash simple="1">
           <varRef name="Q{}element" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
          </slash>
         </data>
        </convert>
       </fn>
      </cast>
     </cvUntyped>
    </choose>
    <let line="3061" var="Q{}class-mod" as="xs:string?" slot="2" eval="7">
     <choose line="3063">
      <fn name="exists">
       <slash simple="1">
        <varRef name="Q{}element" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
       </slash>
      </fn>
      <cvUntyped line="3064" to="xs:string" diag="3|0|XTTE0570|class-mod">
       <cast as="xs:untypedAtomic" emptiable="0">
        <fn name="string-join">
         <sequence>
          <varRef name="Q{}class" slot="1"/>
          <str val="incremental"/>
         </sequence>
         <str val=" "/>
        </fn>
       </cast>
      </cvUntyped>
      <true/>
      <varRef line="3067" name="Q{}class" slot="1"/>
     </choose>
     <choose line="3071">
      <fn name="exists">
       <varRef name="Q{}class-mod" slot="2"/>
      </fn>
      <treat line="3072" as="attribute(Q{}class)" jsTest="return item.name==='class'" diag="5|0|XTTE0780|xforms:getClass#1">
       <att name="class">
        <varRef name="Q{}class-mod" slot="2"/>
       </att>
      </treat>
     </choose>
    </let>
   </let>
  </function>
 </co>
 <co id="40" binds="41 22 42 43 44">
  <template name="Q{}refreshRepeats-JS" flags="os" line="3530" module="saxon-xforms.xsl" slots="8">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3532">
    <message>
     <valueOf role="select">
      <str val="[refreshRepeats-JS] START refreshRepeats"/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <let line="3535" var="Q{}repeat-keys" as="item()?" slot="0" eval="8">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getRepeatKeys"/>
      <array size="0"/>
     </ifCall>
     <forEach line="3537">
      <varRef name="Q{}repeat-keys" slot="0"/>
      <let line="3538" var="Q{}this-key" as="xs:string" slot="1" eval="16">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|this-key">
        <check card="1" diag="3|0|XTTE0570|this-key">
         <cvUntyped to="xs:string" diag="3|0|XTTE0570|this-key">
          <data>
           <dot/>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <let line="3539" var="Q{}this-repeat-nodeset" as="xs:string" slot="2" eval="16">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|this-repeat-nodeset">
         <check card="1" diag="3|0|XTTE0570|this-repeat-nodeset">
          <cvUntyped to="xs:string" diag="3|0|XTTE0570|this-repeat-nodeset">
           <data>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="getRepeat"/>
             <arrayBlock>
              <varRef name="Q{}this-key" slot="1"/>
             </arrayBlock>
            </ifCall>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <sequence line="3541">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="[refreshRepeats-JS] Refreshing repeat ID = '"/>
           </valueOf>
           <varRef name="Q{}this-key" slot="1"/>
           <valueOf flags="S">
            <str val="'"/>
           </valueOf>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <let line="3552" var="Q{}contexti" as="element()?" slot="3" eval="7">
          <ufCall line="3553" name="Q{http://www.w3.org/2002/xforms}instance" tailCall="false" bSlot="0" eval="16">
           <check line="3545" card="1" diag="3|0|XTTE0570|this-instance-id">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="1" eval="6">
              <varRef name="Q{}this-repeat-nodeset" slot="2"/>
             </ufCall>
             <str val="instance-id"/>
            </ifCall>
           </check>
          </ufCall>
          <let line="3560" var="Q{}namespace-context-item" as="element()" slot="4" eval="16">
           <choose>
            <fn name="exists">
             <varRef name="Q{}contexti" slot="3"/>
            </fn>
            <check card="1" diag="3|0|XTTE0570|namespace-context-item">
             <varRef name="Q{}contexti" slot="3"/>
            </check>
            <true/>
            <treat as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|namespace-context-item">
             <check card="1" diag="3|0|XTTE0570|namespace-context-item">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="getXForm"/>
               <array size="0"/>
              </ifCall>
             </check>
            </treat>
           </choose>
           <let line="3562" var="Q{}page-element" as="element()?" slot="5" eval="7">
            <check card="?" diag="3|0|XTTE0570|page-element">
             <filter flags="b">
              <slash simple="1">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
               <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <vc op="eq" onEmpty="0" comp="CCC">
               <cast as="xs:string" emptiable="1">
                <attVal name="Q{}id" chk="0"/>
               </cast>
               <varRef name="Q{}this-key" slot="1"/>
              </vc>
             </filter>
            </check>
            <choose line="3565">
             <fn name="exists">
              <varRef name="Q{}page-element" slot="5"/>
             </fn>
             <let line="3566" var="Q{}instance-keys" as="item()?" slot="6" eval="8">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="getInstanceKeys"/>
               <array size="0"/>
              </ifCall>
              <let line="3567" var="Q{}instances" as="map(xs:string, element())" slot="7" eval="16">
               <treat line="3569" as="map(xs:string, element())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|instances">
                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
                 <forEach>
                  <varRef name="Q{}instance-keys" slot="6"/>
                  <ifCall line="3570" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                   <atomSing diag="0|0||map:entry">
                    <dot/>
                   </atomSing>
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                    <check card="1" diag="0|0||ixsl:call">
                     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                    </check>
                    <str val="getInstance"/>
                    <arrayBlock>
                     <dot/>
                    </arrayBlock>
                   </ifCall>
                  </ifCall>
                 </forEach>
                 <map size="2">
                  <str val="duplicates"/>
                  <str val="reject"/>
                  <str val="duplicates-error-code"/>
                  <str val="XTDE3365"/>
                 </map>
                </ifCall>
               </treat>
               <resultDoc line="3574" global="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
                <fn role="href" name="concat">
                 <str val="#"/>
                 <varRef name="Q{}this-key" slot="1"/>
                </fn>
                <applyT role="content" line="3575" bSlot="2">
                 <filter role="select" flags="b">
                  <slash simple="1">
                   <gVarRef name="Q{}xforms-doc" bSlot="3"/>
                   <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
                  </slash>
                  <vc op="eq" onEmpty="0" comp="CCC">
                   <ufCall name="Q{http://www.w3.org/2002/xforms}getDataRef" tailCall="false" bSlot="4" eval="16 0">
                    <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
                    <str val=""/>
                   </ufCall>
                   <varRef name="Q{}this-repeat-nodeset" slot="2"/>
                  </vc>
                 </filter>
                 <withParam name="Q{}recalculate" as="xs:boolean">
                  <true/>
                 </withParam>
                 <withParam name="Q{}refreshRepeats" as="xs:boolean">
                  <true/>
                 </withParam>
                 <withParam name="Q{}instances" flags="t" as="map(xs:string, element())">
                  <varRef line="3576" name="Q{}instances" slot="7"/>
                 </withParam>
                </applyT>
               </resultDoc>
              </let>
             </let>
            </choose>
           </let>
          </let>
         </let>
        </sequence>
       </let>
      </let>
     </forEach>
    </let>
   </sequence>
  </template>
 </co>
 <co id="33" binds="3 41 22 22">
  <template name="Q{}refreshOutputs-JS" flags="os" line="3451" module="saxon-xforms.xsl" slots="8">
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3458" var="Q{}output-keys" as="item()?" slot="0" eval="8">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <str val="getOutputKeys"/>
     <array size="0"/>
    </ifCall>
    <forEach line="3460">
     <varRef name="Q{}output-keys" slot="0"/>
     <let line="3461" var="Q{}this-key" as="xs:string" slot="1" eval="16">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|this-key">
       <check card="1" diag="3|0|XTTE0570|this-key">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|this-key">
         <data>
          <dot/>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <let line="3462" var="Q{}this-output" as="map(*)" slot="2" eval="16">
       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|this-output">
        <check card="1" diag="3|0|XTTE0570|this-output">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="getOutput"/>
          <arrayBlock>
           <varRef name="Q{}this-key" slot="1"/>
          </arrayBlock>
         </ifCall>
        </check>
       </treat>
       <sequence line="3464">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="[refreshOutputs-JS] Refreshing output ID = '"/>
          </valueOf>
          <varRef name="Q{}this-key" slot="1"/>
          <valueOf flags="S">
           <str val="'"/>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="3481" var="Q{}xpath-mod" as="xs:string" slot="3" eval="16">
         <ufCall name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="0" eval="16">
          <choose line="3469">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="Q{}this-output" slot="2"/>
            <str val="@value"/>
           </ifCall>
           <treat line="3470" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|xpath">
            <check card="1" diag="3|0|XTTE0570|xpath">
             <cvUntyped to="xs:string" diag="3|0|XTTE0570|xpath">
              <data>
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <varRef name="Q{}this-output" slot="2"/>
                <str val="@value"/>
               </ifCall>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <ifCall line="3472" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="Q{}this-output" slot="2"/>
            <str val="@ref"/>
           </ifCall>
           <treat line="3473" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|xpath">
            <check card="1" diag="3|0|XTTE0570|xpath">
             <cvUntyped to="xs:string" diag="3|0|XTTE0570|xpath">
              <data>
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <varRef name="Q{}this-output" slot="2"/>
                <str val="@ref"/>
               </ifCall>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <true/>
           <str val=""/>
          </choose>
         </ufCall>
         <sequence line="3483">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="[refreshOutputs-JS] $xpath-mod = '"/>
            </valueOf>
            <varRef name="Q{}xpath-mod" slot="3"/>
            <valueOf flags="S">
             <str val="'"/>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <let line="3499" var="Q{}contexti" as="element()?" slot="4" eval="7">
           <ufCall line="3500" name="Q{http://www.w3.org/2002/xforms}instance" tailCall="false" bSlot="1" eval="16">
            <check line="3487" card="1" diag="3|0|XTTE0570|this-instance-id">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <choose>
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                <varRef name="Q{}this-output" slot="2"/>
                <str val="@ref"/>
               </ifCall>
               <ufCall line="3489" name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="2" eval="16">
                <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||xforms:getInstanceMap">
                 <check card="1" diag="0|0||xforms:getInstanceMap">
                  <cvUntyped to="xs:string">
                   <data>
                    <ifCall line="3488" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                     <varRef name="Q{}this-output" slot="2"/>
                     <str val="@ref"/>
                    </ifCall>
                   </data>
                  </cvUntyped>
                 </check>
                </treat>
               </ufCall>
               <true/>
               <ufCall line="3492" name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="3" eval="0">
                <str val="saxon-forms-default"/>
               </ufCall>
              </choose>
              <str val="instance-id"/>
             </ifCall>
            </check>
           </ufCall>
           <let line="3507" var="Q{}namespace-context-item" as="element()" slot="5" eval="16">
            <choose>
             <fn name="exists">
              <varRef name="Q{}contexti" slot="4"/>
             </fn>
             <check card="1" diag="3|0|XTTE0570|namespace-context-item">
              <varRef name="Q{}contexti" slot="4"/>
             </check>
             <true/>
             <treat as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|namespace-context-item">
              <check card="1" diag="3|0|XTTE0570|namespace-context-item">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                <check card="1" diag="0|0||ixsl:call">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                </check>
                <str val="getXForm"/>
                <array size="0"/>
               </ifCall>
              </check>
             </treat>
            </choose>
            <let line="3509" var="Q{}value" as="xs:string?" slot="6" eval="7">
             <treat line="3510" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|value">
              <check card="?" diag="3|0|XTTE0570|value">
               <cvUntyped to="xs:string" diag="3|0|XTTE0570|value">
                <data>
                 <evaluate dxns="">
                  <varRef role="xpath" name="Q{}xpath-mod" slot="3"/>
                  <varRef role="cxt" name="Q{}contexti" slot="4"/>
                  <varRef role="nsCxt" name="Q{}namespace-context-item" slot="5"/>
                  <str role="sa" val="no"/>
                  <map role="options" size="0"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <let line="3513" var="Q{}associated-form-control" as="element()?" slot="7" eval="7">
              <check card="?" diag="3|0|XTTE0570|associated-form-control">
               <filter flags="b">
                <slash simple="1">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                 <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </slash>
                <vc op="eq" onEmpty="0" comp="CCC">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}id" chk="0"/>
                 </cast>
                 <varRef name="Q{}this-key" slot="1"/>
                </vc>
               </filter>
              </check>
              <choose line="3516">
               <fn name="exists">
                <varRef name="Q{}associated-form-control" slot="7"/>
               </fn>
               <resultDoc line="3517" global="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
                <fn role="href" name="concat">
                 <str val="#"/>
                 <varRef name="Q{}this-key" slot="1"/>
                </fn>
                <valueOf role="content" line="3518">
                 <varRef name="Q{}value" slot="6"/>
                </valueOf>
               </resultDoc>
              </choose>
             </let>
            </let>
           </let>
          </let>
         </sequence>
        </let>
       </sequence>
      </let>
     </let>
    </forEach>
   </let>
  </template>
 </co>
 <co id="30" binds="45">
  <template name="Q{}xforms-focus" flags="os" line="4174" module="saxon-xforms.xsl" slots="5">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4175">
    <param name="Q{}control" slot="0" flags="i" as="xs:string">
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|control">
      <check card="1" diag="8|0|XTTE0590|control">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|control">
        <data>
         <supplied slot="0"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="4176" var="Q{}xforms-control" as="element()" slot="1" eval="16">
     <check card="1" diag="3|0|XTTE0570|xforms-control">
      <filter flags="b">
       <gVarRef name="Q{http://saxon.sf.net/generated-variable}gg160601050" bSlot="0"/>
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="1">
         <attVal name="Q{}id" chk="0"/>
        </cast>
        <varRef name="Q{}control" slot="0"/>
       </vc>
      </filter>
     </check>
     <choose line="4181">
      <fn name="exists">
       <slash simple="1">
        <varRef name="Q{}xforms-control" slot="1"/>
        <axis name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
       </slash>
      </fn>
      <let line="4185" var="Q{http://saxon.sf.net/generated-variable}v0" as="item()" slot="2" eval="13">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <let line="4182" var="Q{}context-indexes" as="xs:double*" slot="3" eval="8">
        <convert line="4183" from="xs:anyAtomicType" to="xs:double" flags="p" diag="3|0|XTTE0570|context-indexes">
         <cvUntyped to="xs:double" diag="3|0|XTTE0570|context-indexes">
          <data>
           <forEach>
            <sort>
             <slash role="select">
              <varRef name="Q{}xforms-control" slot="1"/>
              <fn name="reverse">
               <axis name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
              </fn>
             </slash>
             <sortKey line="4184" comp="DESC|NC11">
              <fn role="select" name="position"/>
              <str role="order" val="descending"/>
              <str role="dataType" val="number"/>
              <str role="lang" val=""/>
              <str role="caseOrder" val="#default"/>
              <str role="stable" val="yes"/>
              <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             </sortKey>
            </sort>
            <ifCall line="4185" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="2"/>
             <str val="getRepeatIndex"/>
             <arrayBlock>
              <cast as="xs:string" emptiable="1">
               <attVal name="Q{}id" chk="0"/>
              </cast>
             </arrayBlock>
            </ifCall>
           </forEach>
          </data>
         </cvUntyped>
        </convert>
        <let line="4189" var="Q{}control-index" as="xs:string" slot="4" eval="8">
         <fn name="string-join">
          <varRef name="Q{}context-indexes" slot="3"/>
          <str val="."/>
         </fn>
         <sequence line="4190">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="[xforms-focus] Control '"/>
            </valueOf>
            <varRef name="Q{}control" slot="0"/>
            <valueOf>
             <str val="' has index '"/>
            </valueOf>
            <varRef name="Q{}control-index" slot="4"/>
            <valueOf flags="S">
             <str val="'"/>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <ifCall line="4191" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setFocus"/>
           <arrayBlock>
            <fn name="concat">
             <varRef name="Q{}control" slot="0"/>
             <str val="-"/>
             <varRef name="Q{}control-index" slot="4"/>
            </fn>
           </arrayBlock>
          </ifCall>
         </sequence>
        </let>
       </let>
      </let>
      <true/>
      <ifCall line="4194" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="setFocus"/>
       <arrayBlock>
        <varRef name="Q{}control" slot="0"/>
       </arrayBlock>
      </ifCall>
     </choose>
    </let>
   </sequence>
  </template>
 </co>
 <co id="20" binds="2">
  <function name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" line="630" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="13">
   <arg name="Q{}refElement" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="633" var="Q{}pendingUpdatesi" as="map(xs:string, xs:string)?" slot="1" eval="7">
    <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdatesi">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getPendingUpdates"/>
      <array size="0"/>
     </ifCall>
    </treat>
    <let line="636" var="Q{}updatesi" as="map(xs:string, xs:string)?" slot="2" eval="7">
     <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|updatesi">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getUpdates"/>
       <array size="0"/>
      </ifCall>
     </treat>
     <let line="639" var="Q{}relevantMap" as="map(xs:string, xs:string)" slot="3" eval="16">
      <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|relevantMap">
       <check card="1" diag="3|0|XTTE0570|relevantMap">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getRelevantMap"/>
         <array size="0"/>
        </ifCall>
       </check>
      </treat>
      <let line="640" var="Q{}mapKeys" as="xs:anyAtomicType*" slot="4" eval="4">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
        <varRef name="Q{}relevantMap" slot="3"/>
       </ifCall>
       <sequence line="670">
        <forEach>
         <sequence line="643">
          <forEach>
           <varRef name="Q{}mapKeys" slot="4"/>
           <choose line="644">
            <fn name="matches">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="Q{}relevantMap" slot="3"/>
              <dot type="xs:anyAtomicType"/>
             </ifCall>
             <varRef name="Q{}refElement" slot="0"/>
             <str val=""/>
            </fn>
            <dot line="645" type="xs:anyAtomicType"/>
           </choose>
          </forEach>
          <forEach line="634">
           <choose>
            <fn name="exists">
             <varRef name="Q{}pendingUpdatesi" slot="1"/>
            </fn>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
             <check card="1" diag="0|0||map:keys">
              <varRef name="Q{}pendingUpdatesi" slot="1"/>
             </check>
            </ifCall>
           </choose>
           <let line="651" var="Q{}keyi" as="xs:string?" slot="5" eval="7">
            <lastOf>
             <fn name="tokenize">
              <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
               <cvUntyped to="xs:string">
                <dot type="xs:anyAtomicType"/>
               </cvUntyped>
              </treat>
              <str val="/"/>
              <str val=""/>
             </fn>
            </lastOf>
            <let line="653" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:string" slot="6" eval="13">
             <check card="1" diag="0|1||fn:matches">
              <varRef name="Q{}keyi" slot="5"/>
             </check>
             <forEach line="652">
              <varRef name="Q{}mapKeys" slot="4"/>
              <choose line="653">
               <fn name="matches">
                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                 <varRef name="Q{}relevantMap" slot="3"/>
                 <dot type="xs:anyAtomicType"/>
                </ifCall>
                <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="6"/>
                <str val=""/>
               </fn>
               <dot line="654" type="xs:anyAtomicType"/>
              </choose>
             </forEach>
            </let>
           </let>
          </forEach>
          <forEach line="637">
           <choose>
            <fn name="exists">
             <varRef name="Q{}updatesi" slot="2"/>
            </fn>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
             <check card="1" diag="0|0||map:keys">
              <varRef name="Q{}updatesi" slot="2"/>
             </check>
            </ifCall>
           </choose>
           <let line="660" var="Q{}keyi" as="xs:string?" slot="7" eval="7">
            <lastOf>
             <fn name="tokenize">
              <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
               <cvUntyped to="xs:string">
                <dot type="xs:anyAtomicType"/>
               </cvUntyped>
              </treat>
              <str val="/"/>
              <str val=""/>
             </fn>
            </lastOf>
            <let line="662" var="Q{http://saxon.sf.net/generated-variable}v1" as="xs:string" slot="8" eval="13">
             <check card="1" diag="0|1||fn:matches">
              <varRef name="Q{}keyi" slot="7"/>
             </check>
             <forEach line="661">
              <varRef name="Q{}mapKeys" slot="4"/>
              <choose line="662">
               <fn name="matches">
                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                 <varRef name="Q{}relevantMap" slot="3"/>
                 <dot type="xs:anyAtomicType"/>
                </ifCall>
                <varRef name="Q{http://saxon.sf.net/generated-variable}v1" slot="8"/>
                <str val=""/>
               </fn>
               <dot line="663" type="xs:anyAtomicType"/>
              </choose>
             </forEach>
            </let>
           </let>
          </forEach>
         </sequence>
         <let line="671" var="Q{}keyi" as="xs:anyAtomicType" slot="9" eval="16">
          <dot type="xs:anyAtomicType"/>
          <let line="672" var="Q{}context" as="element()*" slot="10" eval="8">
           <filter flags="b">
            <slash simple="1">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </slash>
            <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
             <attVal name="Q{}data-ref" chk="0"/>
             <varRef name="Q{}keyi" slot="9"/>
            </gc>
           </filter>
           <let line="673" var="Q{}updatedInstanceXML4" as="element()?" slot="11" eval="7">
            <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="0" eval="16">
             <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||xforms:getInstance-JS">
              <cvUntyped to="xs:string">
               <varRef name="Q{}keyi" slot="9"/>
              </cvUntyped>
             </treat>
            </ufCall>
            <let line="675" var="Q{}relevantCheck" as="xs:boolean" slot="12" eval="16">
             <treat line="676" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantCheck">
              <check card="1" diag="3|0|XTTE0570|relevantCheck">
               <cvUntyped to="xs:boolean" diag="3|0|XTTE0570|relevantCheck">
                <data>
                 <evaluate dxns="">
                  <fn role="xpath" name="concat">
                   <dot type="xs:anyAtomicType"/>
                   <str val="/"/>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <varRef name="Q{}relevantMap" slot="3"/>
                    <dot type="xs:anyAtomicType"/>
                   </ifCall>
                  </fn>
                  <varRef role="cxt" name="Q{}updatedInstanceXML4" slot="11"/>
                  <check role="nsCxt" card="1" diag="4|0|XTTE3170|xsl:evaluate/namespace-context">
                   <varRef name="Q{}updatedInstanceXML4" slot="11"/>
                  </check>
                  <str role="sa" val="no"/>
                  <map role="options" size="0"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <choose line="679">
              <varRef name="Q{}relevantCheck" slot="12"/>
              <ifCall line="682" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
               <str val="style.display"/>
               <str val="inline"/>
               <check card="1" diag="0|2||ixsl:set-property">
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <varRef name="Q{}context" slot="10"/>
                  </tail>
                 </fn>
                 <docOrder intra="1">
                  <slash simple="2">
                   <varRef name="Q{}context" slot="10"/>
                   <axis name="parent" nodeTest="(element()|document-node())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
               </check>
              </ifCall>
              <true/>
              <ifCall line="685" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
               <str val="style.display"/>
               <str val="none"/>
               <check card="1" diag="0|2||ixsl:set-property">
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <varRef name="Q{}context" slot="10"/>
                  </tail>
                 </fn>
                 <docOrder intra="1">
                  <slash simple="2">
                   <varRef name="Q{}context" slot="10"/>
                   <axis name="parent" nodeTest="(element()|document-node())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
               </check>
              </ifCall>
             </choose>
            </let>
           </let>
          </let>
         </let>
        </forEach>
        <ifCall line="690" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="clearPendingUpdates"/>
         <array size="0"/>
        </ifCall>
        <ifCall line="691" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="clearUpdates"/>
         <array size="0"/>
        </ifCall>
       </sequence>
      </let>
     </let>
    </let>
   </let>
  </function>
 </co>
 <co id="46" binds="">
  <globalParam name="Q{}xform-html-id" type="xs:string" line="67" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <str val="xForm"/>
  </globalParam>
 </co>
 <co id="47" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}random" line="108" module="xforms-function-library.xsl" eval="16" flags="pU" as="xs:double" slots="0">
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="109" card="1" diag="3|0|XTTE0570|randomNumber">
    <convert from="xs:anyAtomicType" to="xs:double" flags="p" diag="3|0|XTTE0570|randomNumber">
     <cvUntyped to="xs:double" diag="3|0|XTTE0570|randomNumber">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="Math.random"/>
        <array size="0"/>
       </ifCall>
      </data>
     </cvUntyped>
    </convert>
   </check>
  </function>
 </co>
 <co id="7" binds="2 48 2 33 40 49">
  <template name="Q{}xforms-recalculate" flags="os" line="4086" module="saxon-xforms.xsl" slots="3">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4087">
    <message>
     <valueOf role="select">
      <str val="[xforms-recalculate] START"/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <let line="4088" var="Q{}instance-keys" as="item()?" slot="0" eval="8">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getInstanceKeys"/>
      <array size="0"/>
     </ifCall>
     <forEach line="4089">
      <varRef name="Q{}instance-keys" slot="0"/>
      <let line="4090" var="Q{}refz" as="xs:string" slot="1" eval="8">
       <fn name="concat">
        <str val="instance('"/>
        <atomSing card="?" diag="0|1||fn:concat">
         <dot/>
        </atomSing>
        <str val="')/"/>
       </fn>
       <sequence line="4091">
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
         <atomSing diag="0|0||map:entry">
          <dot/>
         </atomSing>
         <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="0" eval="6">
          <varRef name="Q{}refz" slot="1"/>
         </ufCall>
        </ifCall>
        <let line="4094" var="Q{}updatedInstanceXML" as="element()" slot="2" eval="16">
         <treat line="4095" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|updatedInstanceXML">
          <check card="1" diag="3|0|XTTE0570|updatedInstanceXML">
           <applyT mode="Q{}binding-calculation-initial" bSlot="1">
            <check role="select" line="4093" card="1" diag="3|0|XTTE0570|instanceXML">
             <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="2" eval="6">
              <varRef name="Q{}refz" slot="1"/>
             </ufCall>
            </check>
            <withParam name="Q{}instance-id" as="item()">
             <dot line="4096"/>
            </withParam>
           </applyT>
          </check>
         </treat>
         <sequence line="4102">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setInstance"/>
           <arrayBlock>
            <dot/>
            <varRef name="Q{}updatedInstanceXML" slot="2"/>
           </arrayBlock>
          </ifCall>
          <callT line="4103" name="Q{}refreshOutputs-JS" bSlot="3"/>
          <callT line="4104" name="Q{}refreshRepeats-JS" bSlot="4"/>
          <callT line="4105" name="Q{}refreshElementsUsingIndexFunction-JS" bSlot="5" flags="t"/>
         </sequence>
        </let>
       </sequence>
      </let>
     </forEach>
    </let>
   </sequence>
  </template>
 </co>
 <co id="43" binds="50 50 50">
  <globalVariable name="Q{}xforms-doc" type="document-node()?" line="71" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="function test(item) {return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);};if (test(val)) {return val;} else {throw SaxonJS.XError('Conversion failed', 'XTTE0590');}" jsCardCheck="function c(n) {return n&lt;=1;};">
   <choose ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="71">
    <and op="and">
     <fn name="exists">
      <gVarRef name="Q{}xforms-file" bSlot="0"/>
     </fn>
     <fn name="doc-available">
      <gVarRef name="Q{}xforms-file" bSlot="1"/>
     </fn>
    </and>
    <fn name="doc">
     <gVarRef name="Q{}xforms-file" bSlot="2"/>
    </fn>
   </choose>
  </globalVariable>
 </co>
 <co id="50" binds="">
  <globalParam name="Q{}xforms-file" type="xs:string?" line="69" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n&lt;=1;};">
   <empty/>
  </globalParam>
 </co>
 <co id="51" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}addNamespaceDeclarations" line="2998" module="saxon-xforms.xsl" eval="16" flags="pU" as="element()" slots="1">
   <arg name="Q{}this" as="element()"/>
   <compElem role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3000">
    <fn role="name" name="name">
     <varRef name="Q{}this" slot="0"/>
    </fn>
    <sequence role="content" line="3001">
     <namespace flags="l">
      <str role="name" val="xforms"/>
      <str role="select" val="http://www.w3.org/2002/xforms"/>
     </namespace>
     <forEach line="3002">
      <filter flags="b">
       <filter flags="b">
        <slash simple="1">
         <varRef name="Q{}this" slot="0"/>
         <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <fn name="boolean">
         <fn name="namespace-uri">
          <dot type="element()"/>
         </fn>
        </fn>
       </filter>
       <fn name="not">
        <gc op="=" card="N:1" comp="CCC">
         <sequence>
          <slash>
           <fn name="reverse">
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </fn>
           <fn name="namespace-uri">
            <dot type="element()"/>
           </fn>
          </slash>
          <slash>
           <fn name="reverse">
            <axis name="preceding" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </fn>
           <fn name="namespace-uri">
            <dot type="element()"/>
           </fn>
          </slash>
         </sequence>
         <fn name="namespace-uri">
          <dot type="element()"/>
         </fn>
        </gc>
       </fn>
      </filter>
      <namespace line="3005" flags="l">
       <fn role="name" line="3004" name="substring-before">
        <fn name="name">
         <dot type="element()"/>
        </fn>
        <str val=":"/>
       </fn>
       <convert role="select" from="xs:anyURI" to="xs:string">
        <fn line="3003" name="namespace-uri">
         <dot type="element()"/>
        </fn>
       </convert>
      </namespace>
     </forEach>
     <copyOf line="3007" flags="vc">
      <sequence>
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </slash>
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </slash>
      </sequence>
     </copyOf>
    </sequence>
   </compElem>
  </function>
 </co>
 <co id="11" binds="2 41 16 52 3 53 19">
  <template name="Q{}xforms-submit" flags="os" line="4207" module="saxon-xforms.xsl" slots="16">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4208">
    <param name="Q{}submission" slot="0" flags="i" as="xs:string">
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|submission">
      <check card="1" diag="8|0|XTTE0590|submission">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|submission">
        <data>
         <supplied slot="0"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="4210" var="Q{}submission-map" as="map(*)" slot="1" eval="16">
     <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|submission-map">
      <check card="1" diag="3|0|XTTE0570|submission-map">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getSubmission"/>
        <arrayBlock>
         <varRef name="Q{}submission" slot="0"/>
        </arrayBlock>
       </ifCall>
      </check>
     </treat>
     <let line="4211" var="Q{}actions" as="map(*)?" slot="2" eval="7">
      <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getAction"/>
        <arrayBlock>
         <varRef name="Q{}submission" slot="0"/>
        </arrayBlock>
       </ifCall>
      </treat>
      <sequence line="4213">
       <message>
        <sequence role="select">
         <valueOf>
          <str val="[xforms-submit] Submitting: "/>
         </valueOf>
         <valueOf>
          <fn name="serialize">
           <varRef name="Q{}submission-map" slot="1"/>
          </fn>
         </valueOf>
        </sequence>
        <str role="terminate" val="no"/>
        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
       </message>
       <let line="4215" var="Q{}refi" as="xs:string?" slot="3" eval="7">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
         <check card="?" diag="3|0|XTTE0570|refi">
          <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
           <data>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="Q{}submission-map" slot="1"/>
             <str val="@ref"/>
            </ifCall>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <let line="4217" var="Q{}instance-id" as="xs:string" slot="4" eval="16">
         <choose line="4219">
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}submission-map" slot="1"/>
           <str val="@instance"/>
          </ifCall>
          <treat line="4220" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|instance-id">
           <check card="1" diag="3|0|XTTE0570|instance-id">
            <cvUntyped to="xs:string" diag="3|0|XTTE0570|instance-id">
             <data>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <varRef name="Q{}submission-map" slot="1"/>
               <str val="@instance"/>
              </ifCall>
             </data>
            </cvUntyped>
           </check>
          </treat>
          <true/>
          <str val="saxon-forms-default"/>
         </choose>
         <let line="4231" var="Q{}instanceXML" as="element()" slot="5" eval="16">
          <choose>
           <varRef name="Q{}refi" slot="3"/>
           <check card="1" diag="3|0|XTTE0570|instanceXML">
            <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="0" eval="16">
             <check card="1" diag="0|0||xforms:getInstance-JS">
              <varRef name="Q{}refi" slot="3"/>
             </check>
            </ufCall>
           </check>
           <true/>
           <check card="1" diag="3|0|XTTE0570|instanceXML">
            <ufCall name="Q{http://www.w3.org/2002/xforms}instance" tailCall="false" bSlot="1" eval="6">
             <varRef name="Q{}instance-id" slot="4"/>
            </ufCall>
           </check>
          </choose>
          <let line="4233" var="Q{}updatedInstanceXML" as="element()" slot="6" eval="16">
           <treat line="4234" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|updatedInstanceXML">
            <check card="1" diag="3|0|XTTE0570|updatedInstanceXML">
             <applyT mode="Q{}form-check-initial" bSlot="2">
              <varRef role="select" name="Q{}instanceXML" slot="5"/>
              <withParam name="Q{}instance-id" as="xs:string">
               <varRef line="4235" name="Q{}instance-id" slot="4"/>
              </withParam>
             </applyT>
            </check>
           </treat>
           <let line="4239" var="Q{}required-fieldsi" as="element()*" slot="7" eval="8">
            <filter flags="b">
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
             </fn>
            </filter>
            <let line="4241" var="Q{}required-fields-check" as="element()*" slot="8" eval="3">
             <ufCall name="Q{http://www.w3.org/2002/xforms}check-required-fields" tailCall="false" bSlot="3" eval="6">
              <varRef name="Q{}updatedInstanceXML" slot="6"/>
             </ufCall>
             <choose line="4247">
              <fn name="empty">
               <varRef name="Q{}required-fields-check" slot="8"/>
              </fn>
              <let line="4248" var="Q{}requestBodyXML" as="element()" slot="9" eval="16">
               <choose line="4250">
                <varRef name="Q{}refi" slot="3"/>
                <treat line="4251" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|requestBodyXML">
                 <check card="1" diag="3|0|XTTE0570|requestBodyXML">
                  <evaluate dxns="">
                   <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="4" eval="16">
                    <check card="1" diag="0|0||xforms:impose">
                     <varRef name="Q{}refi" slot="3"/>
                    </check>
                   </ufCall>
                   <varRef role="cxt" name="Q{}instanceXML" slot="5"/>
                   <varRef role="nsCxt" name="Q{}instanceXML" slot="5"/>
                   <str role="sa" val="no"/>
                   <map role="options" size="0"/>
                   <map role="wp" size="0"/>
                  </evaluate>
                 </check>
                </treat>
                <true/>
                <varRef line="4254" name="Q{}instanceXML" slot="5"/>
               </choose>
               <let line="4268" var="Q{}method" as="xs:string" slot="10" eval="16">
                <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|method">
                 <check card="1" diag="3|0|XTTE0570|method">
                  <cvUntyped to="xs:string" diag="3|0|XTTE0570|method">
                   <data>
                    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                     <varRef name="Q{}submission-map" slot="1"/>
                     <str val="@method"/>
                    </ifCall>
                   </data>
                  </cvUntyped>
                 </check>
                </treat>
                <let line="4270" var="Q{}serialization" as="xs:string?" slot="11" eval="7">
                 <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|serialization">
                  <check card="?" diag="3|0|XTTE0570|serialization">
                   <cvUntyped to="xs:string" diag="3|0|XTTE0570|serialization">
                    <data>
                     <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                      <varRef name="Q{}submission-map" slot="1"/>
                      <str val="@serialization"/>
                     </ifCall>
                    </data>
                   </cvUntyped>
                  </check>
                 </treat>
                 <let line="4272" var="Q{}query-parameters" as="xs:string?" slot="12" eval="7">
                  <choose line="4273">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="Q{}serialization" slot="11"/>
                    </fn>
                    <vc op="eq" onEmpty="0" comp="CCC">
                     <varRef name="Q{}serialization" slot="11"/>
                     <str val="application/x-www-form-urlencoded"/>
                    </vc>
                   </and>
                   <fn line="4284" name="string-join">
                    <forEach line="4275">
                     <slash simple="1">
                      <varRef name="Q{}requestBodyXML" slot="9"/>
                      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                     </slash>
                     <let line="4276" var="Q{}query-part" as="xs:string" slot="13" eval="8">
                      <fn name="concat">
                       <fn name="name">
                        <dot type="element()"/>
                       </fn>
                       <str val="="/>
                       <fn name="string">
                        <dot type="element()"/>
                       </fn>
                      </fn>
                      <sequence line="4277">
                       <varRef name="Q{}query-part" slot="13"/>
                       <message line="4278">
                        <sequence role="select">
                         <valueOf>
                          <str val="[xforms-submit] Query part: "/>
                         </valueOf>
                         <valueOf>
                          <varRef name="Q{}query-part" slot="13"/>
                         </valueOf>
                        </sequence>
                        <str role="terminate" val="no"/>
                        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                       </message>
                      </sequence>
                     </let>
                    </forEach>
                    <str val="&amp;"/>
                   </fn>
                  </choose>
                  <let line="4288" var="Q{}href-base" as="xs:string" slot="14" eval="16">
                   <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|href-base">
                    <check card="1" diag="3|0|XTTE0570|href-base">
                     <cvUntyped to="xs:string" diag="3|0|XTTE0570|href-base">
                      <data>
                       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                        <varRef name="Q{}submission-map" slot="1"/>
                        <str val="@resource"/>
                       </ifCall>
                      </data>
                     </cvUntyped>
                    </check>
                   </treat>
                   <sequence line="4319">
                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}schedule-action" type="item()*">
                     <int val="0"/>
                     <empty/>
                     <callT name="Q{}HTTPsubmit" bSlot="5">
                      <withParam name="Q{}instance-id" flags="c" as="xs:string">
                       <varRef line="4320" name="Q{}instance-id" slot="4"/>
                      </withParam>
                      <withParam name="Q{}targetref" flags="c" as="xs:string?">
                       <treat line="4321" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|targetref">
                        <check card="?" diag="8|0|XTTE0590|targetref">
                         <cvUntyped to="xs:string" diag="8|0|XTTE0590|targetref">
                          <data>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <varRef name="Q{}submission-map" slot="1"/>
                            <str val="@targetref"/>
                           </ifCall>
                          </data>
                         </cvUntyped>
                        </check>
                       </treat>
                      </withParam>
                      <withParam name="Q{}replace" flags="c" as="xs:string?">
                       <treat line="4322" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|replace">
                        <check card="?" diag="8|0|XTTE0590|replace">
                         <cvUntyped to="xs:string" diag="8|0|XTTE0590|replace">
                          <data>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <varRef name="Q{}submission-map" slot="1"/>
                            <str val="@replace"/>
                           </ifCall>
                          </data>
                         </cvUntyped>
                        </check>
                       </treat>
                      </withParam>
                     </callT>
                     <ifCall line="4306" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
                      <sequence>
                       <choose>
                        <vc op="ne" onEmpty="1" comp="CCC">
                         <fn name="upper-case">
                          <varRef name="Q{}method" slot="10"/>
                         </fn>
                         <str val="GET"/>
                        </vc>
                        <ifCall line="4307" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                         <str val="body"/>
                         <doc line="4263" validation="preserve">
                          <doc flags="l">
                           <varRef line="4264" name="Q{}requestBodyXML" slot="9"/>
                          </doc>
                         </doc>
                        </ifCall>
                       </choose>
                       <ifCall line="4309" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                        <str val="method"/>
                        <varRef name="Q{}method" slot="10"/>
                       </ifCall>
                       <ifCall line="4310" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                        <str val="href"/>
                        <choose line="4292">
                         <fn name="exists">
                          <varRef name="Q{}query-parameters" slot="12"/>
                         </fn>
                         <fn line="4293" name="concat">
                          <varRef name="Q{}href-base" slot="14"/>
                          <str val="?"/>
                          <varRef name="Q{}query-parameters" slot="12"/>
                         </fn>
                         <true/>
                         <varRef line="4296" name="Q{}href-base" slot="14"/>
                        </choose>
                       </ifCall>
                       <ifCall line="4311" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                        <str val="media-type"/>
                        <treat line="4301" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|mediatype">
                         <check card="1" diag="3|0|XTTE0570|mediatype">
                          <cvUntyped to="xs:string" diag="3|0|XTTE0570|mediatype">
                           <data>
                            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                             <varRef name="Q{}submission-map" slot="1"/>
                             <str val="@mediatype"/>
                            </ifCall>
                           </data>
                          </cvUntyped>
                         </check>
                        </treat>
                       </ifCall>
                      </sequence>
                      <map size="2">
                       <str val="duplicates"/>
                       <str val="reject"/>
                       <str val="duplicates-error-code"/>
                       <str val="XTDE3365"/>
                      </map>
                     </ifCall>
                    </ifCall>
                    <forEach line="4326">
                     <varRef name="Q{}actions" slot="2"/>
                     <let line="4327" var="Q{}action-map" as="map(*)" slot="15" eval="16">
                      <dot type="map(*)"/>
                      <choose line="4330">
                       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                        <varRef name="Q{}action-map" slot="15"/>
                        <str val="@event"/>
                       </ifCall>
                       <choose line="4331">
                        <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                         <data>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                           <varRef name="Q{}action-map" slot="15"/>
                           <str val="@event"/>
                          </ifCall>
                         </data>
                         <str val="xforms-submit-done"/>
                        </gc>
                        <callT line="4332" name="Q{}applyActions" bSlot="6" flags="t">
                         <withParam name="Q{}action-map" flags="t" as="item()">
                          <varRef line="4333" name="Q{}action-map" slot="15"/>
                         </withParam>
                         <withParam name="Q{}nodeset" flags="t" as="xs:string">
                          <check line="4334" card="1" diag="8|0|XTTE0590|nodeset">
                           <varRef name="Q{}refi" slot="3"/>
                          </check>
                         </withParam>
                         <withParam name="Q{}instanceXML" flags="t" as="element()">
                          <varRef line="4335" name="Q{}instanceXML" slot="5"/>
                         </withParam>
                        </callT>
                       </choose>
                      </choose>
                     </let>
                    </forEach>
                   </sequence>
                  </let>
                 </let>
                </let>
               </let>
              </let>
              <true/>
              <ifCall line="4348" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="alert"/>
               <arrayBlock>
                <fn name="serialize">
                 <doc line="4343" flags="t" validation="preserve">
                  <forEach>
                   <varRef name="Q{}required-fields-check" slot="8"/>
                   <valueOf line="4345" flags="l">
                    <fn name="concat">
                     <str val="Value error see: "/>
                     <fn name="serialize">
                      <slash line="4344" simple="1">
                       <dot type="element()"/>
                       <axis line="4345" name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                      </slash>
                     </fn>
                     <str val="&#xA;"/>
                    </fn>
                   </valueOf>
                  </forEach>
                 </doc>
                </fn>
               </arrayBlock>
              </ifCall>
             </choose>
            </let>
           </let>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="35" binds="2 54 50">
  <template name="Q{}xforms-rebuild" flags="os" line="4061" module="saxon-xforms.xsl" slots="2">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4062">
    <message>
     <valueOf role="select">
      <str val="[xforms-rebuild] START"/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <let line="4063" var="Q{}instanceDocs" as="map(xs:anyAtomicType, element()?)" slot="0" eval="8">
     <let line="4064" var="Q{}instance-keys" as="item()?" slot="1" eval="8">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getInstanceKeys"/>
       <array size="0"/>
      </ifCall>
      <ifCall line="4066" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
       <forEach>
        <varRef name="Q{}instance-keys" slot="1"/>
        <ifCall line="4068" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
         <atomSing diag="0|0||map:entry">
          <dot/>
         </atomSing>
         <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="0" eval="16">
          <fn line="4067" name="concat">
           <str val="instance('"/>
           <atomSing card="?" diag="0|1||fn:concat">
            <dot/>
           </atomSing>
           <str val="')/"/>
          </fn>
         </ufCall>
        </ifCall>
       </forEach>
       <map size="2">
        <str val="duplicates"/>
        <str val="reject"/>
        <str val="duplicates-error-code"/>
        <str val="XTDE3365"/>
       </map>
      </ifCall>
     </let>
     <callT line="4073" name="Q{}xformsjs-main" bSlot="1" flags="t">
      <withParam name="Q{}xforms-file" flags="c" as="xs:string?">
       <gVarRef line="4074" name="Q{}xforms-file" bSlot="2"/>
      </withParam>
      <withParam name="Q{}instance-docs" flags="c" as="map(*)">
       <varRef line="4075" name="Q{}instanceDocs" slot="0"/>
      </withParam>
     </callT>
    </let>
   </sequence>
  </template>
 </co>
 <co id="32" binds="">
  <mode name="Q{}set-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="37" rank="0" minImp="0" slots="1" flags="s" line="2932" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2933">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="2935" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:textarea"/>
      <str val="value"/>
     </ifCall>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="36" rank="0" minImp="0" slots="1" flags="s" line="2924" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2925">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="2927">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="Q{}value" slot="0"/>
        </data>
        <attVal name="Q{}value" chk="0"/>
       </gc>
      </filter>
      <ifCall line="2928" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
       <str val="selected"/>
       <true/>
       <dot type="element(Q{}option)"/>
      </ifCall>
     </forEach>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="35" rank="0" minImp="0" slots="1" flags="s" line="2903" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2904">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="2907">
      <dot type="*:input"/>
      <choose line="2909">
       <and op="and">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
        </fn>
        <vc op="eq" onEmpty="0" comp="CCC">
         <cast as="xs:string" emptiable="1">
          <attVal name="Q{}type" chk="0"/>
         </cast>
         <str val="checkbox"/>
        </vc>
       </and>
       <ifCall line="2910" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="checked"/>
        <choose>
         <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <data>
           <varRef name="Q{}value" slot="0"/>
          </data>
          <str val="true"/>
         </gc>
         <check card="?" diag="0|1||ixsl:set-property">
          <varRef name="Q{}value" slot="0"/>
         </check>
         <true/>
         <str val=""/>
        </choose>
        <dot type="*:input"/>
       </ifCall>
       <true/>
       <ifCall line="2913" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="value"/>
        <check card="?" diag="0|1||ixsl:set-property">
         <varRef name="Q{}value" slot="0"/>
        </check>
        <dot type="*:input"/>
       </ifCall>
      </choose>
     </forEach>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="49" binds="42">
  <template name="Q{}refreshElementsUsingIndexFunction-JS" flags="os" line="3594" module="saxon-xforms.xsl" slots="6">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3595">
    <message>
     <valueOf role="select">
      <str val="[refreshElementsUsingIndexFunction-JS] START"/>
     </valueOf>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
    <let line="3596" var="Q{}ElementsUsingIndexFunction-keys" as="item()?" slot="0" eval="8">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getElementsUsingIndexFunctionKeys"/>
      <array size="0"/>
     </ifCall>
     <let line="3598" var="Q{}instance-keys" as="item()?" slot="1" eval="8">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getInstanceKeys"/>
       <array size="0"/>
      </ifCall>
      <let line="3599" var="Q{}instances" as="map(xs:string, element())" slot="2" eval="16">
       <treat line="3601" as="map(xs:string, element())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|instances">
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
         <forEach>
          <varRef name="Q{}instance-keys" slot="1"/>
          <ifCall line="3602" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <atomSing diag="0|0||map:entry">
            <dot/>
           </atomSing>
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="getInstance"/>
            <arrayBlock>
             <dot/>
            </arrayBlock>
           </ifCall>
          </ifCall>
         </forEach>
         <map size="2">
          <str val="duplicates"/>
          <str val="reject"/>
          <str val="duplicates-error-code"/>
          <str val="XTDE3365"/>
         </map>
        </ifCall>
       </treat>
       <forEach line="3607">
        <varRef name="Q{}ElementsUsingIndexFunction-keys" slot="0"/>
        <let line="3608" var="Q{}this-key" as="xs:string" slot="3" eval="16">
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|this-key">
          <check card="1" diag="3|0|XTTE0570|this-key">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|this-key">
            <data>
             <dot/>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="3609" var="Q{}this-element" as="element()" slot="4" eval="16">
          <treat as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|this-element">
           <check card="1" diag="3|0|XTTE0570|this-element">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="getElementUsingIndexFunction"/>
             <arrayBlock>
              <varRef name="Q{}this-key" slot="3"/>
             </arrayBlock>
            </ifCall>
           </check>
          </treat>
          <let line="3610" var="Q{}this-element-refi" as="xs:string?" slot="5" eval="7">
           <choose line="3612">
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this-element" slot="4"/>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </fn>
            <cvUntyped to="xs:string" diag="3|0|XTTE0570|this-element-refi">
             <data>
              <slash simple="1">
               <varRef name="Q{}this-element" slot="4"/>
               <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
              </slash>
             </data>
            </cvUntyped>
            <fn line="3613" name="exists">
             <slash simple="1">
              <varRef name="Q{}this-element" slot="4"/>
              <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
             </slash>
            </fn>
            <cvUntyped line="3613" to="xs:string" diag="3|0|XTTE0570|this-element-refi">
             <data>
              <slash simple="1">
               <varRef name="Q{}this-element" slot="4"/>
               <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
              </slash>
             </data>
            </cvUntyped>
           </choose>
           <resultDoc line="3617" global="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
            <fn role="href" name="concat">
             <str val="#"/>
             <varRef name="Q{}this-key" slot="3"/>
            </fn>
            <applyT role="content" line="3618" bSlot="0">
             <slash role="select" simple="1">
              <varRef name="Q{}this-element" slot="4"/>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <withParam name="Q{}recalculate" as="xs:boolean">
              <true/>
             </withParam>
             <withParam name="Q{}instances" flags="t" as="map(xs:string, element())">
              <varRef line="3619" name="Q{}instances" slot="2"/>
             </withParam>
             <withParam name="Q{}nodeset" flags="t" as="xs:string?">
              <choose line="3620">
               <fn name="exists">
                <varRef name="Q{}this-element-refi" slot="5"/>
               </fn>
               <varRef name="Q{}this-element-refi" slot="5"/>
               <true/>
               <str val=""/>
              </choose>
             </withParam>
            </applyT>
           </resultDoc>
          </let>
         </let>
        </let>
       </forEach>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="55" binds="">
  <globalVariable name="Q{}xforms-actions" type="xs:string+" line="95" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n&gt;=1;};">
   <literal count="15">
    <str val="setvalue"/>
    <str val="insert"/>
    <str val="delete"/>
    <str val="setindex"/>
    <str val="toggle"/>
    <str val="setfocus"/>
    <str val="dispatch"/>
    <str val="rebuild"/>
    <str val="recalculate"/>
    <str val="revalidate"/>
    <str val="refresh"/>
    <str val="reset"/>
    <str val="load"/>
    <str val="send"/>
    <str val="message"/>
   </literal>
  </globalVariable>
 </co>
 <co id="56" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}foo" line="90" module="xforms-function-library.xsl" eval="16" flags="pU" as="xs:boolean" slots="1">
   <arg name="Q{}num" as="xs:integer"/>
   <compareToInt role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="93" op="lt" val="5">
    <varRef name="Q{}num" slot="0"/>
   </compareToInt>
  </function>
 </co>
 <co id="57" binds="57 3 57 57">
  <mode name="Q{}binding-calculation" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="29" rank="0" minImp="0" slots="9" flags="s" line="2741" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2742">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2743" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <param line="2744" name="Q{}calculationMap" slot="2" flags="ti" as="map(xs:string, xs:string)">
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|calculationMap">
       <check card="1" diag="8|0|XTTE0590|calculationMap">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="2750" var="Q{}updatedPath" as="xs:string" slot="3" eval="16">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="Q{}position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="Q{}curPath" slot="0"/>
        </atomSing>
        <fn name="name">
         <dot type="element()"/>
        </fn>
        <str val="["/>
        <atomSing card="?" diag="0|3||fn:concat">
         <varRef name="Q{}position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="Q{}curPath" slot="0"/>
        </atomSing>
        <fn name="name">
         <dot type="element()"/>
        </fn>
       </fn>
      </choose>
      <copy line="2755" flags="cin">
       <sequence role="content">
        <applyT mode="Q{}binding-calculation" bSlot="0">
         <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         <withParam name="Q{}curPath" as="xs:string">
          <fn line="2756" name="concat">
           <varRef name="Q{}updatedPath" slot="3"/>
           <str val="/"/>
          </fn>
         </withParam>
        </applyT>
        <choose line="2765">
         <fn name="exists">
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="Q{}calculationMap" slot="2"/>
           <varRef name="Q{}updatedPath" slot="3"/>
          </ifCall>
         </fn>
         <evaluate line="2769" dxns="">
          <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="1" eval="16">
           <check line="2767" card="1" diag="3|0|XTTE0570|calculationXPath">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="Q{}calculationMap" slot="2"/>
             <varRef name="Q{}updatedPath" slot="3"/>
            </ifCall>
           </check>
          </ufCall>
          <dot role="cxt" type="element()"/>
          <dot role="nsCxt" type="element()"/>
          <str role="sa" val="no"/>
          <map role="options" size="0"/>
          <map role="wp" size="0"/>
         </evaluate>
         <true/>
         <valueOf line="2779" flags="l">
          <fn name="normalize-space">
           <fn name="string-join">
            <data>
             <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
            </data>
            <str val=""/>
           </fn>
          </fn>
         </valueOf>
        </choose>
        <forEachGroup line="2784" algorithm="by">
         <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         <fn role="key" name="local-name">
          <dot type="element()"/>
         </fn>
         <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
         <let role="content" line="2786" var="Q{}updatedChildPath" as="xs:string" slot="4" eval="8">
          <fn name="concat">
           <varRef name="Q{}updatedPath" slot="3"/>
           <str val="/"/>
           <check card="?" diag="0|2||fn:concat">
            <currentGroupingKey/>
           </check>
          </fn>
          <let line="2791" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:string" slot="5" eval="13">
           <fn name="concat">
            <varRef name="Q{}updatedChildPath" slot="4"/>
            <str val="["/>
           </fn>
           <let var="Q{}dataRefWithFilter" as="element()*" slot="6" eval="8">
            <filter flags="b">
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <fn name="starts-with">
              <cvUntyped to="xs:string">
               <attVal name="Q{}data-ref" chk="0"/>
              </cvUntyped>
              <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="5"/>
             </fn>
            </filter>
            <choose line="2794">
             <or op="or">
              <fn name="exists">
               <tail start="2">
                <currentGroup/>
               </tail>
              </fn>
              <fn name="exists">
               <varRef name="Q{}dataRefWithFilter" slot="6"/>
              </fn>
             </or>
             <let line="2797" var="Q{http://saxon.sf.net/generated-variable}v1" as="xs:string" slot="7" eval="13">
              <fn name="concat">
               <varRef name="Q{}updatedPath" slot="3"/>
               <str val="/"/>
              </fn>
              <forEach line="2795">
               <currentGroup/>
               <applyT line="2796" mode="Q{}binding-calculation" bSlot="2">
                <dot role="select"/>
                <withParam name="Q{}curPath" as="xs:string">
                 <varRef line="2797" name="Q{http://saxon.sf.net/generated-variable}v1" slot="7"/>
                </withParam>
                <withParam name="Q{}position" as="xs:integer">
                 <fn line="2798" name="position"/>
                </withParam>
               </applyT>
              </forEach>
             </let>
             <true/>
             <let line="2806" var="Q{http://saxon.sf.net/generated-variable}v2" as="xs:string" slot="8" eval="13">
              <fn name="concat">
               <varRef name="Q{}updatedPath" slot="3"/>
               <str val="/"/>
              </fn>
              <forEach line="2804">
               <currentGroup/>
               <applyT line="2805" mode="Q{}binding-calculation" bSlot="3">
                <dot role="select"/>
                <withParam name="Q{}curPath" as="xs:string">
                 <varRef line="2806" name="Q{http://saxon.sf.net/generated-variable}v2" slot="8"/>
                </withParam>
               </applyT>
              </forEach>
             </let>
            </choose>
           </let>
          </let>
         </let>
        </forEachGroup>
       </sequence>
      </copy>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="58" binds="">
  <globalParam name="Q{}xforms-cache-id" type="item()*" line="64" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-cache"/>
  </globalParam>
 </co>
 <co id="3" binds="59">
  <function name="Q{http://www.w3.org/2002/xforms}impose" line="22" module="xforms-function-library.xsl" eval="8" flags="pU" as="xs:string" slots="3">
   <arg name="Q{}input" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="36" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:anyAtomicType*" slot="1" eval="4">
    <data>
     <gVarRef name="Q{}xform-functions" bSlot="0"/>
    </data>
    <let line="53" var="Q{}parts2" as="xs:string*" slot="2" eval="8">
     <analyzeString line="58">
      <fn role="select" line="33" name="string-join">
       <analyzeString>
        <varRef role="select" name="Q{}input" slot="0"/>
        <str role="regex" val="\i\c*\("/>
        <str role="flags" val=""/>
        <choose role="matching" line="36">
         <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="1"/>
          <fn name="substring-before">
           <dot type="xs:string"/>
           <str val="("/>
          </fn>
         </gc>
         <fn line="37" name="concat">
          <str val="xforms:"/>
          <dot type="xs:string"/>
         </fn>
         <true/>
         <dot line="41" type="xs:string"/>
        </choose>
        <dot role="nonMatching" line="46" type="xs:string"/>
       </analyzeString>
      </fn>
      <str role="regex" val="(^\s*|[^\i\c\]])/\i\c*(/)"/>
      <str role="flags" val=""/>
      <sequence role="matching" line="60">
       <fn name="regex-group">
        <int val="1"/>
       </fn>
       <fn line="61" name="regex-group">
        <int val="2"/>
       </fn>
      </sequence>
      <dot role="nonMatching" line="64" type="xs:string"/>
     </analyzeString>
     <fn line="69" name="string-join">
      <varRef name="Q{}parts2" slot="2"/>
     </fn>
    </let>
   </let>
  </function>
 </co>
 <co id="59" binds="">
  <globalVariable name="Q{}xform-functions" type="item()+" line="20" module="xforms-function-library.xsl" visibility="PRIVATE" jsAcceptor="return val;" jsCardCheck="function c(n) {return n&gt;=1;};">
   <sequence ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="20">
    <literal count="5">
     <str val="instance"/>
     <str val="index"/>
     <str val="avg"/>
     <str val="foo"/>
     <str val="current-date"/>
    </literal>
    <slash simple="1">
     <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
      <dot flags="a"/>
     </treat>
     <axis name="child" nodeTest="element(Q{}random)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='random';"/>
    </slash>
   </sequence>
  </globalVariable>
 </co>
 <co id="45" binds="43">
  <globalVariable name="Q{http://saxon.sf.net/generated-variable}gg160601050" type="element()*" line="4176" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="function test(item) {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;};if (test(val)) {return val;} else {throw SaxonJS.XError('Conversion failed', 'XTTE0590');}" jsCardCheck="function c() {return true;};">
   <slash ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4176" simple="1">
    <gVarRef name="Q{}xforms-doc" bSlot="0"/>
    <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
   </slash>
  </globalVariable>
 </co>
 <co id="52" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-required-fields" line="934" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="3">
   <arg name="Q{}instanceXML" as="element()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="937" var="Q{}required-fieldsi" as="element()*" slot="1" eval="8">
    <filter flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
     </fn>
    </filter>
    <forEach line="939">
     <varRef name="Q{}required-fieldsi" slot="1"/>
     <let line="941" var="Q{}resulti" as="document-node()" slot="2" eval="16">
      <doc line="944" validation="preserve">
       <evaluate dxns="">
        <fn role="xpath" name="concat">
         <str val="boolean(normalize-space("/>
         <attVal name="Q{}data-ref" chk="0"/>
         <str val="))"/>
         <str val="="/>
         <attVal name="Q{}data-ref" chk="0"/>
         <str val="/"/>
         <attVal name="Q{}data-required" chk="0"/>
        </fn>
        <varRef role="cxt" name="Q{}instanceXML" slot="0"/>
        <varRef role="nsCxt" name="Q{}instanceXML" slot="0"/>
        <str role="sa" val="no"/>
        <map role="options" size="0"/>
        <map role="wp" size="0"/>
       </evaluate>
      </doc>
      <choose line="950">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="Q{}resulti" slot="2"/>
         </data>
        </cast>
        <str val="false"/>
       </vc>
       <dot type="element()"/>
      </choose>
     </let>
    </forEach>
   </let>
  </function>
 </co>
 <co id="60" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}logToPage" line="3015" module="saxon-xforms.xsl" eval="7" flags="pU" as="empty-sequence()" slots="1">
   <arg name="Q{}message" as="xs:string"/>
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="-1" card="°" diag="5|0|XTTE0780|xforms:logToPage#1">
    <error message="Call to xsl:result-document while in temporary output state" code="XTDE1480" isTypeErr="1"/>
   </check>
  </function>
 </co>
 <co id="27" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}index" line="97" module="xforms-function-library.xsl" eval="16" flags="pU" as="xs:integer" slots="2">
   <arg name="Q{}repeatID" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="101" var="Q{}repeat-index" as="xs:double?" slot="1" eval="7">
    <check card="?" diag="3|0|XTTE0570|repeat-index">
     <convert from="xs:anyAtomicType" to="xs:double" flags="p" diag="3|0|XTTE0570|repeat-index">
      <cvUntyped to="xs:double" diag="3|0|XTTE0570|repeat-index">
       <data>
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getRepeatIndex"/>
         <arrayBlock>
          <varRef name="Q{}repeatID" slot="0"/>
         </arrayBlock>
        </ifCall>
       </data>
      </cvUntyped>
     </convert>
    </check>
    <choose line="104">
     <fn name="exists">
      <varRef name="Q{}repeat-index" slot="1"/>
     </fn>
     <check card="1" diag="5|0|XTTE0780|xforms:index#1">
      <cast as="xs:integer" emptiable="1">
       <varRef name="Q{}repeat-index" slot="1"/>
      </cast>
     </check>
     <true/>
     <int val="0"/>
    </choose>
   </let>
  </function>
 </co>
 <co id="9" binds="9">
  <mode name="Q{}delete-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="22" rank="0" minImp="0" slots="1" flags="s" line="1936" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1937">
     <param name="Q{}delete-node" slot="0" flags="ti" as="node()">
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|delete-node">
       <check card="1" diag="8|0|XTTE0590|delete-node">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <choose line="1940">
      <is op="is">
       <dot type="element()"/>
       <varRef name="Q{}delete-node" slot="0"/>
      </is>
      <empty/>
      <true/>
      <copy line="1954" flags="cin">
       <sequence role="content">
        <copyOf flags="vc">
         <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        </copyOf>
        <applyT line="1955" mode="Q{}delete-node" bSlot="0">
         <axis role="select" name="child" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
        </applyT>
       </sequence>
      </copy>
     </choose>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="15" binds="">
  <mode name="Q{}get-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="34" rank="0" minImp="0" slots="0" flags="s" line="2896" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2899" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <dot type="*:textarea"/>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="33" rank="0" minImp="0" slots="0" flags="s" line="2891" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2893" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <check card="?" diag="0|0||ixsl:get">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
          <dot type="element(Q{}option)"/>
          <str val="selected"/>
         </ifCall>
        </data>
        <true/>
       </gc>
      </filter>
     </check>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="32" rank="0" minImp="0" slots="0" flags="s" line="2877" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2881">
     <and op="and">
      <fn name="exists">
       <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
      </fn>
      <vc op="eq" onEmpty="0" comp="CCC">
       <cast as="xs:string" emptiable="1">
        <attVal name="Q{}type" chk="0"/>
       </cast>
       <str val="checkbox"/>
      </vc>
     </and>
     <ifCall line="2882" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="checked"/>
     </ifCall>
     <true/>
     <ifCall line="2885" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="value"/>
     </ifCall>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="42" binds="54 46 61 62 63 21 64 42 42 62 63 21 42 42 42 62 63 21 3 3 42 42 42 42 62 63 21 3 64 42 62 63 21 64 62 63 64 42 42">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="7" rank="0" minImp="0" slots="0" flags="s" line="1088" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1089" name="Q{}xformsjs-main" bSlot="0" flags="t">
     <withParam name="Q{}xforms-doc" flags="c" as="document-node()">
      <dot line="1090" type="document-node()"/>
     </withParam>
     <withParam name="Q{}xFormsId" flags="c" as="xs:string">
      <gVarRef line="1091" name="Q{}xform-html-id" bSlot="1"/>
     </withParam>
    </callT>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="25" part="1" rank="2" minImp="0" slots="1" flags="s" line="2111" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="Q{http://www.w3.org/2002/xforms}*" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.uri==='http://www.w3.org/2002/xforms'"/>
     <gc ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2111" op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
      <literal count="15">
       <str val="setvalue"/>
       <str val="insert"/>
       <str val="delete"/>
       <str val="setindex"/>
       <str val="toggle"/>
       <str val="setfocus"/>
       <str val="dispatch"/>
       <str val="rebuild"/>
       <str val="recalculate"/>
       <str val="revalidate"/>
       <str val="refresh"/>
       <str val="reset"/>
       <str val="load"/>
       <str val="send"/>
       <str val="message"/>
      </literal>
      <fn name="local-name">
       <dot type="Q{http://www.w3.org/2002/xforms}*"/>
      </fn>
     </gc>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2117" var="Q{}action-map" as="map(*)" slot="0" eval="16">
     <treat line="2118" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|action-map">
      <check card="1" diag="3|0|XTTE0570|action-map">
       <callT name="Q{}setAction" bSlot="2">
        <withParam name="Q{}this" flags="c" as="element()">
         <dot line="2119" type="element()"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <varRef line="2132" name="Q{}action-map" slot="0"/>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="13" part="1" rank="1" minImp="0" slots="12" flags="s" line="1537" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1538">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1539" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1543" var="Q{}myid" as="xs:string" slot="2" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <str val="-"/>
        <choose line="1541">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="1545">
       <choose>
        <and op="and">
         <let var="Q{}this" as="element()" slot="3" eval="16">
          <dot type="element()"/>
          <fn line="2990" name="exists">
           <sequence line="2965">
            <analyzeString>
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2968">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
            <analyzeString line="2977">
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2980">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
           </sequence>
          </fn>
         </let>
         <fn name="empty">
          <filter flags="b">
           <slash simple="1">
            <dot type="element()"/>
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <let var="Q{}this" as="element()" slot="4" eval="16">
            <dot type="element()"/>
            <fn line="2990" name="exists">
             <sequence line="2965">
              <analyzeString>
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2968">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
              <analyzeString line="2977">
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2980">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
             </sequence>
            </fn>
           </let>
          </filter>
         </fn>
        </and>
        <ifCall line="1546" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setElementUsingIndexFunction"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="2"/>
          <dot type="element()"/>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="1553" var="Q{}bindingi" as="node()?" slot="5" eval="7">
        <treat line="1554" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="Q{}getBinding" bSlot="3">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="1555" type="element()"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <let line="1560" var="Q{}refi" as="xs:string" slot="6" eval="16">
         <treat line="1561" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
          <check card="1" diag="3|0|XTTE0570|refi">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
            <data>
             <callT name="Q{}getDataRef" bSlot="4">
              <withParam name="Q{}this" flags="c" as="element()">
               <dot line="1562" type="element()"/>
              </withParam>
              <withParam name="Q{}bindingi" flags="c" as="node()?">
               <varRef line="1563" name="Q{}bindingi" slot="5"/>
              </withParam>
             </callT>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="1568" var="Q{}instanceField" as="node()?" slot="7" eval="7">
          <treat line="1569" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
           <check card="?" diag="3|0|XTTE0570|instanceField">
            <callT name="Q{}getReferencedInstanceField" bSlot="5">
             <withParam name="Q{}refi" flags="c" as="xs:string">
              <varRef line="1570" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </check>
          </treat>
          <let line="1575" var="Q{}actions" as="map(*)*" slot="8" eval="8">
           <treat line="1576" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
            <callT name="Q{}setActions" bSlot="6">
             <withParam name="Q{}this" flags="c" as="element()">
              <dot line="1577" type="element()"/>
             </withParam>
             <withParam name="Q{}nodeset" flags="t" as="xs:string">
              <varRef line="1578" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </treat>
           <sequence line="1582">
            <choose>
             <fn name="exists">
              <varRef name="Q{}actions" slot="8"/>
             </fn>
             <ifCall line="1583" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="Q{}myid" slot="2"/>
               <varRef name="Q{}actions" slot="8"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1600" name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
             <sequence>
              <att name="class" flags="l">
               <str val="xforms-select"/>
              </att>
              <applyT line="1601" bSlot="7">
               <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
              </applyT>
              <elem line="1603" name="select" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
               <sequence line="1604">
                <let var="Q{}element" as="element()" slot="9" eval="16">
                 <dot type="element()"/>
                 <let line="3056" var="Q{}class" as="xs:string?" slot="10" eval="7">
                  <choose line="3057">
                   <fn name="exists">
                    <slash simple="1">
                     <varRef name="Q{}element" slot="9"/>
                     <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                    </slash>
                   </fn>
                   <cvUntyped line="3058" to="xs:string" diag="3|0|XTTE0570|class">
                    <cast as="xs:untypedAtomic" emptiable="0">
                     <fn name="string">
                      <convert from="xs:untypedAtomic" to="xs:string">
                       <data>
                        <slash simple="1">
                         <varRef name="Q{}element" slot="9"/>
                         <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                        </slash>
                       </data>
                      </convert>
                     </fn>
                    </cast>
                   </cvUntyped>
                  </choose>
                  <let line="3061" var="Q{}class-mod" as="xs:string?" slot="11" eval="7">
                   <choose line="3063">
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="Q{}element" slot="9"/>
                      <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                     </slash>
                    </fn>
                    <cvUntyped line="3064" to="xs:string" diag="3|0|XTTE0570|class-mod">
                     <cast as="xs:untypedAtomic" emptiable="0">
                      <fn name="string-join">
                       <sequence>
                        <varRef name="Q{}class" slot="10"/>
                        <str val="incremental"/>
                       </sequence>
                       <str val=" "/>
                      </fn>
                     </cast>
                    </cvUntyped>
                    <true/>
                    <varRef line="3067" name="Q{}class" slot="10"/>
                   </choose>
                   <choose line="3071">
                    <fn name="exists">
                     <varRef name="Q{}class-mod" slot="11"/>
                    </fn>
                    <treat line="3072" as="attribute(Q{}class)" jsTest="return item.name==='class'" diag="5|0|XTTE0780|xforms:getClass#1">
                     <att name="class" flags="l">
                      <varRef name="Q{}class-mod" slot="11"/>
                     </att>
                    </treat>
                   </choose>
                  </let>
                 </let>
                </let>
                <copyOf line="1605" flags="vc">
                 <except op="except">
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                  <docOrder intra="1">
                   <sequence>
                    <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                    <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                    <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                   </sequence>
                  </docOrder>
                 </except>
                </copyOf>
                <att line="1607" name="data-ref" flags="l">
                 <varRef name="Q{}refi" slot="6"/>
                </att>
                <att line="1608" name="data-element" flags="l">
                 <lastOf line="1598">
                  <fn name="tokenize">
                   <varRef name="Q{}refi" slot="6"/>
                   <str val="/"/>
                   <str val=""/>
                  </fn>
                 </lastOf>
                </att>
                <choose line="1610">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="Q{}bindingi" slot="5"/>
                  </fn>
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="Q{}bindingi" slot="5"/>
                    <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                   </slash>
                  </fn>
                 </and>
                 <att line="1611" name="data-constraint" flags="l">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="Q{}bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                    </slash>
                   </data>
                  </convert>
                 </att>
                </choose>
                <choose line="1614">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="element()"/>
                  </fn>
                  <str val="select"/>
                 </vc>
                 <sequence line="1615">
                  <att name="multiple" flags="l">
                   <str val="true"/>
                  </att>
                  <att line="1616" name="size" flags="l">
                   <convert line="1617" from="xs:integer" to="xs:string">
                    <fn name="count">
                     <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                    </fn>
                   </convert>
                  </att>
                 </sequence>
                </choose>
                <choose line="1620">
                 <fn name="exists">
                  <varRef name="Q{}actions" slot="8"/>
                 </fn>
                 <att line="1621" name="data-action" flags="l">
                  <varRef name="Q{}myid" slot="2"/>
                 </att>
                </choose>
                <applyT line="1624" bSlot="8">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                 <withParam name="Q{}selectedValue" as="xs:string">
                  <choose line="1589">
                   <fn name="exists">
                    <varRef name="Q{}instanceField" slot="7"/>
                   </fn>
                   <cvUntyped line="1590" to="xs:string" diag="3|0|XTTE0570|selectedValue">
                    <cast as="xs:untypedAtomic" emptiable="0">
                     <fn name="string">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <data>
                        <varRef name="Q{}instanceField" slot="7"/>
                       </data>
                      </convert>
                     </fn>
                    </cast>
                   </cvUntyped>
                   <true/>
                   <str val=""/>
                  </choose>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="25" rank="1" minImp="0" slots="1" flags="s" line="2111" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2117" var="Q{}action-map" as="map(*)" slot="0" eval="16">
     <treat line="2118" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|action-map">
      <check card="1" diag="3|0|XTTE0570|action-map">
       <callT name="Q{}setAction" bSlot="2">
        <withParam name="Q{}this" flags="c" as="element()">
         <dot line="2119" type="element()"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <varRef line="2132" name="Q{}action-map" slot="0"/>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="19" rank="1" minImp="0" slots="15" flags="s" line="1745" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1746">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1747" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1748" name="Q{}recalculate" slot="2" as="xs:boolean">
      <false role="select"/>
      <treat role="conversion" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="8|0|XTTE0590|recalculate">
       <check card="1" diag="8|0|XTTE0590|recalculate">
        <cvUntyped to="xs:boolean" diag="8|0|XTTE0590|recalculate">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1749" name="Q{}refreshRepeats" slot="3" as="xs:boolean">
      <false role="select"/>
      <treat role="conversion" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="8|0|XTTE0590|refreshRepeats">
       <check card="1" diag="8|0|XTTE0590|refreshRepeats">
        <cvUntyped to="xs:boolean" diag="8|0|XTTE0590|refreshRepeats">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1753" var="Q{}myid" as="xs:string" slot="4" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
        </fn>
        <str val="-"/>
        <choose line="1751">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="1760">
       <choose>
        <fn name="not">
         <varRef name="Q{}recalculate" slot="2"/>
        </fn>
        <ifCall line="1776" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setRepeatIndex"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="4"/>
          <choose line="1763">
           <fn name="empty">
            <axis name="attribute" nodeTest="attribute(Q{}startindex)" jsTest="return item.name==='startindex'"/>
           </fn>
           <dbl val="1"/>
           <castable line="1766" as="xs:double" emptiable="0">
            <axis name="attribute" nodeTest="attribute(Q{}startindex)" jsTest="return item.name==='startindex'"/>
           </castable>
           <cvUntyped line="1767" to="xs:double" diag="3|0|XTTE0570|this-index">
            <convert from="xs:double" to="xs:untypedAtomic">
             <fn name="number">
              <attVal name="Q{}startindex" chk="0"/>
             </fn>
            </convert>
           </cvUntyped>
           <true/>
           <check line="1770" card="1" diag="3|0|XTTE0570|this-index">
            <sequence>
             <convert from="xs:anyAtomicType" to="xs:double" flags="p" diag="3|0|XTTE0570|this-index">
              <cvUntyped to="xs:double" diag="3|0|XTTE0570|this-index">
               <data>
                <message>
                 <sequence role="select">
                  <valueOf>
                   <str val="[xforms:repeat] value of @startindex ('"/>
                  </valueOf>
                  <valueOf>
                   <convert from="xs:untypedAtomic" to="xs:string">
                    <attVal name="Q{}startindex" chk="0"/>
                   </convert>
                  </valueOf>
                  <valueOf>
                   <str val="') is not a number. Setting the index to '1'"/>
                  </valueOf>
                 </sequence>
                 <str role="terminate" val="no"/>
                 <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                </message>
               </data>
              </cvUntyped>
             </convert>
             <dbl val="1"/>
            </sequence>
           </check>
          </choose>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="1783" var="Q{}bindingi" as="node()?" slot="5" eval="7">
        <treat line="1784" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="Q{}getBinding" bSlot="9">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="1785" type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <let line="1790" var="Q{}refi" as="xs:string" slot="6" eval="16">
         <treat line="1791" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
          <check card="1" diag="3|0|XTTE0570|refi">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
            <data>
             <callT name="Q{}getDataRef" bSlot="10">
              <withParam name="Q{}this" flags="c" as="element()">
               <dot line="1792" type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
              </withParam>
              <withParam name="Q{}bindingi" flags="c" as="node()?">
               <varRef line="1793" name="Q{}bindingi" slot="5"/>
              </withParam>
             </callT>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="1799" var="Q{}selectedRepeatVar" as="element()*" slot="7" eval="8">
          <treat line="1801" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|selectedRepeatVar">
           <callT name="Q{}getReferencedInstanceField" bSlot="11">
            <withParam name="Q{}refi" flags="c" as="xs:string">
             <varRef line="1802" name="Q{}refi" slot="6"/>
            </withParam>
           </callT>
          </treat>
          <let line="1817" var="Q{}repeat-items" as="element(Q{}div, Q{http://www.w3.org/2001/XMLSchema}untyped)*" slot="8" eval="3">
           <let line="1818" var="Q{}this" as="element(Q{http://www.w3.org/2002/xforms}repeat)" slot="9" eval="16">
            <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
            <let line="1823" var="Q{http://saxon.sf.net/generated-variable}v0" as="element()*" slot="10" eval="4">
             <slash simple="1">
              <varRef name="Q{}this" slot="9"/>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <forEach line="1819">
              <varRef name="Q{}selectedRepeatVar" slot="7"/>
              <let line="1820" var="Q{}string-position" as="xs:string" slot="11" eval="8">
               <fn name="string">
                <fn name="position"/>
               </fn>
               <elem line="1822" name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
                <sequence>
                 <att name="data-repeat-item" flags="l">
                  <str val="true"/>
                 </att>
                 <applyT line="1823" bSlot="12">
                  <varRef role="select" name="Q{http://saxon.sf.net/generated-variable}v0" slot="10"/>
                  <withParam name="Q{}position" as="xs:integer">
                   <fn line="1825" name="position"/>
                  </withParam>
                  <withParam name="Q{}context-position" as="xs:string">
                   <choose line="1821">
                    <varRef name="Q{}context-position" slot="1"/>
                    <fn name="concat">
                     <varRef name="Q{}context-position" slot="1"/>
                     <str val="."/>
                     <varRef name="Q{}string-position" slot="11"/>
                    </fn>
                    <true/>
                    <varRef name="Q{}string-position" slot="11"/>
                   </choose>
                  </withParam>
                  <withParam name="Q{}nodeset" flags="t" as="xs:string">
                   <fn line="1824" name="concat">
                    <varRef name="Q{}refi" slot="6"/>
                    <str val="["/>
                    <fn name="position"/>
                    <str val="]"/>
                   </fn>
                  </withParam>
                 </applyT>
                </sequence>
               </elem>
              </let>
             </forEach>
            </let>
           </let>
           <sequence line="1834">
            <choose>
             <varRef name="Q{}refreshRepeats" slot="3"/>
             <varRef line="1835" name="Q{}repeat-items" slot="8"/>
             <true/>
             <elem line="1838" name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
              <sequence line="1839">
               <let var="Q{}element" as="element(Q{http://www.w3.org/2002/xforms}repeat)" slot="12" eval="16">
                <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
                <let line="3056" var="Q{}class" as="xs:string?" slot="13" eval="7">
                 <choose line="3057">
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="Q{}element" slot="12"/>
                    <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                   </slash>
                  </fn>
                  <cvUntyped line="3058" to="xs:string" diag="3|0|XTTE0570|class">
                   <cast as="xs:untypedAtomic" emptiable="0">
                    <fn name="string">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <slash simple="1">
                        <varRef name="Q{}element" slot="12"/>
                        <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                       </slash>
                      </data>
                     </convert>
                    </fn>
                   </cast>
                  </cvUntyped>
                 </choose>
                 <let line="3061" var="Q{}class-mod" as="xs:string?" slot="14" eval="7">
                  <choose line="3063">
                   <fn name="exists">
                    <slash simple="1">
                     <varRef name="Q{}element" slot="12"/>
                     <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                    </slash>
                   </fn>
                   <cvUntyped line="3064" to="xs:string" diag="3|0|XTTE0570|class-mod">
                    <cast as="xs:untypedAtomic" emptiable="0">
                     <fn name="string-join">
                      <sequence>
                       <varRef name="Q{}class" slot="13"/>
                       <str val="incremental"/>
                      </sequence>
                      <str val=" "/>
                     </fn>
                    </cast>
                   </cvUntyped>
                   <true/>
                   <varRef line="3067" name="Q{}class" slot="13"/>
                  </choose>
                  <choose line="3071">
                   <fn name="exists">
                    <varRef name="Q{}class-mod" slot="14"/>
                   </fn>
                   <treat line="3072" as="attribute(Q{}class)" jsTest="return item.name==='class'" diag="5|0|XTTE0780|xforms:getClass#1">
                    <att name="class" flags="l">
                     <varRef name="Q{}class-mod" slot="14"/>
                    </att>
                   </treat>
                  </choose>
                 </let>
                </let>
               </let>
               <att line="1841" name="data-repeatable-context" flags="l">
                <varRef name="Q{}refi" slot="6"/>
               </att>
               <att line="1842" name="data-count" flags="l">
                <convert from="xs:integer" to="xs:string">
                 <fn name="count">
                  <varRef name="Q{}selectedRepeatVar" slot="7"/>
                 </fn>
                </convert>
               </att>
               <att line="1843" name="id" flags="l">
                <varRef name="Q{}myid" slot="4"/>
               </att>
               <varRef line="1845" name="Q{}repeat-items" slot="8"/>
              </sequence>
             </elem>
            </choose>
            <choose line="1853">
             <and op="and">
              <fn name="not">
               <varRef name="Q{}recalculate" slot="2"/>
              </fn>
              <fn name="empty">
               <slash simple="1">
                <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
                <axis name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
               </slash>
              </fn>
             </and>
             <sequence line="1855">
              <message>
               <fn role="select" name="concat">
                <str val="[xforms:repeat] Registering repeat with ID "/>
                <varRef name="Q{}myid" slot="4"/>
                <str val=" and parsed nodeset "/>
                <varRef name="Q{}refi" slot="6"/>
               </fn>
               <str role="terminate" val="no"/>
               <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
              </message>
              <ifCall line="1857" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="addRepeat"/>
               <arrayBlock>
                <varRef name="Q{}myid" slot="4"/>
                <varRef name="Q{}refi" slot="6"/>
               </arrayBlock>
              </ifCall>
             </sequence>
            </choose>
            <ifCall line="1861" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="setRepeatSize"/>
             <arrayBlock>
              <varRef name="Q{}myid" slot="4"/>
              <fn name="count">
               <varRef name="Q{}selectedRepeatVar" slot="7"/>
              </fn>
             </arrayBlock>
            </ifCall>
           </sequence>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="6" flags="s" line="1701" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}group)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='group';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1702">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1703" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1707" var="Q{}myid" as="xs:string" slot="2" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}group)"/>
        </fn>
        <str val="-"/>
        <choose line="1705">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="1709">
       <choose>
        <and op="and">
         <let var="Q{}this" as="element(Q{http://www.w3.org/2002/xforms}group)" slot="3" eval="16">
          <dot type="element(Q{http://www.w3.org/2002/xforms}group)"/>
          <fn line="2990" name="exists">
           <sequence line="2965">
            <analyzeString>
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2968">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
            <analyzeString line="2977">
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2980">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
           </sequence>
          </fn>
         </let>
         <fn name="empty">
          <filter flags="b">
           <slash simple="1">
            <dot type="element(Q{http://www.w3.org/2002/xforms}group)"/>
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <let var="Q{}this" as="element()" slot="4" eval="16">
            <dot type="element()"/>
            <fn line="2990" name="exists">
             <sequence line="2965">
              <analyzeString>
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2968">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
              <analyzeString line="2977">
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2980">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
             </sequence>
            </fn>
           </let>
          </filter>
         </fn>
        </and>
        <ifCall line="1710" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setElementUsingIndexFunction"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="2"/>
          <dot type="element(Q{http://www.w3.org/2002/xforms}group)"/>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="1713" var="Q{}refi" as="xs:string?" slot="5" eval="7">
        <choose line="1715">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
         </fn>
         <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
          <attVal name="Q{}nodeset" chk="0"/>
         </cvUntyped>
         <fn line="1716" name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="1716" to="xs:string" diag="3|0|XTTE0570|refi">
          <attVal name="Q{}ref" chk="0"/>
         </cvUntyped>
        </choose>
        <elem line="1722" name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
         <sequence line="1723">
          <att name="id" flags="l">
           <varRef name="Q{}myid" slot="2"/>
          </att>
          <choose line="1724">
           <fn name="exists">
            <varRef name="Q{}refi" slot="5"/>
           </fn>
           <att line="1725" name="data-group-ref" flags="l">
            <varRef name="Q{}refi" slot="5"/>
           </att>
          </choose>
          <applyT line="1727" bSlot="13">
           <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           <withParam name="Q{}nodeset" flags="t" as="xs:string?">
            <choose line="1728">
             <fn name="exists">
              <varRef name="Q{}refi" slot="5"/>
             </fn>
             <varRef name="Q{}refi" slot="5"/>
             <true/>
             <str val=""/>
            </choose>
           </withParam>
          </applyT>
         </sequence>
        </elem>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" rank="1" minImp="0" slots="0" flags="s" line="1105" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/1999/xhtml}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1106" name="html" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
     <sequence line="1107">
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="1108" name="head" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
       <sequence line="1109">
        <copyOf flags="vc">
         <union op="|">
          <slash simple="2">
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash simple="2">
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="1110" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="1112">
         <union op="|">
          <filter flags="b">
           <slash simple="2">
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" onEmpty="0" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash simple="2">
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" onEmpty="0" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="1113" name="meta" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
          <copyOf line="1114" flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="1119" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="1121" name="body" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
       <applyT line="1122" bSlot="14">
        <slash role="select" simple="2">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="9" rank="1" minImp="0" slots="15" flags="s" line="1137" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}output)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='output';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1138">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1139" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1143" var="Q{}myid" as="xs:string" slot="2" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
        </fn>
        <str val="-"/>
        <choose line="1141">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="1145">
       <choose>
        <and op="and">
         <let var="Q{}this" as="element(Q{http://www.w3.org/2002/xforms}output)" slot="3" eval="16">
          <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
          <fn line="2990" name="exists">
           <sequence line="2965">
            <analyzeString>
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2968">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
            <analyzeString line="2977">
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2980">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
           </sequence>
          </fn>
         </let>
         <fn name="empty">
          <filter flags="b">
           <slash simple="1">
            <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <let var="Q{}this" as="element()" slot="4" eval="16">
            <dot type="element()"/>
            <fn line="2990" name="exists">
             <sequence line="2965">
              <analyzeString>
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2968">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
              <analyzeString line="2977">
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2980">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
             </sequence>
            </fn>
           </let>
          </filter>
         </fn>
        </and>
        <ifCall line="1146" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setElementUsingIndexFunction"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="2"/>
          <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="1151" var="Q{}bindingi" as="node()?" slot="5" eval="7">
        <treat line="1152" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="Q{}getBinding" bSlot="15">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="1153" type="element(Q{http://www.w3.org/2002/xforms}output)"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <let line="1158" var="Q{}refi" as="xs:string" slot="6" eval="16">
         <treat line="1159" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
          <check card="1" diag="3|0|XTTE0570|refi">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
            <data>
             <callT name="Q{}getDataRef" bSlot="16">
              <withParam name="Q{}this" flags="c" as="element()">
               <dot line="1160" type="element(Q{http://www.w3.org/2002/xforms}output)"/>
              </withParam>
              <withParam name="Q{}bindingi" flags="c" as="node()?">
               <varRef line="1161" name="Q{}bindingi" slot="5"/>
              </withParam>
             </callT>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="1166" var="Q{}instanceField" as="node()?" slot="7" eval="7">
          <treat line="1167" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
           <check card="?" diag="3|0|XTTE0570|instanceField">
            <callT name="Q{}getReferencedInstanceField" bSlot="17">
             <withParam name="Q{}refi" flags="c" as="xs:string">
              <varRef line="1168" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </check>
          </treat>
          <let line="1179" var="Q{}namespace-context-item" as="element()" slot="8" eval="16">
           <choose>
            <fn name="exists">
             <varRef name="Q{}instanceField" slot="7"/>
            </fn>
            <choose>
             <fn name="exists">
              <filter flags="b">
               <varRef name="Q{}instanceField" slot="7"/>
               <fn name="exists">
                <axis name="self" nodeTest="text()" jsTest="return item.nodeType===3;"/>
               </fn>
              </filter>
             </fn>
             <check card="1" diag="3|0|XTTE0570|namespace-context-item">
              <slash simple="1">
               <varRef name="Q{}instanceField" slot="7"/>
               <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
             </check>
             <true/>
             <treat as="element()" jsTest="return item.nodeType===1;" diag="3|0|XTTE0570|namespace-context-item">
              <check card="1" diag="3|0|XTTE0570|namespace-context-item">
               <varRef name="Q{}instanceField" slot="7"/>
              </check>
             </treat>
            </choose>
            <true/>
            <let var="Q{}this" as="element()" slot="9" eval="16">
             <check card="1" diag="0|0||xforms:addNamespaceDeclarations">
              <slash simple="1">
               <root/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
             </check>
             <compElem line="3000">
              <fn role="name" name="name">
               <varRef name="Q{}this" slot="9"/>
              </fn>
              <sequence role="content" line="3001">
               <namespace flags="l">
                <str role="name" val="xforms"/>
                <str role="select" val="http://www.w3.org/2002/xforms"/>
               </namespace>
               <forEach line="3002">
                <filter flags="b">
                 <filter flags="b">
                  <slash simple="1">
                   <varRef name="Q{}this" slot="9"/>
                   <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                  </slash>
                  <fn name="boolean">
                   <fn name="namespace-uri">
                    <dot type="element()"/>
                   </fn>
                  </fn>
                 </filter>
                 <fn name="not">
                  <gc op="=" card="N:1" comp="CCC">
                   <sequence>
                    <slash>
                     <fn name="reverse">
                      <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                     </fn>
                     <fn name="namespace-uri">
                      <dot type="element()"/>
                     </fn>
                    </slash>
                    <slash>
                     <fn name="reverse">
                      <axis name="preceding" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                     </fn>
                     <fn name="namespace-uri">
                      <dot type="element()"/>
                     </fn>
                    </slash>
                   </sequence>
                   <fn name="namespace-uri">
                    <dot type="element()"/>
                   </fn>
                  </gc>
                 </fn>
                </filter>
                <namespace line="3005" flags="l">
                 <fn role="name" line="3004" name="substring-before">
                  <fn name="name">
                   <dot type="element()"/>
                  </fn>
                  <str val=":"/>
                 </fn>
                 <convert role="select" from="xs:anyURI" to="xs:string">
                  <fn line="3003" name="namespace-uri">
                   <dot type="element()"/>
                  </fn>
                 </convert>
                </namespace>
               </forEach>
               <copyOf line="3007" flags="vc">
                <sequence>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="9"/>
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                 </slash>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="9"/>
                  <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
                 </slash>
                </sequence>
               </copyOf>
              </sequence>
             </compElem>
            </let>
           </choose>
           <let line="1181" var="Q{}valueExecuted" as="xs:string" slot="10" eval="16">
            <choose line="1183">
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </fn>
             <evaluate line="1184" as="xs:string" dxns="">
              <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="18" eval="16">
               <check card="1" diag="0|0||xforms:impose">
                <cvUntyped to="xs:string">
                 <attVal name="Q{}value" chk="0"/>
                </cvUntyped>
               </check>
              </ufCall>
              <varRef role="cxt" name="Q{}instanceField" slot="7"/>
              <varRef role="nsCxt" name="Q{}namespace-context-item" slot="8"/>
              <str role="sa" val="no"/>
              <map role="options" size="0"/>
              <map role="wp" size="0"/>
             </evaluate>
             <true/>
             <cvUntyped line="1187" to="xs:string" diag="3|0|XTTE0570|valueExecuted">
              <cast as="xs:untypedAtomic" emptiable="0">
               <fn name="string">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="Q{}instanceField" slot="7"/>
                 </data>
                </convert>
               </fn>
              </cast>
             </cvUntyped>
            </choose>
            <let line="1193" var="Q{}relevantVar" as="xs:boolean" slot="11" eval="16">
             <choose line="1195">
              <and op="and">
               <and op="and">
                <fn name="exists">
                 <varRef name="Q{}bindingi" slot="5"/>
                </fn>
                <fn name="exists">
                 <slash simple="1">
                  <varRef name="Q{}bindingi" slot="5"/>
                  <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                 </slash>
                </fn>
               </and>
               <fn name="exists">
                <varRef name="Q{}instanceField" slot="7"/>
               </fn>
              </and>
              <treat line="1196" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
               <check card="1" diag="3|0|XTTE0570|relevantVar">
                <cvUntyped to="xs:boolean" diag="3|0|XTTE0570|relevantVar">
                 <data>
                  <evaluate dxns="">
                   <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="19" eval="16">
                    <check card="1" diag="0|0||xforms:impose">
                     <cvUntyped to="xs:string">
                      <data>
                       <slash simple="1">
                        <varRef name="Q{}bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                       </slash>
                      </data>
                     </cvUntyped>
                    </check>
                   </ufCall>
                   <varRef role="cxt" name="Q{}instanceField" slot="7"/>
                   <varRef role="nsCxt" name="Q{}namespace-context-item" slot="8"/>
                   <str role="sa" val="no"/>
                   <map role="options" size="0"/>
                   <map role="wp" size="0"/>
                  </evaluate>
                 </data>
                </cvUntyped>
               </check>
              </treat>
              <true/>
              <true/>
             </choose>
             <sequence line="1207">
              <elem name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
               <sequence line="1208">
                <let var="Q{}element" as="element(Q{http://www.w3.org/2002/xforms}output)" slot="12" eval="16">
                 <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
                 <let line="3056" var="Q{}class" as="xs:string?" slot="13" eval="7">
                  <choose line="3057">
                   <fn name="exists">
                    <slash simple="1">
                     <varRef name="Q{}element" slot="12"/>
                     <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                    </slash>
                   </fn>
                   <cvUntyped line="3058" to="xs:string" diag="3|0|XTTE0570|class">
                    <cast as="xs:untypedAtomic" emptiable="0">
                     <fn name="string">
                      <convert from="xs:untypedAtomic" to="xs:string">
                       <data>
                        <slash simple="1">
                         <varRef name="Q{}element" slot="12"/>
                         <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                        </slash>
                       </data>
                      </convert>
                     </fn>
                    </cast>
                   </cvUntyped>
                  </choose>
                  <let line="3061" var="Q{}class-mod" as="xs:string?" slot="14" eval="7">
                   <choose line="3063">
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="Q{}element" slot="12"/>
                      <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                     </slash>
                    </fn>
                    <cvUntyped line="3064" to="xs:string" diag="3|0|XTTE0570|class-mod">
                     <cast as="xs:untypedAtomic" emptiable="0">
                      <fn name="string-join">
                       <sequence>
                        <varRef name="Q{}class" slot="13"/>
                        <str val="incremental"/>
                       </sequence>
                       <str val=" "/>
                      </fn>
                     </cast>
                    </cvUntyped>
                    <true/>
                    <varRef line="3067" name="Q{}class" slot="13"/>
                   </choose>
                   <choose line="3071">
                    <fn name="exists">
                     <varRef name="Q{}class-mod" slot="14"/>
                    </fn>
                    <treat line="3072" as="attribute(Q{}class)" jsTest="return item.name==='class'" diag="5|0|XTTE0780|xforms:getClass#1">
                     <att name="class" flags="l">
                      <varRef name="Q{}class-mod" slot="14"/>
                     </att>
                    </treat>
                   </choose>
                  </let>
                 </let>
                </let>
                <applyT line="1210" bSlot="20">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
                </applyT>
                <elem line="1212" name="span" nsuri="" flags="l">
                 <sequence line="1213">
                  <att name="id" flags="l">
                   <varRef name="Q{}myid" slot="2"/>
                  </att>
                  <att line="1214" name="style" flags="l">
                   <choose>
                    <varRef name="Q{}relevantVar" slot="11"/>
                    <str val="display:inline"/>
                    <true/>
                    <str val="display:none"/>
                   </choose>
                  </att>
                  <att line="1215" name="data-ref" flags="l">
                   <varRef name="Q{}refi" slot="6"/>
                  </att>
                  <varRef line="1217" name="Q{}valueExecuted" slot="10"/>
                 </sequence>
                </elem>
               </sequence>
              </elem>
              <choose line="1222">
               <fn name="empty">
                <slash simple="1">
                 <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
                 <axis name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
                </slash>
               </fn>
               <sequence line="1239">
                <message>
                 <fn role="select" name="concat">
                  <str val="[xforms:output] Registering output with ID "/>
                  <varRef name="Q{}myid" slot="2"/>
                 </fn>
                 <str role="terminate" val="no"/>
                 <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                </message>
                <ifCall line="1241" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                 <check card="1" diag="0|0||ixsl:call">
                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                 </check>
                 <str val="addOutput"/>
                 <arrayBlock>
                  <varRef name="Q{}myid" slot="2"/>
                  <ifCall line="1225" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
                   <sequence>
                    <choose>
                     <varRef name="Q{}refi" slot="6"/>
                     <ifCall line="1226" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                      <str val="@ref"/>
                      <varRef name="Q{}refi" slot="6"/>
                     </ifCall>
                    </choose>
                    <choose line="1229">
                     <fn name="exists">
                      <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
                     </fn>
                     <ifCall line="1230" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                      <str val="@value"/>
                      <cast as="xs:string" emptiable="1">
                       <attVal name="Q{}value" chk="0"/>
                      </cast>
                     </ifCall>
                    </choose>
                   </sequence>
                   <map size="2">
                    <str val="duplicates"/>
                    <str val="reject"/>
                    <str val="duplicates-error-code"/>
                    <str val="XTDE3365"/>
                   </map>
                  </ifCall>
                 </arrayBlock>
                </ifCall>
               </sequence>
              </choose>
             </sequence>
            </let>
           </let>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="5" rank="1" minImp="0" slots="0" flags="s" line="1069" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
    <applyT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1070" flags="t" bSlot="21">
     <axis role="select" name="child" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
    </applyT>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="25" part="3" rank="1" minImp="0" slots="1" flags="s" line="2111" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hide)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2117" var="Q{}action-map" as="map(*)" slot="0" eval="16">
     <treat line="2118" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|action-map">
      <check card="1" diag="3|0|XTTE0570|action-map">
       <callT name="Q{}setAction" bSlot="2">
        <withParam name="Q{}this" flags="c" as="element()">
         <dot line="2119" type="element()"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <varRef line="2132" name="Q{}action-map" slot="0"/>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="12" rank="1" minImp="0" slots="0" flags="s" line="1526" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="20" rank="1" minImp="0" slots="2" flags="s" line="1874" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}submit)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submit';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1875">
     <param name="Q{}submissions" slot="0" flags="t" as="map(xs:string, map(*))">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, map(*))" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isMap(item)};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <let line="1877" var="Q{}innerbody" as="document-node()" slot="1" eval="16">
      <doc line="1878" validation="preserve">
       <applyT bSlot="22">
        <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
       </applyT>
      </doc>
      <choose line="1882">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="1">
         <attVal name="Q{}appearance" chk="0"/>
        </cast>
        <str val="minimal"/>
       </vc>
       <elem line="1883" name="a" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
        <copyOf line="1884" flags="vc">
         <varRef name="Q{}innerbody" slot="1"/>
        </copyOf>
       </elem>
       <true/>
       <elem line="1888" name="button" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
        <sequence>
         <att name="type" flags="l">
          <str val="button"/>
         </att>
         <copyOf line="1889" flags="vc">
          <filter flags="b">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
           <vc op="ne" onEmpty="0" comp="CCC">
            <fn name="local-name">
             <dot type="attribute()"/>
            </fn>
            <str val="submission"/>
           </vc>
          </filter>
         </copyOf>
         <choose line="1890">
          <and op="and">
           <fn name="exists">
            <axis name="attribute" nodeTest="attribute(Q{}submission)" jsTest="return item.name==='submission'"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <varRef name="Q{}submissions" slot="0"/>
            <atomSing diag="0|1||map:contains">
             <axis name="attribute" nodeTest="attribute(Q{}submission)" jsTest="return item.name==='submission'"/>
            </atomSing>
           </ifCall>
          </and>
          <att line="1891" name="data-submit" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}submission" chk="0"/>
           </convert>
          </att>
         </choose>
         <copyOf line="1893" flags="vc">
          <varRef name="Q{}innerbody" slot="1"/>
         </copyOf>
        </sequence>
       </elem>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" part="1" rank="1" minImp="0" slots="0" flags="s" line="1105" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1106" name="html" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
     <sequence line="1107">
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="1108" name="head" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
       <sequence line="1109">
        <copyOf flags="vc">
         <union op="|">
          <slash simple="2">
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash simple="2">
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="1110" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="1112">
         <union op="|">
          <filter flags="b">
           <slash simple="2">
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" onEmpty="0" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash simple="2">
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" onEmpty="0" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="1113" name="meta" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
          <copyOf line="1114" flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="1119" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="1121" name="body" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
       <applyT line="1122" bSlot="14">
        <slash role="select" simple="2">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="13" rank="1" minImp="0" slots="12" flags="s" line="1537" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select1)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select1';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1538">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1539" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1543" var="Q{}myid" as="xs:string" slot="2" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <str val="-"/>
        <choose line="1541">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="1545">
       <choose>
        <and op="and">
         <let var="Q{}this" as="element()" slot="3" eval="16">
          <dot type="element()"/>
          <fn line="2990" name="exists">
           <sequence line="2965">
            <analyzeString>
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2968">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
            <analyzeString line="2977">
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2980">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
           </sequence>
          </fn>
         </let>
         <fn name="empty">
          <filter flags="b">
           <slash simple="1">
            <dot type="element()"/>
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <let var="Q{}this" as="element()" slot="4" eval="16">
            <dot type="element()"/>
            <fn line="2990" name="exists">
             <sequence line="2965">
              <analyzeString>
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2968">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
              <analyzeString line="2977">
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2980">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
             </sequence>
            </fn>
           </let>
          </filter>
         </fn>
        </and>
        <ifCall line="1546" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setElementUsingIndexFunction"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="2"/>
          <dot type="element()"/>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="1553" var="Q{}bindingi" as="node()?" slot="5" eval="7">
        <treat line="1554" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="Q{}getBinding" bSlot="3">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="1555" type="element()"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <let line="1560" var="Q{}refi" as="xs:string" slot="6" eval="16">
         <treat line="1561" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
          <check card="1" diag="3|0|XTTE0570|refi">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
            <data>
             <callT name="Q{}getDataRef" bSlot="4">
              <withParam name="Q{}this" flags="c" as="element()">
               <dot line="1562" type="element()"/>
              </withParam>
              <withParam name="Q{}bindingi" flags="c" as="node()?">
               <varRef line="1563" name="Q{}bindingi" slot="5"/>
              </withParam>
             </callT>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="1568" var="Q{}instanceField" as="node()?" slot="7" eval="7">
          <treat line="1569" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
           <check card="?" diag="3|0|XTTE0570|instanceField">
            <callT name="Q{}getReferencedInstanceField" bSlot="5">
             <withParam name="Q{}refi" flags="c" as="xs:string">
              <varRef line="1570" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </check>
          </treat>
          <let line="1575" var="Q{}actions" as="map(*)*" slot="8" eval="8">
           <treat line="1576" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
            <callT name="Q{}setActions" bSlot="6">
             <withParam name="Q{}this" flags="c" as="element()">
              <dot line="1577" type="element()"/>
             </withParam>
             <withParam name="Q{}nodeset" flags="t" as="xs:string">
              <varRef line="1578" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </treat>
           <sequence line="1582">
            <choose>
             <fn name="exists">
              <varRef name="Q{}actions" slot="8"/>
             </fn>
             <ifCall line="1583" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="Q{}myid" slot="2"/>
               <varRef name="Q{}actions" slot="8"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1600" name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
             <sequence>
              <att name="class" flags="l">
               <str val="xforms-select"/>
              </att>
              <applyT line="1601" bSlot="7">
               <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
              </applyT>
              <elem line="1603" name="select" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
               <sequence line="1604">
                <let var="Q{}element" as="element()" slot="9" eval="16">
                 <dot type="element()"/>
                 <let line="3056" var="Q{}class" as="xs:string?" slot="10" eval="7">
                  <choose line="3057">
                   <fn name="exists">
                    <slash simple="1">
                     <varRef name="Q{}element" slot="9"/>
                     <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                    </slash>
                   </fn>
                   <cvUntyped line="3058" to="xs:string" diag="3|0|XTTE0570|class">
                    <cast as="xs:untypedAtomic" emptiable="0">
                     <fn name="string">
                      <convert from="xs:untypedAtomic" to="xs:string">
                       <data>
                        <slash simple="1">
                         <varRef name="Q{}element" slot="9"/>
                         <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                        </slash>
                       </data>
                      </convert>
                     </fn>
                    </cast>
                   </cvUntyped>
                  </choose>
                  <let line="3061" var="Q{}class-mod" as="xs:string?" slot="11" eval="7">
                   <choose line="3063">
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="Q{}element" slot="9"/>
                      <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                     </slash>
                    </fn>
                    <cvUntyped line="3064" to="xs:string" diag="3|0|XTTE0570|class-mod">
                     <cast as="xs:untypedAtomic" emptiable="0">
                      <fn name="string-join">
                       <sequence>
                        <varRef name="Q{}class" slot="10"/>
                        <str val="incremental"/>
                       </sequence>
                       <str val=" "/>
                      </fn>
                     </cast>
                    </cvUntyped>
                    <true/>
                    <varRef line="3067" name="Q{}class" slot="10"/>
                   </choose>
                   <choose line="3071">
                    <fn name="exists">
                     <varRef name="Q{}class-mod" slot="11"/>
                    </fn>
                    <treat line="3072" as="attribute(Q{}class)" jsTest="return item.name==='class'" diag="5|0|XTTE0780|xforms:getClass#1">
                     <att name="class" flags="l">
                      <varRef name="Q{}class-mod" slot="11"/>
                     </att>
                    </treat>
                   </choose>
                  </let>
                 </let>
                </let>
                <copyOf line="1605" flags="vc">
                 <except op="except">
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                  <docOrder intra="1">
                   <sequence>
                    <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                    <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                    <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                   </sequence>
                  </docOrder>
                 </except>
                </copyOf>
                <att line="1607" name="data-ref" flags="l">
                 <varRef name="Q{}refi" slot="6"/>
                </att>
                <att line="1608" name="data-element" flags="l">
                 <lastOf line="1598">
                  <fn name="tokenize">
                   <varRef name="Q{}refi" slot="6"/>
                   <str val="/"/>
                   <str val=""/>
                  </fn>
                 </lastOf>
                </att>
                <choose line="1610">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="Q{}bindingi" slot="5"/>
                  </fn>
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="Q{}bindingi" slot="5"/>
                    <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                   </slash>
                  </fn>
                 </and>
                 <att line="1611" name="data-constraint" flags="l">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="Q{}bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                    </slash>
                   </data>
                  </convert>
                 </att>
                </choose>
                <choose line="1614">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="element()"/>
                  </fn>
                  <str val="select"/>
                 </vc>
                 <sequence line="1615">
                  <att name="multiple" flags="l">
                   <str val="true"/>
                  </att>
                  <att line="1616" name="size" flags="l">
                   <convert line="1617" from="xs:integer" to="xs:string">
                    <fn name="count">
                     <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                    </fn>
                   </convert>
                  </att>
                 </sequence>
                </choose>
                <choose line="1620">
                 <fn name="exists">
                  <varRef name="Q{}actions" slot="8"/>
                 </fn>
                 <att line="1621" name="data-action" flags="l">
                  <varRef name="Q{}myid" slot="2"/>
                 </att>
                </choose>
                <applyT line="1624" bSlot="8">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                 <withParam name="Q{}selectedValue" as="xs:string">
                  <choose line="1589">
                   <fn name="exists">
                    <varRef name="Q{}instanceField" slot="7"/>
                   </fn>
                   <cvUntyped line="1590" to="xs:string" diag="3|0|XTTE0570|selectedValue">
                    <cast as="xs:untypedAtomic" emptiable="0">
                     <fn name="string">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <data>
                        <varRef name="Q{}instanceField" slot="7"/>
                       </data>
                      </convert>
                     </fn>
                    </cast>
                   </cvUntyped>
                   <true/>
                   <str val=""/>
                  </choose>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="0" flags="s" line="1662" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1663" name="label" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
     <choose line="1665">
      <fn name="exists">
       <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
      </fn>
      <applyT line="1666" bSlot="23">
       <axis role="select" name="child" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
      </applyT>
      <true/>
      <valueOf flags="l">
       <str val=" "/>
      </valueOf>
     </choose>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="25" part="5" rank="1" minImp="0" slots="1" flags="s" line="2111" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}unload)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2117" var="Q{}action-map" as="map(*)" slot="0" eval="16">
     <treat line="2118" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|action-map">
      <check card="1" diag="3|0|XTTE0570|action-map">
       <callT name="Q{}setAction" bSlot="2">
        <withParam name="Q{}this" flags="c" as="element()">
         <dot line="2119" type="element()"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <varRef line="2132" name="Q{}action-map" slot="0"/>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="25" part="2" rank="1" minImp="0" slots="1" flags="s" line="2111" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}show)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2117" var="Q{}action-map" as="map(*)" slot="0" eval="16">
     <treat line="2118" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|action-map">
      <check card="1" diag="3|0|XTTE0570|action-map">
       <callT name="Q{}setAction" bSlot="2">
        <withParam name="Q{}this" flags="c" as="element()">
         <dot line="2119" type="element()"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <varRef line="2132" name="Q{}action-map" slot="0"/>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="10" rank="1" minImp="0" slots="17" flags="s" line="1255" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='input';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1256">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1257" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1259" var="Q{}string-position" as="xs:string" slot="2" eval="16">
      <choose>
       <varRef name="Q{}context-position" slot="1"/>
       <varRef name="Q{}context-position" slot="1"/>
       <true/>
       <fn name="string">
        <varRef name="Q{}position" slot="0"/>
       </fn>
      </choose>
      <let line="1261" var="Q{}myid" as="xs:string" slot="3" eval="16">
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        </fn>
        <fn name="concat">
         <attVal name="Q{}id" chk="0"/>
         <str val="-"/>
         <varRef name="Q{}string-position" slot="2"/>
        </fn>
        <true/>
        <fn name="concat">
         <fn name="generate-id">
          <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
         </fn>
         <str val="-"/>
         <varRef name="Q{}string-position" slot="2"/>
        </fn>
       </choose>
       <sequence line="1263">
        <choose>
         <and op="and">
          <let var="Q{}this" as="element(Q{http://www.w3.org/2002/xforms}input)" slot="4" eval="16">
           <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
           <fn line="2990" name="exists">
            <sequence line="2965">
             <analyzeString>
              <cvUntyped role="select" to="xs:string">
               <data>
                <slash simple="1">
                 <varRef name="Q{}this" slot="4"/>
                 <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                </slash>
               </data>
              </cvUntyped>
              <str role="regex" val="\i\c*\("/>
              <str role="flags" val=""/>
              <choose role="matching" line="2968">
               <vc op="eq" onEmpty="0" comp="CCC">
                <fn name="substring-before">
                 <dot type="xs:string"/>
                 <str val="("/>
                </fn>
                <str val="index"/>
               </vc>
               <str val="i"/>
              </choose>
              <empty role="nonMatching"/>
             </analyzeString>
             <analyzeString line="2977">
              <cvUntyped role="select" to="xs:string">
               <data>
                <slash simple="1">
                 <varRef name="Q{}this" slot="4"/>
                 <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                </slash>
               </data>
              </cvUntyped>
              <str role="regex" val="\i\c*\("/>
              <str role="flags" val=""/>
              <choose role="matching" line="2980">
               <vc op="eq" onEmpty="0" comp="CCC">
                <fn name="substring-before">
                 <dot type="xs:string"/>
                 <str val="("/>
                </fn>
                <str val="index"/>
               </vc>
               <str val="i"/>
              </choose>
              <empty role="nonMatching"/>
             </analyzeString>
            </sequence>
           </fn>
          </let>
          <fn name="empty">
           <filter flags="b">
            <slash simple="1">
             <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
             <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </slash>
            <let var="Q{}this" as="element()" slot="5" eval="16">
             <dot type="element()"/>
             <fn line="2990" name="exists">
              <sequence line="2965">
               <analyzeString>
                <cvUntyped role="select" to="xs:string">
                 <data>
                  <slash simple="1">
                   <varRef name="Q{}this" slot="5"/>
                   <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                  </slash>
                 </data>
                </cvUntyped>
                <str role="regex" val="\i\c*\("/>
                <str role="flags" val=""/>
                <choose role="matching" line="2968">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="substring-before">
                   <dot type="xs:string"/>
                   <str val="("/>
                  </fn>
                  <str val="index"/>
                 </vc>
                 <str val="i"/>
                </choose>
                <empty role="nonMatching"/>
               </analyzeString>
               <analyzeString line="2977">
                <cvUntyped role="select" to="xs:string">
                 <data>
                  <slash simple="1">
                   <varRef name="Q{}this" slot="5"/>
                   <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                  </slash>
                 </data>
                </cvUntyped>
                <str role="regex" val="\i\c*\("/>
                <str role="flags" val=""/>
                <choose role="matching" line="2980">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="substring-before">
                   <dot type="xs:string"/>
                   <str val="("/>
                  </fn>
                  <str val="index"/>
                 </vc>
                 <str val="i"/>
                </choose>
                <empty role="nonMatching"/>
               </analyzeString>
              </sequence>
             </fn>
            </let>
           </filter>
          </fn>
         </and>
         <ifCall line="1264" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="setElementUsingIndexFunction"/>
          <arrayBlock>
           <varRef name="Q{}myid" slot="3"/>
           <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
          </arrayBlock>
         </ifCall>
        </choose>
        <let line="1272" var="Q{}bindingi" as="node()?" slot="6" eval="7">
         <treat line="1273" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
          <check card="?" diag="3|0|XTTE0570|bindingi">
           <callT name="Q{}getBinding" bSlot="24">
            <withParam name="Q{}this" flags="c" as="element()">
             <dot line="1274" type="element(Q{http://www.w3.org/2002/xforms}input)"/>
            </withParam>
           </callT>
          </check>
         </treat>
         <let line="1282" var="Q{}refi" as="xs:string" slot="7" eval="16">
          <treat line="1283" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
           <check card="1" diag="3|0|XTTE0570|refi">
            <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
             <data>
              <callT name="Q{}getDataRef" bSlot="25">
               <withParam name="Q{}this" flags="c" as="element()">
                <dot line="1284" type="element(Q{http://www.w3.org/2002/xforms}input)"/>
               </withParam>
               <withParam name="Q{}bindingi" flags="c" as="node()?">
                <varRef line="1285" name="Q{}bindingi" slot="6"/>
               </withParam>
              </callT>
             </data>
            </cvUntyped>
           </check>
          </treat>
          <let line="1292" var="Q{}instanceField" as="node()?" slot="8" eval="7">
           <treat line="1293" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
            <check card="?" diag="3|0|XTTE0570|instanceField">
             <callT name="Q{}getReferencedInstanceField" bSlot="26">
              <withParam name="Q{}refi" flags="c" as="xs:string">
               <varRef line="1294" name="Q{}refi" slot="7"/>
              </withParam>
             </callT>
            </check>
           </treat>
           <let line="1308" var="Q{}relevantVar" as="xs:boolean" slot="9" eval="16">
            <choose line="1310">
             <and op="and">
              <and op="and">
               <fn name="exists">
                <varRef name="Q{}bindingi" slot="6"/>
               </fn>
               <fn name="exists">
                <slash simple="1">
                 <varRef name="Q{}bindingi" slot="6"/>
                 <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                </slash>
               </fn>
              </and>
              <fn name="exists">
               <varRef name="Q{}instanceField" slot="8"/>
              </fn>
             </and>
             <treat line="1311" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
              <check card="1" diag="3|0|XTTE0570|relevantVar">
               <cvUntyped to="xs:boolean" diag="3|0|XTTE0570|relevantVar">
                <data>
                 <evaluate dxns="">
                  <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="27" eval="16">
                   <check card="1" diag="0|0||xforms:impose">
                    <cvUntyped to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="Q{}bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                      </slash>
                     </data>
                    </cvUntyped>
                   </check>
                  </ufCall>
                  <varRef role="cxt" name="Q{}instanceField" slot="8"/>
                  <choose role="nsCxt" line="1303">
                   <fn name="exists">
                    <varRef name="Q{}instanceField" slot="8"/>
                   </fn>
                   <treat as="element()" jsTest="return item.nodeType===1;" diag="3|0|XTTE0570|namespace-context-item">
                    <check card="1" diag="3|0|XTTE0570|namespace-context-item">
                     <varRef name="Q{}instanceField" slot="8"/>
                    </check>
                   </treat>
                   <true/>
                   <let var="Q{}this" as="element()" slot="10" eval="16">
                    <check card="1" diag="0|0||xforms:addNamespaceDeclarations">
                     <slash simple="1">
                      <root/>
                      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                     </slash>
                    </check>
                    <compElem line="3000">
                     <fn role="name" name="name">
                      <varRef name="Q{}this" slot="10"/>
                     </fn>
                     <sequence role="content" line="3001">
                      <namespace flags="l">
                       <str role="name" val="xforms"/>
                       <str role="select" val="http://www.w3.org/2002/xforms"/>
                      </namespace>
                      <forEach line="3002">
                       <filter flags="b">
                        <filter flags="b">
                         <slash simple="1">
                          <varRef name="Q{}this" slot="10"/>
                          <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                         </slash>
                         <fn name="boolean">
                          <fn name="namespace-uri">
                           <dot type="element()"/>
                          </fn>
                         </fn>
                        </filter>
                        <fn name="not">
                         <gc op="=" card="N:1" comp="CCC">
                          <sequence>
                           <slash>
                            <fn name="reverse">
                             <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                            </fn>
                            <fn name="namespace-uri">
                             <dot type="element()"/>
                            </fn>
                           </slash>
                           <slash>
                            <fn name="reverse">
                             <axis name="preceding" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                            </fn>
                            <fn name="namespace-uri">
                             <dot type="element()"/>
                            </fn>
                           </slash>
                          </sequence>
                          <fn name="namespace-uri">
                           <dot type="element()"/>
                          </fn>
                         </gc>
                        </fn>
                       </filter>
                       <namespace line="3005" flags="l">
                        <fn role="name" line="3004" name="substring-before">
                         <fn name="name">
                          <dot type="element()"/>
                         </fn>
                         <str val=":"/>
                        </fn>
                        <convert role="select" from="xs:anyURI" to="xs:string">
                         <fn line="3003" name="namespace-uri">
                          <dot type="element()"/>
                         </fn>
                        </convert>
                       </namespace>
                      </forEach>
                      <copyOf line="3007" flags="vc">
                       <sequence>
                        <slash simple="1">
                         <varRef name="Q{}this" slot="10"/>
                         <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                        </slash>
                        <slash simple="1">
                         <varRef name="Q{}this" slot="10"/>
                         <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
                        </slash>
                       </sequence>
                      </copyOf>
                     </sequence>
                    </compElem>
                   </let>
                  </choose>
                  <str role="sa" val="no"/>
                  <map role="options" size="0"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <true/>
             <true/>
            </choose>
            <let line="1321" var="Q{}actions" as="map(*)*" slot="11" eval="8">
             <treat line="1322" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
              <callT name="Q{}setActions" bSlot="28">
               <withParam name="Q{}this" flags="c" as="element()">
                <dot line="1323" type="element(Q{http://www.w3.org/2002/xforms}input)"/>
               </withParam>
               <withParam name="Q{}nodeset" flags="t" as="xs:string">
                <varRef line="1324" name="Q{}refi" slot="7"/>
               </withParam>
              </callT>
             </treat>
             <sequence line="1329">
              <choose>
               <fn name="exists">
                <varRef name="Q{}actions" slot="11"/>
               </fn>
               <ifCall line="1330" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                <check card="1" diag="0|0||ixsl:call">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                </check>
                <str val="addAction"/>
                <arrayBlock>
                 <varRef name="Q{}myid" slot="3"/>
                 <varRef name="Q{}actions" slot="11"/>
                </arrayBlock>
               </ifCall>
              </choose>
              <elem line="1335" name="div" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
               <sequence>
                <att name="class" flags="l">
                 <str val="xforms-input"/>
                </att>
                <att line="1336" name="style" flags="l">
                 <choose>
                  <varRef name="Q{}relevantVar" slot="9"/>
                  <str val="display:block"/>
                  <true/>
                  <str val="display:none"/>
                 </choose>
                </att>
                <applyT line="1338" bSlot="29">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
                </applyT>
                <let line="1340" var="Q{}hints" as="text()*" slot="12" eval="4">
                 <slash simple="2">
                  <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
                  <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
                 </slash>
                 <elem line="1344" name="input" nsuri="" flags="l" namespaces="xd rdf xhtml js sfp in fn map array ev">
                  <sequence line="1345">
                   <let var="Q{}element" as="element(Q{http://www.w3.org/2002/xforms}input)" slot="13" eval="16">
                    <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
                    <let line="3056" var="Q{}class" as="xs:string?" slot="14" eval="7">
                     <choose line="3057">
                      <fn name="exists">
                       <slash simple="1">
                        <varRef name="Q{}element" slot="13"/>
                        <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                       </slash>
                      </fn>
                      <cvUntyped line="3058" to="xs:string" diag="3|0|XTTE0570|class">
                       <cast as="xs:untypedAtomic" emptiable="0">
                        <fn name="string">
                         <convert from="xs:untypedAtomic" to="xs:string">
                          <data>
                           <slash simple="1">
                            <varRef name="Q{}element" slot="13"/>
                            <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
                           </slash>
                          </data>
                         </convert>
                        </fn>
                       </cast>
                      </cvUntyped>
                     </choose>
                     <let line="3061" var="Q{}class-mod" as="xs:string?" slot="15" eval="7">
                      <choose line="3063">
                       <fn name="exists">
                        <slash simple="1">
                         <varRef name="Q{}element" slot="13"/>
                         <axis name="attribute" nodeTest="attribute(Q{}incremental)" jsTest="return item.name==='incremental'"/>
                        </slash>
                       </fn>
                       <cvUntyped line="3064" to="xs:string" diag="3|0|XTTE0570|class-mod">
                        <cast as="xs:untypedAtomic" emptiable="0">
                         <fn name="string-join">
                          <sequence>
                           <varRef name="Q{}class" slot="14"/>
                           <str val="incremental"/>
                          </sequence>
                          <str val=" "/>
                         </fn>
                        </cast>
                       </cvUntyped>
                       <true/>
                       <varRef line="3067" name="Q{}class" slot="14"/>
                      </choose>
                      <choose line="3071">
                       <fn name="exists">
                        <varRef name="Q{}class-mod" slot="15"/>
                       </fn>
                       <treat line="3072" as="attribute(Q{}class)" jsTest="return item.name==='class'" diag="5|0|XTTE0780|xforms:getClass#1">
                        <att name="class" flags="l">
                         <varRef name="Q{}class-mod" slot="15"/>
                        </att>
                       </treat>
                      </choose>
                     </let>
                    </let>
                   </let>
                   <att line="1346" name="id" flags="l">
                    <varRef name="Q{}myid" slot="3"/>
                   </att>
                   <att line="1348" name="data-ref" flags="l">
                    <varRef name="Q{}refi" slot="7"/>
                   </att>
                   <att line="1349" name="data-element" flags="l">
                    <lastOf line="1342">
                     <fn name="tokenize">
                      <varRef name="Q{}refi" slot="7"/>
                      <str val="/"/>
                      <str val=""/>
                     </fn>
                    </lastOf>
                   </att>
                   <choose line="1351">
                    <and op="and">
                     <fn name="exists">
                      <varRef name="Q{}bindingi" slot="6"/>
                     </fn>
                     <fn name="exists">
                      <slash simple="1">
                       <varRef name="Q{}bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                      </slash>
                     </fn>
                    </and>
                    <att line="1352" name="data-required" flags="l">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <slash simple="1">
                        <varRef name="Q{}bindingi" slot="6"/>
                        <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                       </slash>
                      </data>
                     </convert>
                    </att>
                   </choose>
                   <choose line="1354">
                    <and op="and">
                     <fn name="exists">
                      <varRef name="Q{}bindingi" slot="6"/>
                     </fn>
                     <fn name="exists">
                      <slash simple="1">
                       <varRef name="Q{}bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                      </slash>
                     </fn>
                    </and>
                    <att line="1355" name="data-constraint" flags="l">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <slash simple="1">
                        <varRef name="Q{}bindingi" slot="6"/>
                        <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                       </slash>
                      </data>
                     </convert>
                    </att>
                   </choose>
                   <choose line="1357">
                    <fn name="exists">
                     <varRef name="Q{}actions" slot="11"/>
                    </fn>
                    <att line="1358" name="data-action" flags="l">
                     <varRef name="Q{}myid" slot="3"/>
                    </att>
                   </choose>
                   <choose line="1361">
                    <and op="and">
                     <fn name="exists">
                      <varRef name="Q{}bindingi" slot="6"/>
                     </fn>
                     <fn name="exists">
                      <slash simple="1">
                       <varRef name="Q{}bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                      </slash>
                     </fn>
                    </and>
                    <att line="1362" name="data-relevant" flags="l">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <slash simple="1">
                        <varRef name="Q{}bindingi" slot="6"/>
                        <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                       </slash>
                      </data>
                     </convert>
                    </att>
                   </choose>
                   <let line="1365" var="Q{}input-value" as="xs:string" slot="16" eval="16">
                    <choose line="1367">
                     <fn name="exists">
                      <varRef name="Q{}instanceField" slot="8"/>
                     </fn>
                     <cvUntyped line="1368" to="xs:string" diag="3|0|XTTE0570|input-value">
                      <cast as="xs:untypedAtomic" emptiable="0">
                       <fn name="string">
                        <convert from="xs:anyAtomicType" to="xs:string">
                         <data>
                          <varRef name="Q{}instanceField" slot="8"/>
                         </data>
                        </convert>
                       </fn>
                      </cast>
                     </cvUntyped>
                     <true/>
                     <str val=""/>
                    </choose>
                    <sequence line="1382">
                     <choose>
                      <choose>
                       <fn name="exists">
                        <varRef name="Q{}bindingi" slot="6"/>
                       </fn>
                       <vc op="eq" comp="EQC">
                        <cast as="xs:QName" emptiable="1">
                         <data>
                          <slash simple="1">
                           <varRef name="Q{}bindingi" slot="6"/>
                           <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                          </slash>
                         </data>
                        </cast>
                        <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="date"/>
                       </vc>
                       <true/>
                       <false/>
                      </choose>
                      <sequence line="1383">
                       <att name="data-type" flags="l">
                        <str val="date"/>
                       </att>
                       <att line="1385" name="type" flags="l">
                        <str val="date"/>
                       </att>
                       <att line="1387" name="value" flags="l">
                        <varRef name="Q{}input-value" slot="16"/>
                       </att>
                      </sequence>
                      <choose line="1394">
                       <fn name="exists">
                        <varRef name="Q{}bindingi" slot="6"/>
                       </fn>
                       <vc op="eq" comp="EQC">
                        <cast as="xs:QName" emptiable="1">
                         <data>
                          <slash simple="1">
                           <varRef name="Q{}bindingi" slot="6"/>
                           <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                          </slash>
                         </data>
                        </cast>
                        <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="time"/>
                       </vc>
                       <true/>
                       <false/>
                      </choose>
                      <sequence line="1395">
                       <att name="data-type" flags="l">
                        <str val="time"/>
                       </att>
                       <att line="1397" name="type" flags="l">
                        <str val="time"/>
                       </att>
                       <att line="1400" name="value" flags="l">
                        <varRef name="Q{}input-value" slot="16"/>
                       </att>
                      </sequence>
                      <choose line="1407">
                       <fn name="exists">
                        <varRef name="Q{}bindingi" slot="6"/>
                       </fn>
                       <vc op="eq" comp="EQC">
                        <cast as="xs:QName" emptiable="1">
                         <data>
                          <slash simple="1">
                           <varRef name="Q{}bindingi" slot="6"/>
                           <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                          </slash>
                         </data>
                        </cast>
                        <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="boolean"/>
                       </vc>
                       <true/>
                       <false/>
                      </choose>
                      <sequence line="1408">
                       <att name="data-type" flags="l">
                        <str val="checkbox"/>
                       </att>
                       <att line="1410" name="type" flags="l">
                        <str val="checkbox"/>
                       </att>
                       <choose line="1415">
                        <fn name="exists">
                         <varRef name="Q{}instanceField" slot="8"/>
                        </fn>
                        <choose line="1416">
                         <and op="and">
                          <varRef name="Q{}input-value" slot="16"/>
                          <cast as="xs:boolean" emptiable="0">
                           <varRef name="Q{}input-value" slot="16"/>
                          </cast>
                         </and>
                         <att line="1417" name="checked" flags="l">
                          <varRef name="Q{}input-value" slot="16"/>
                         </att>
                        </choose>
                       </choose>
                      </sequence>
                      <true/>
                      <sequence line="1423">
                       <choose>
                        <varRef name="Q{}relevantVar" slot="9"/>
                        <att line="1424" name="type" flags="l">
                         <str val="text"/>
                        </att>
                       </choose>
                       <att line="1426" name="value" flags="l">
                        <varRef name="Q{}input-value" slot="16"/>
                       </att>
                      </sequence>
                     </choose>
                     <choose line="1430">
                      <fn name="exists">
                       <varRef name="Q{}hints" slot="12"/>
                      </fn>
                      <att line="1431" name="title" flags="l">
                       <fn name="string-join">
                        <convert from="xs:untypedAtomic" to="xs:string">
                         <data>
                          <mergeAdj>
                           <varRef name="Q{}hints" slot="12"/>
                          </mergeAdj>
                         </data>
                        </convert>
                        <str val=" "/>
                       </fn>
                      </att>
                     </choose>
                     <choose line="1433">
                      <fn name="exists">
                       <axis name="attribute" nodeTest="attribute(Q{}size)" jsTest="return item.name==='size'"/>
                      </fn>
                      <att line="1434" name="size" flags="l">
                       <convert from="xs:untypedAtomic" to="xs:string">
                        <attVal name="Q{}size" chk="0"/>
                       </convert>
                      </att>
                     </choose>
                    </sequence>
                   </let>
                  </sequence>
                 </elem>
                </let>
               </sequence>
              </elem>
             </sequence>
            </let>
           </let>
          </let>
         </let>
        </let>
       </sequence>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="11" rank="3" minImp="0" slots="10" flags="s" line="1452" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}textarea)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='textarea';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1453">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1454" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1458" var="Q{}myid" as="xs:string" slot="2" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
        </fn>
        <str val="-"/>
        <choose line="1456">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="1460">
       <choose>
        <and op="and">
         <let var="Q{}this" as="element(Q{http://www.w3.org/2002/xforms}textarea)" slot="3" eval="16">
          <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
          <fn line="2990" name="exists">
           <sequence line="2965">
            <analyzeString>
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2968">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
            <analyzeString line="2977">
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2980">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
           </sequence>
          </fn>
         </let>
         <fn name="empty">
          <filter flags="b">
           <slash simple="1">
            <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <let var="Q{}this" as="element()" slot="4" eval="16">
            <dot type="element()"/>
            <fn line="2990" name="exists">
             <sequence line="2965">
              <analyzeString>
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2968">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
              <analyzeString line="2977">
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2980">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
             </sequence>
            </fn>
           </let>
          </filter>
         </fn>
        </and>
        <ifCall line="1461" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setElementUsingIndexFunction"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="2"/>
          <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="1465" var="Q{}bindingi" as="node()?" slot="5" eval="7">
        <treat line="1466" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="Q{}getBinding" bSlot="30">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="1467" type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <let line="1472" var="Q{}refi" as="xs:string" slot="6" eval="16">
         <treat line="1473" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
          <check card="1" diag="3|0|XTTE0570|refi">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
            <data>
             <callT name="Q{}getDataRef" bSlot="31">
              <withParam name="Q{}this" flags="c" as="element()">
               <dot line="1474" type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
              </withParam>
              <withParam name="Q{}bindingi" flags="c" as="node()?">
               <varRef line="1475" name="Q{}bindingi" slot="5"/>
              </withParam>
             </callT>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="1480" var="Q{}instanceField" as="node()?" slot="7" eval="7">
          <treat line="1481" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
           <check card="?" diag="3|0|XTTE0570|instanceField">
            <callT name="Q{}getReferencedInstanceField" bSlot="32">
             <withParam name="Q{}refi" flags="c" as="xs:string">
              <varRef line="1482" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </check>
          </treat>
          <let line="1487" var="Q{}actions" as="map(*)*" slot="8" eval="8">
           <treat line="1488" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
            <callT name="Q{}setActions" bSlot="33">
             <withParam name="Q{}this" flags="c" as="element()">
              <dot line="1489" type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
             </withParam>
             <withParam name="Q{}nodeset" flags="t" as="xs:string">
              <varRef line="1490" name="Q{}refi" slot="6"/>
             </withParam>
            </callT>
           </treat>
           <sequence line="1494">
            <choose>
             <fn name="exists">
              <varRef name="Q{}actions" slot="8"/>
             </fn>
             <ifCall line="1495" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="Q{}myid" slot="2"/>
               <varRef name="Q{}actions" slot="8"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <let line="1500" var="Q{}hints" as="text()*" slot="9" eval="4">
             <slash simple="2">
              <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </slash>
             <elem line="1502" name="textarea" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
              <sequence line="1503">
               <copyOf flags="vc">
                <filter flags="b">
                 <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                 <vc op="ne" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="attribute()"/>
                  </fn>
                  <str val="ref"/>
                 </vc>
                </filter>
               </copyOf>
               <att line="1504" name="data-element" flags="l">
                <lastOf line="1498">
                 <fn name="tokenize">
                  <varRef name="Q{}refi" slot="6"/>
                  <str val="/"/>
                  <str val=""/>
                 </fn>
                </lastOf>
               </att>
               <att line="1505" name="data-ref" flags="l">
                <varRef name="Q{}refi" slot="6"/>
               </att>
               <choose line="1507">
                <fn name="exists">
                 <varRef name="Q{}instanceField" slot="7"/>
                </fn>
                <valueOf line="1508" flags="l">
                 <convert from="xs:anyAtomicType" to="xs:string">
                  <data>
                   <varRef name="Q{}instanceField" slot="7"/>
                  </data>
                 </convert>
                </valueOf>
                <true/>
                <sequence line="1510">
                 <valueOf flags="Sl">
                  <str val=""/>
                 </valueOf>
                 <valueOf flags="l">
                  <str val="  "/>
                 </valueOf>
                </sequence>
               </choose>
               <choose line="1513">
                <fn name="exists">
                 <varRef name="Q{}hints" slot="9"/>
                </fn>
                <att line="1514" name="title" flags="l">
                 <fn name="string-join">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <mergeAdj>
                     <varRef name="Q{}hints" slot="9"/>
                    </mergeAdj>
                   </data>
                  </convert>
                  <str val=" "/>
                 </fn>
                </att>
               </choose>
              </sequence>
             </elem>
            </let>
           </sequence>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="24" rank="1" minImp="0" slots="9" flags="s" line="2029" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}trigger)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='trigger';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2030">
     <param name="Q{}position" slot="0" as="xs:integer">
      <int role="select" val="0"/>
      <treat role="conversion" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="8|0|XTTE0590|position">
       <check card="1" diag="8|0|XTTE0590|position">
        <cvUntyped to="xs:integer" diag="8|0|XTTE0590|position">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="2031" name="Q{}context-position" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|context-position">
       <check card="1" diag="8|0|XTTE0590|context-position">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|context-position">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="2035" var="Q{}myid" as="xs:string" slot="2" eval="16">
      <choose>
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <check card="1" diag="3|0|XTTE0570|myid">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|myid">
         <attVal name="Q{}id" chk="0"/>
        </cvUntyped>
       </check>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
        </fn>
        <str val="-"/>
        <choose line="2033">
         <varRef name="Q{}context-position" slot="1"/>
         <varRef name="Q{}context-position" slot="1"/>
         <true/>
         <fn name="string">
          <varRef name="Q{}position" slot="0"/>
         </fn>
        </choose>
       </fn>
      </choose>
      <sequence line="2037">
       <choose>
        <and op="and">
         <let var="Q{}this" as="element(Q{http://www.w3.org/2002/xforms}trigger)" slot="3" eval="16">
          <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
          <fn line="2990" name="exists">
           <sequence line="2965">
            <analyzeString>
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2968">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
            <analyzeString line="2977">
             <cvUntyped role="select" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cvUntyped>
             <str role="regex" val="\i\c*\("/>
             <str role="flags" val=""/>
             <choose role="matching" line="2980">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="substring-before">
                <dot type="xs:string"/>
                <str val="("/>
               </fn>
               <str val="index"/>
              </vc>
              <str val="i"/>
             </choose>
             <empty role="nonMatching"/>
            </analyzeString>
           </sequence>
          </fn>
         </let>
         <fn name="empty">
          <filter flags="b">
           <slash simple="1">
            <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
            <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <let var="Q{}this" as="element()" slot="4" eval="16">
            <dot type="element()"/>
            <fn line="2990" name="exists">
             <sequence line="2965">
              <analyzeString>
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2968">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
              <analyzeString line="2977">
               <cvUntyped role="select" to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="4"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
               <str role="regex" val="\i\c*\("/>
               <str role="flags" val=""/>
               <choose role="matching" line="2980">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="substring-before">
                  <dot type="xs:string"/>
                  <str val="("/>
                 </fn>
                 <str val="index"/>
                </vc>
                <str val="i"/>
               </choose>
               <empty role="nonMatching"/>
              </analyzeString>
             </sequence>
            </fn>
           </let>
          </filter>
         </fn>
        </and>
        <ifCall line="2038" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setElementUsingIndexFunction"/>
         <arrayBlock>
          <varRef name="Q{}myid" slot="2"/>
          <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
         </arrayBlock>
        </ifCall>
       </choose>
       <let line="2042" var="Q{}bindingi" as="node()?" slot="5" eval="7">
        <treat line="2043" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="Q{}getBinding" bSlot="34">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="2044" type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <let line="2049" var="Q{}refi" as="xs:string" slot="6" eval="16">
         <treat line="2050" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
          <check card="1" diag="3|0|XTTE0570|refi">
           <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
            <data>
             <callT name="Q{}getDataRef" bSlot="35">
              <withParam name="Q{}this" flags="c" as="element()">
               <dot line="2051" type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
              </withParam>
              <withParam name="Q{}bindingi" flags="c" as="node()?">
               <varRef line="2052" name="Q{}bindingi" slot="5"/>
              </withParam>
             </callT>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <let line="2059" var="Q{}actions" as="map(*)*" slot="7" eval="8">
          <treat line="2060" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
           <callT name="Q{}setActions" bSlot="36">
            <withParam name="Q{}this" flags="c" as="element()">
             <dot line="2061" type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
            </withParam>
            <withParam name="Q{}nodeset" flags="t" as="xs:string">
             <varRef line="2062" name="Q{}refi" slot="6"/>
            </withParam>
           </callT>
          </treat>
          <sequence line="2066">
           <choose>
            <fn name="exists">
             <varRef name="Q{}actions" slot="7"/>
            </fn>
            <ifCall line="2067" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="addAction"/>
             <arrayBlock>
              <varRef name="Q{}myid" slot="2"/>
              <varRef name="Q{}actions" slot="7"/>
             </arrayBlock>
            </ifCall>
           </choose>
           <let line="2070" var="Q{}innerbody" as="document-node()" slot="8" eval="16">
            <doc line="2072" validation="preserve">
             <choose>
              <fn name="exists">
               <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
              </fn>
              <applyT line="2073" bSlot="37">
               <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
              </applyT>
              <true/>
              <valueOf line="2075" flags="l">
               <str val=" "/>
              </valueOf>
             </choose>
            </doc>
            <elem line="2079" name="span" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <str val="display:'inline'"/>
              </att>
              <compElem line="2090" flags="l">
               <choose role="name" line="2082">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}appearance" chk="0"/>
                 </cast>
                 <str val="minimal"/>
                </vc>
                <str val="a"/>
                <true/>
                <str val="button"/>
               </choose>
               <sequence role="content" line="2091">
                <choose>
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <cast as="xs:string" emptiable="1">
                   <attVal name="Q{}appearance" chk="0"/>
                  </cast>
                  <str val="minimal"/>
                 </vc>
                 <att line="2092" name="type" flags="l">
                  <str val="button"/>
                 </att>
                </choose>
                <att line="2095" name="data-ref" flags="l">
                 <varRef name="Q{}refi" slot="6"/>
                </att>
                <att line="2096" name="data-action" flags="l">
                 <varRef name="Q{}myid" slot="2"/>
                </att>
                <copyOf line="2097" flags="vc">
                 <varRef name="Q{}innerbody" slot="8"/>
                </copyOf>
               </sequence>
              </compElem>
             </sequence>
            </elem>
           </let>
          </sequence>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="6" rank="1" minImp="0" slots="0" flags="s" line="1079" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="17" rank="1" minImp="0" slots="1" flags="s" line="1680" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1681">
     <param name="Q{}selectedValue" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|selectedValue">
       <check card="1" diag="8|0|XTTE0590|selectedValue">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|selectedValue">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <elem line="1683" name="option" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
      <sequence>
       <att name="value" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </att>
       <choose line="1684">
        <vc op="eq" onEmpty="0" comp="CCC">
         <varRef name="Q{}selectedValue" slot="0"/>
         <cast as="xs:string" emptiable="1">
          <atomSing card="?" diag="2|0||cast as">
           <slash simple="2">
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </slash>
          </atomSing>
         </cast>
        </vc>
        <att line="1685" name="selected" flags="l">
         <varRef name="Q{}selectedValue" slot="0"/>
        </att>
       </choose>
       <valueOf line="1688" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="25" part="4" rank="1" minImp="0" slots="1" flags="s" line="2111" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2117" var="Q{}action-map" as="map(*)" slot="0" eval="16">
     <treat line="2118" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|action-map">
      <check card="1" diag="3|0|XTTE0570|action-map">
       <callT name="Q{}setAction" bSlot="2">
        <withParam name="Q{}this" flags="c" as="element()">
         <dot line="2119" type="element()"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <varRef line="2132" name="Q{}action-map" slot="0"/>
    </let>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="14" part="1" rank="0" minImp="0" slots="0" flags="s" line="1641" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <copy role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1643" flags="cin">
     <applyT role="content" bSlot="38">
      <sequence role="select">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
      </sequence>
     </applyT>
    </copy>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="15" rank="2" minImp="0" slots="0" flags="s" line="1652" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="text()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;"/>
     <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1652" name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="14" rank="0" minImp="0" slots="0" flags="s" line="1641" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <copy role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1643" flags="cin">
     <applyT role="content" bSlot="38">
      <sequence role="select">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
      </sequence>
     </applyT>
    </copy>
   </templateRule>
  </mode>
 </co>
 <co id="63" binds="62">
  <template name="Q{}getDataRef" flags="os" line="3318" module="saxon-xforms.xsl" slots="11">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3319">
    <param name="Q{}this" slot="0" flags="r" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3320" name="Q{}nodeset" slot="1" flags="t" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
      <check card="1" diag="8|0|XTTE0590|nodeset">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|nodeset">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="3321" name="Q{}bindingi" slot="2" as="node()?">
     <empty role="select"/>
     <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|bindingi">
      <check card="?" diag="8|0|XTTE0590|bindingi">
       <supplied slot="2"/>
      </check>
     </treat>
    </param>
    <let line="3329" var="Q{}this-ref" as="xs:string?" slot="3" eval="7">
     <choose>
      <fn name="exists">
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       </slash>
      </fn>
      <fn name="normalize-space">
       <cast as="xs:string" emptiable="1">
        <data>
         <slash simple="1">
          <varRef name="Q{}this" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
         </slash>
        </data>
       </cast>
      </fn>
      <fn name="exists">
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </slash>
      </fn>
      <fn name="normalize-space">
       <cast as="xs:string" emptiable="1">
        <data>
         <slash simple="1">
          <varRef name="Q{}this" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </slash>
        </data>
       </cast>
      </fn>
     </choose>
     <let line="3332" var="Q{}this-binding-ref" as="xs:string?" slot="4" eval="7">
      <choose line="3334">
       <fn name="exists">
        <varRef name="Q{}bindingi" slot="2"/>
       </fn>
       <cvUntyped line="3345" to="xs:string" diag="3|0|XTTE0570|this-binding-ref">
        <cast as="xs:untypedAtomic" emptiable="0">
         <choose>
          <fn name="exists">
           <slash simple="1">
            <varRef name="Q{}bindingi" slot="2"/>
            <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
           </slash>
          </fn>
          <fn name="normalize-space">
           <cast as="xs:string" emptiable="1">
            <data>
             <slash simple="1">
              <varRef name="Q{}bindingi" slot="2"/>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </data>
           </cast>
          </fn>
          <true/>
          <fn name="normalize-space">
           <cast as="xs:string" emptiable="1">
            <data>
             <slash simple="1">
              <varRef name="Q{}bindingi" slot="2"/>
              <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
             </slash>
            </data>
           </cast>
          </fn>
         </choose>
        </cast>
       </cvUntyped>
       <true/>
       <let line="3349" var="Q{}this-binding" as="node()?" slot="5" eval="7">
        <treat line="3350" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|this-binding">
         <check card="?" diag="3|0|XTTE0570|this-binding">
          <callT name="Q{}getBinding" bSlot="0">
           <withParam name="Q{}this" flags="c" as="element()">
            <treat line="3351" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
             <dot flags="a"/>
            </treat>
           </withParam>
          </callT>
         </check>
        </treat>
        <choose line="3354">
         <fn name="exists">
          <varRef name="Q{}this-binding" slot="5"/>
         </fn>
         <cvUntyped line="3361" to="xs:string" diag="3|0|XTTE0570|this-binding-ref">
          <cast as="xs:untypedAtomic" emptiable="0">
           <choose>
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this-binding" slot="5"/>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </fn>
            <fn name="normalize-space">
             <cast as="xs:string" emptiable="1">
              <data>
               <slash simple="1">
                <varRef name="Q{}this-binding" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cast>
            </fn>
            <true/>
            <fn name="normalize-space">
             <cast as="xs:string" emptiable="1">
              <data>
               <slash simple="1">
                <varRef name="Q{}this-binding" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cast>
            </fn>
           </choose>
          </cast>
         </cvUntyped>
        </choose>
       </let>
      </choose>
      <choose line="3371">
       <fn name="exists">
        <varRef name="Q{}bindingi" slot="2"/>
       </fn>
       <let line="3373" var="Q{}relative" as="xs:string" slot="6" eval="16">
        <check card="1" diag="0|1||xforms:resolveXPathStrings">
         <varRef name="Q{}this-binding-ref" slot="4"/>
        </check>
        <choose line="835">
         <fn name="starts-with">
          <varRef name="Q{}relative" slot="6"/>
          <str val="/"/>
         </fn>
         <varRef line="836" name="Q{}relative" slot="6"/>
         <fn line="838" name="starts-with">
          <varRef name="Q{}relative" slot="6"/>
          <str val="instance("/>
         </fn>
         <varRef line="839" name="Q{}relative" slot="6"/>
         <true/>
         <varRef line="842" name="Q{}relative" slot="6"/>
        </choose>
       </let>
       <fn line="3375" name="exists">
        <varRef name="Q{}this-ref" slot="3"/>
       </fn>
       <let line="3377" var="Q{}relative" as="xs:string" slot="7" eval="16">
        <check card="1" diag="0|1||xforms:resolveXPathStrings">
         <varRef name="Q{}this-ref" slot="3"/>
        </check>
        <choose line="835">
         <fn name="starts-with">
          <varRef name="Q{}relative" slot="7"/>
          <str val="/"/>
         </fn>
         <varRef line="836" name="Q{}relative" slot="7"/>
         <fn line="838" name="starts-with">
          <varRef name="Q{}relative" slot="7"/>
          <str val="instance("/>
         </fn>
         <varRef line="839" name="Q{}relative" slot="7"/>
         <fn line="3377" name="not">
          <varRef name="Q{}nodeset" slot="1"/>
         </fn>
         <varRef line="842" name="Q{}relative" slot="7"/>
         <or line="844" op="or">
          <fn name="not">
           <varRef name="Q{}relative" slot="7"/>
          </fn>
          <vc op="eq" onEmpty="0" comp="CCC">
           <varRef name="Q{}relative" slot="7"/>
           <str val="."/>
          </vc>
         </or>
         <varRef line="3377" name="Q{}nodeset" slot="1"/>
         <true/>
         <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="8" eval="16">
          <choose>
           <fn name="contains">
            <varRef name="Q{}relative" slot="7"/>
            <str val="/"/>
           </fn>
           <fn name="count">
            <filter flags="b">
             <fn name="tokenize">
              <varRef name="Q{}relative" slot="7"/>
              <str val="/"/>
              <str val=""/>
             </fn>
             <vc op="eq" onEmpty="0" comp="CCC">
              <dot type="xs:string"/>
              <str val=".."/>
             </vc>
            </filter>
           </fn>
           <fn name="contains">
            <varRef name="Q{}relative" slot="7"/>
            <str val=".."/>
           </fn>
           <int val="1"/>
           <true/>
           <int val="0"/>
          </choose>
          <let line="852" var="Q{}slashes" as="xs:integer*" slot="9" eval="4">
           <choose>
            <fn line="3377" name="contains">
             <varRef name="Q{}nodeset" slot="1"/>
             <str val="/"/>
            </fn>
            <fn name="index-of">
             <fn name="string-to-codepoints">
              <varRef line="3377" name="Q{}nodeset" slot="1"/>
             </fn>
             <int val="47"/>
            </fn>
            <true/>
            <int val="0"/>
           </choose>
           <choose line="884">
            <compareToInt op="gt" val="0">
             <varRef name="Q{}parentCallCount" slot="8"/>
            </compareToInt>
            <fn line="888" name="concat">
             <fn name="substring">
              <varRef line="3377" name="Q{}nodeset" slot="1"/>
              <int val="1"/>
              <choose line="863">
               <and op="and">
                <vc op="ge" onEmpty="0" comp="CAVC">
                 <fn name="count">
                  <varRef name="Q{}slashes" slot="9"/>
                 </fn>
                 <varRef name="Q{}parentCallCount" slot="8"/>
                </vc>
                <compareToInt op="gt" val="0">
                 <varRef name="Q{}parentCallCount" slot="8"/>
                </compareToInt>
               </and>
               <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="10" eval="13">
                <arith op="-" calc="i-i">
                 <varRef name="Q{}parentCallCount" slot="8"/>
                 <int val="1"/>
                </arith>
                <check card="1" diag="3|0|XTTE0570|parentSlash">
                 <filter flags="p">
                  <varRef name="Q{}slashes" slot="9"/>
                  <arith op="-" calc="i-i">
                   <fn name="last"/>
                   <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="10"/>
                  </arith>
                 </filter>
                </check>
               </let>
               <true/>
               <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
                <lastOf>
                 <varRef name="Q{}slashes" slot="9"/>
                </lastOf>
               </check>
              </choose>
             </fn>
             <fn name="replace">
              <varRef name="Q{}relative" slot="7"/>
              <str val="\.\./"/>
              <str val=""/>
              <str val=""/>
             </fn>
            </fn>
            <true/>
            <fn line="3377" name="concat">
             <varRef name="Q{}nodeset" slot="1"/>
             <str val="/"/>
             <varRef line="891" name="Q{}relative" slot="7"/>
            </fn>
           </choose>
          </let>
         </let>
        </choose>
       </let>
       <varRef line="3379" name="Q{}nodeset" slot="1"/>
       <choose line="3382">
        <fn name="starts-with">
         <varRef name="Q{}nodeset" slot="1"/>
         <str val="/"/>
        </fn>
        <varRef name="Q{}nodeset" slot="1"/>
        <fn name="starts-with">
         <varRef name="Q{}nodeset" slot="1"/>
         <str val="instance("/>
        </fn>
        <varRef name="Q{}nodeset" slot="1"/>
        <true/>
        <varRef name="Q{}nodeset" slot="1"/>
       </choose>
       <true/>
       <cvUntyped line="3386" to="xs:string" diag="3|0|XTTE0570|data-ref">
        <cast as="xs:untypedAtomic" emptiable="0">
         <varRef name="Q{}nodeset" slot="1"/>
        </cast>
       </cvUntyped>
      </choose>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="5" binds="22">
  <function name="Q{http://www.w3.org/2002/xforms}setInstance-JS" line="3227" module="saxon-xforms.xsl" eval="7" flags="pU" as="empty-sequence()" slots="2">
   <arg name="Q{}ref" as="xs:string"/>
   <arg name="Q{}updatedInstance" as="element()"/>
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3235" card="°" diag="5|0|XTTE0780|xforms:setInstance-JS#2">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <str val="setInstance"/>
     <arrayBlock>
      <check line="3233" card="1" diag="3|0|XTTE0570|this-instance-id">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
        <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="0" eval="6">
         <varRef name="Q{}ref" slot="0"/>
        </ufCall>
        <str val="instance-id"/>
       </ifCall>
      </check>
      <varRef name="Q{}updatedInstance" slot="1"/>
     </arrayBlock>
    </ifCall>
   </check>
  </function>
 </co>
 <co id="2" binds="41 22">
  <function name="Q{http://www.w3.org/2002/xforms}getInstance-JS" line="3200" module="saxon-xforms.xsl" eval="7" flags="pU" as="element()?" slots="1">
   <arg name="Q{}ref" as="xs:string"/>
   <tailCallLoop role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3204">
    <choose>
     <fn name="not">
      <varRef name="Q{}ref" slot="0"/>
     </fn>
     <treat line="3205" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="5|0|XTTE0780|xforms:getInstance-JS#1">
      <message>
       <valueOf role="select">
        <str val="[xforms:getInstance-JS] Empty ref supplied, no instance will be returned"/>
       </valueOf>
       <str role="terminate" val="no"/>
       <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
      </message>
     </treat>
     <true/>
     <ufCall line="3210" name="Q{http://www.w3.org/2002/xforms}instance" tailCall="foreign" bSlot="0" eval="16">
      <check line="3208" card="1" diag="3|0|XTTE0570|this-instance-id">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
        <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="1" eval="6">
         <varRef name="Q{}ref" slot="0"/>
        </ufCall>
        <str val="instance-id"/>
       </ifCall>
      </check>
     </ufCall>
    </choose>
   </tailCallLoop>
  </function>
 </co>
 <co id="22" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getInstanceMap" line="3097" module="saxon-xforms.xsl" eval="8" flags="pU" as="map(xs:string, xs:string)" slots="3">
   <arg name="Q{}nodeset" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3118" var="Q{http://saxon.sf.net/generated-variable}v0" as="map(xs:string, xs:string)+" slot="1" eval="4">
    <sequence>
     <map size="1">
      <str val="instance-id"/>
      <str val="saxon-forms-default"/>
     </map>
     <ifCall line="3119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
      <str val="xpath"/>
      <fn name="normalize-space">
       <varRef name="Q{}nodeset" slot="0"/>
      </fn>
     </ifCall>
    </sequence>
    <ifCall line="3102" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
     <analyzeString>
      <fn role="select" name="normalize-space">
       <varRef name="Q{}nodeset" slot="0"/>
      </fn>
      <str role="regex" val="^instance\s*\(\s*'([^']+)'\s*\)\s*(/\s*(.*)|)$"/>
      <str role="flags" val=""/>
      <let role="matching" line="3104" var="Q{}xpath" as="xs:string" slot="2" eval="16">
       <choose line="3106">
        <fn name="regex-group">
         <int val="2"/>
        </fn>
        <fn line="3107" name="regex-group">
         <int val="3"/>
        </fn>
        <true/>
        <str val="."/>
       </choose>
       <sequence line="3114">
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
         <str val="instance-id"/>
         <fn name="regex-group">
          <int val="1"/>
         </fn>
        </ifCall>
        <ifCall line="3115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
         <str val="xpath"/>
         <varRef name="Q{}xpath" slot="2"/>
        </ifCall>
       </sequence>
      </let>
      <varRef role="nonMatching" line="3118" name="Q{http://saxon.sf.net/generated-variable}v0" slot="1"/>
     </analyzeString>
     <map size="2">
      <str val="duplicates"/>
      <str val="reject"/>
      <str val="duplicates-error-code"/>
      <str val="XTDE3365"/>
     </map>
    </ifCall>
   </let>
  </function>
 </co>
 <co id="1" binds="22">
  <function name="Q{http://www.w3.org/2002/xforms}getInstanceId" line="3084" module="saxon-xforms.xsl" eval="8" flags="pU" as="xs:string" slots="1">
   <arg name="Q{}nodeset" as="xs:string"/>
   <cvUntyped role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3087" to="xs:string" diag="5|0|XTTE0780|xforms:getInstanceId#1">
    <cast as="xs:untypedAtomic" emptiable="0">
     <fn name="string">
      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
       <ufCall line="3086" name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="0" eval="6">
        <varRef name="Q{}nodeset" slot="0"/>
       </ufCall>
       <str val="instance-id"/>
      </ifCall>
     </fn>
    </cast>
   </cvUntyped>
  </function>
 </co>
 <co id="65" binds="">
  <globalVariable name="Q{}debugMode" type="xs:boolean" line="73" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <true/>
  </globalVariable>
 </co>
 <co id="66" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getWhileStatement" line="806" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="1">
   <arg name="Q{}map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="809">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="Q{}map" slot="0"/>
     <str val="@while"/>
    </ifCall>
    <treat line="810" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement#1">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement#1">
      <cvUntyped to="xs:string" diag="5|0|XTTE0780|xforms:getWhileStatement#1">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="Q{}map" slot="0"/>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="813" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement#1">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement#1">
      <cvUntyped to="xs:string" diag="5|0|XTTE0780|xforms:getWhileStatement#1">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
          <check card="1" diag="0|0||map:get">
           <lookupAll>
            <varRef name="Q{}map" slot="0"/>
           </lookupAll>
          </check>
         </treat>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="67" binds="2 16 1 19">
  <template name="Q{}DOMActivate" flags="os" line="4361" module="saxon-xforms.xsl" slots="6">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="4362">
    <param name="Q{}form-control" slot="0" flags="i" as="node()">
     <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|form-control">
      <check card="1" diag="8|0|XTTE0590|form-control">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <let line="4364" var="Q{}actions" as="map(*)?" slot="1" eval="7">
     <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getAction"/>
       <arrayBlock>
        <fn name="string">
         <slash simple="1">
          <varRef name="Q{}form-control" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
         </slash>
        </fn>
       </arrayBlock>
      </ifCall>
     </treat>
     <let line="4366" var="Q{}refi" as="attribute(Q{}data-ref)?" slot="2" eval="8">
      <slash simple="1">
       <varRef name="Q{}form-control" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
      </slash>
      <let line="4370" var="Q{}instanceXML" as="element()?" slot="3" eval="7">
       <ufCall name="Q{http://www.w3.org/2002/xforms}getInstance-JS" tailCall="false" bSlot="0" eval="16">
        <check card="1" diag="0|0||xforms:getInstance-JS">
         <cvUntyped to="xs:string">
          <data>
           <varRef name="Q{}refi" slot="2"/>
          </data>
         </cvUntyped>
        </check>
       </ufCall>
       <let line="4372" var="Q{}updatedInstanceXML" as="element()?" slot="4" eval="7">
        <choose line="4373">
         <fn name="exists">
          <varRef name="Q{}instanceXML" slot="3"/>
         </fn>
         <treat line="4374" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|updatedInstanceXML">
          <check card="?" diag="3|0|XTTE0570|updatedInstanceXML">
           <applyT mode="Q{}form-check-initial" bSlot="1">
            <varRef role="select" name="Q{}instanceXML" slot="3"/>
            <withParam name="Q{}instance-id" as="xs:string">
             <ufCall line="4368" name="Q{http://www.w3.org/2002/xforms}getInstanceId" tailCall="false" bSlot="2" eval="16">
              <check card="1" diag="0|0||xforms:getInstanceId">
               <cvUntyped to="xs:string">
                <data>
                 <varRef name="Q{}refi" slot="2"/>
                </data>
               </cvUntyped>
              </check>
             </ufCall>
            </withParam>
           </applyT>
          </check>
         </treat>
        </choose>
        <forEach line="4380">
         <varRef name="Q{}actions" slot="1"/>
         <let line="4381" var="Q{}action-map" as="map(*)" slot="5" eval="16">
          <dot type="map(*)"/>
          <choose line="4384">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <varRef name="Q{}action-map" slot="5"/>
            <str val="@event"/>
           </ifCall>
           <choose line="4385">
            <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
             <data>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <varRef name="Q{}action-map" slot="5"/>
               <str val="@event"/>
              </ifCall>
             </data>
             <str val="DOMActivate"/>
            </gc>
            <callT line="4386" name="Q{}applyActions" bSlot="3" flags="t">
             <withParam name="Q{}action-map" flags="t" as="item()">
              <varRef line="4387" name="Q{}action-map" slot="5"/>
             </withParam>
             <withParam name="Q{}instanceXML" flags="t" as="element()?">
              <varRef line="4388" name="Q{}updatedInstanceXML" slot="4"/>
             </withParam>
            </callT>
           </choose>
          </choose>
         </let>
        </forEach>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="64" binds="42">
  <template name="Q{}setActions" flags="os" line="3635" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3636">
    <param name="Q{}this" slot="0" flags="i" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <applyT line="3638" flags="t" bSlot="0">
     <union role="select" op="|">
      <union op="|">
       <union op="|">
        <union op="|">
         <union op="|">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';"/>
          </slash>
          <filter flags="b">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="child" nodeTest="Q{http://www.w3.org/2002/xforms}*" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.uri==='http://www.w3.org/2002/xforms'"/>
           </slash>
           <gc op="=" card="N:1" comp="CCC">
            <literal count="15">
             <str val="setvalue"/>
             <str val="insert"/>
             <str val="delete"/>
             <str val="setindex"/>
             <str val="toggle"/>
             <str val="setfocus"/>
             <str val="dispatch"/>
             <str val="rebuild"/>
             <str val="recalculate"/>
             <str val="revalidate"/>
             <str val="refresh"/>
             <str val="reset"/>
             <str val="load"/>
             <str val="send"/>
             <str val="message"/>
            </literal>
            <fn name="local-name">
             <dot type="Q{http://www.w3.org/2002/xforms}*"/>
            </fn>
           </gc>
          </filter>
         </union>
         <slash simple="1">
          <varRef name="Q{}this" slot="0"/>
          <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}show)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';"/>
         </slash>
        </union>
        <slash simple="1">
         <varRef name="Q{}this" slot="0"/>
         <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hide)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';"/>
        </slash>
       </union>
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';"/>
       </slash>
      </union>
      <slash simple="1">
       <varRef name="Q{}this" slot="0"/>
       <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}unload)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';"/>
      </slash>
     </union>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id="68" binds="">
  <template name="Q{}serverError" flags="os" line="1058" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1059">
    <param name="Q{}responseMap" slot="0" flags="i" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|responseMap">
      <check card="1" diag="8|0|XTTE0590|responseMap">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <message line="1060">
     <sequence role="select">
      <valueOf>
       <str val="Server side error HTTP response - "/>
      </valueOf>
      <valueOf>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <lookup>
          <varRef name="Q{}responseMap" slot="0"/>
          <str val="status"/>
         </lookup>
        </atomSing>
        <str val=" "/>
        <atomSing card="?" diag="0|2||fn:concat">
         <lookup>
          <varRef name="Q{}responseMap" slot="0"/>
          <str val="message"/>
         </lookup>
        </atomSing>
       </fn>
      </valueOf>
     </sequence>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
   </sequence>
  </template>
 </co>
 <co id="61" binds="62 63 42">
  <template name="Q{}setAction" flags="os" line="3802" module="saxon-xforms.xsl" slots="15">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3803">
    <param name="Q{}this" slot="0" flags="i" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3804" name="Q{}nodeset" slot="1" flags="t">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <let line="3807" var="Q{}bindingi" as="node()?" slot="2" eval="7">
     <treat line="3808" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
      <check card="?" diag="3|0|XTTE0570|bindingi">
       <callT name="Q{}getBinding" bSlot="0">
        <withParam name="Q{}this" flags="c" as="element()">
         <treat line="3809" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
          <dot flags="a"/>
         </treat>
        </withParam>
       </callT>
      </check>
     </treat>
     <let line="3814" var="Q{}refi" as="xs:string" slot="3" eval="16">
      <treat line="3815" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
       <check card="1" diag="3|0|XTTE0570|refi">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
         <data>
          <callT name="Q{}getDataRef" bSlot="1">
           <withParam name="Q{}this" flags="c" as="element()">
            <treat line="3816" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
             <dot flags="a"/>
            </treat>
           </withParam>
           <withParam name="Q{}bindingi" flags="c" as="node()?">
            <varRef line="3817" name="Q{}bindingi" slot="2"/>
           </withParam>
          </callT>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <ifCall line="3825" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
       <sequence>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
         <str val="name"/>
         <fn name="local-name">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
           <dot flags="a"/>
          </treat>
         </fn>
        </ifCall>
        <choose line="3827">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
          </slash>
         </fn>
         <ifCall line="3828" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@value"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3830">
         <and op="and">
          <fn name="empty">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
           </slash>
          </fn>
          <fn name="exists">
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
             <dot flags="a"/>
            </treat>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </slash>
          </fn>
         </and>
         <ifCall line="3831" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="value"/>
          <fn name="string">
           <dot flags="a"/>
          </fn>
         </ifCall>
        </choose>
        <ifCall line="3834" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
         <str val="@ref"/>
         <varRef name="Q{}refi" slot="3"/>
        </ifCall>
        <choose line="3840">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </slash>
         </fn>
         <ifCall line="3841" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@position"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3843">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </slash>
         </fn>
         <ifCall line="3844" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@at"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3848">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </slash>
         </fn>
         <ifCall line="3849" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@if"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3853">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </slash>
         </fn>
         <ifCall line="3854" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@while"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3857">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </slash>
         </fn>
         <ifCall line="3858" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@event"/>
          <fn name="string">
           <check card="?" diag="0|0||fn:string">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </slash>
           </check>
          </fn>
         </ifCall>
        </choose>
        <choose line="3860">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}submission)" jsTest="return item.name==='submission'"/>
          </slash>
         </fn>
         <ifCall line="3861" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@submission"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}submission)" jsTest="return item.name==='submission'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3864">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}model)" jsTest="return item.name==='model'"/>
          </slash>
         </fn>
         <ifCall line="3865" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@model"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}model)" jsTest="return item.name==='model'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3868">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}control)" jsTest="return item.name==='control'"/>
          </slash>
         </fn>
         <ifCall line="3869" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@control"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}control)" jsTest="return item.name==='control'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3872">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}repeat)" jsTest="return item.name==='repeat'"/>
          </slash>
         </fn>
         <ifCall line="3873" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@repeat"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}repeat)" jsTest="return item.name==='repeat'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3876">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}index)" jsTest="return item.name==='index'"/>
          </slash>
         </fn>
         <ifCall line="3877" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@index"/>
          <fn name="string">
           <slash simple="1">
            <varRef name="Q{}this" slot="0"/>
            <axis name="attribute" nodeTest="attribute(Q{}index)" jsTest="return item.name==='index'"/>
           </slash>
          </fn>
         </ifCall>
        </choose>
        <choose line="3882">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}origin)" jsTest="return item.name==='origin'"/>
          </slash>
         </fn>
         <ifCall line="3890" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@origin"/>
          <let line="3886" var="Q{}base" as="xs:string" slot="4" eval="16">
           <choose>
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}context)" jsTest="return item.name==='context'"/>
             </slash>
            </fn>
            <let var="Q{}base" as="xs:string" slot="5" eval="16">
             <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||xforms:resolveXPathStrings">
              <check card="1" diag="0|0||xforms:resolveXPathStrings">
               <cvUntyped to="xs:string">
                <data>
                 <varRef name="Q{}nodeset" slot="1"/>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <let var="Q{}relative" as="xs:string" slot="6" eval="16">
              <check card="1" diag="0|1||xforms:resolveXPathStrings">
               <cvUntyped to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="Q{}this" slot="0"/>
                  <axis name="attribute" nodeTest="attribute(Q{}context)" jsTest="return item.name==='context'"/>
                 </slash>
                </data>
               </cvUntyped>
              </check>
              <choose line="835">
               <fn name="starts-with">
                <varRef name="Q{}relative" slot="6"/>
                <str val="/"/>
               </fn>
               <varRef line="836" name="Q{}relative" slot="6"/>
               <fn line="838" name="starts-with">
                <varRef name="Q{}relative" slot="6"/>
                <str val="instance("/>
               </fn>
               <varRef line="839" name="Q{}relative" slot="6"/>
               <fn line="841" name="not">
                <varRef name="Q{}base" slot="5"/>
               </fn>
               <varRef line="842" name="Q{}relative" slot="6"/>
               <or line="844" op="or">
                <fn name="not">
                 <varRef name="Q{}relative" slot="6"/>
                </fn>
                <vc op="eq" onEmpty="0" comp="CCC">
                 <varRef name="Q{}relative" slot="6"/>
                 <str val="."/>
                </vc>
               </or>
               <varRef line="845" name="Q{}base" slot="5"/>
               <true/>
               <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="7" eval="16">
                <choose>
                 <fn name="contains">
                  <varRef name="Q{}relative" slot="6"/>
                  <str val="/"/>
                 </fn>
                 <fn name="count">
                  <filter flags="b">
                   <fn name="tokenize">
                    <varRef name="Q{}relative" slot="6"/>
                    <str val="/"/>
                    <str val=""/>
                   </fn>
                   <vc op="eq" onEmpty="0" comp="CCC">
                    <dot type="xs:string"/>
                    <str val=".."/>
                   </vc>
                  </filter>
                 </fn>
                 <fn name="contains">
                  <varRef name="Q{}relative" slot="6"/>
                  <str val=".."/>
                 </fn>
                 <int val="1"/>
                 <true/>
                 <int val="0"/>
                </choose>
                <let line="852" var="Q{}slashes" as="xs:integer*" slot="8" eval="4">
                 <choose>
                  <fn name="contains">
                   <varRef name="Q{}base" slot="5"/>
                   <str val="/"/>
                  </fn>
                  <fn name="index-of">
                   <fn name="string-to-codepoints">
                    <varRef name="Q{}base" slot="5"/>
                   </fn>
                   <int val="47"/>
                  </fn>
                  <true/>
                  <int val="0"/>
                 </choose>
                 <choose line="884">
                  <compareToInt op="gt" val="0">
                   <varRef name="Q{}parentCallCount" slot="7"/>
                  </compareToInt>
                  <fn line="888" name="concat">
                   <fn name="substring">
                    <varRef name="Q{}base" slot="5"/>
                    <int val="1"/>
                    <choose line="863">
                     <and op="and">
                      <vc op="ge" onEmpty="0" comp="CAVC">
                       <fn name="count">
                        <varRef name="Q{}slashes" slot="8"/>
                       </fn>
                       <varRef name="Q{}parentCallCount" slot="7"/>
                      </vc>
                      <compareToInt op="gt" val="0">
                       <varRef name="Q{}parentCallCount" slot="7"/>
                      </compareToInt>
                     </and>
                     <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="9" eval="16">
                      <arith op="-" calc="i-i">
                       <varRef name="Q{}parentCallCount" slot="7"/>
                       <int val="1"/>
                      </arith>
                      <check card="1" diag="3|0|XTTE0570|parentSlash">
                       <filter flags="p">
                        <varRef name="Q{}slashes" slot="8"/>
                        <arith op="-" calc="i-i">
                         <fn name="last"/>
                         <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="9"/>
                        </arith>
                       </filter>
                      </check>
                     </let>
                     <true/>
                     <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
                      <lastOf>
                       <varRef name="Q{}slashes" slot="8"/>
                      </lastOf>
                     </check>
                    </choose>
                   </fn>
                   <fn name="replace">
                    <varRef name="Q{}relative" slot="6"/>
                    <str val="\.\./"/>
                    <str val=""/>
                    <str val=""/>
                   </fn>
                  </fn>
                  <true/>
                  <fn line="891" name="concat">
                   <varRef name="Q{}base" slot="5"/>
                   <str val="/"/>
                   <varRef name="Q{}relative" slot="6"/>
                  </fn>
                 </choose>
                </let>
               </let>
              </choose>
             </let>
            </let>
            <true/>
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|origin-context">
             <check card="1" diag="3|0|XTTE0570|origin-context">
              <cvUntyped to="xs:string" diag="3|0|XTTE0570|origin-context">
               <data>
                <varRef name="Q{}nodeset" slot="1"/>
               </data>
              </cvUntyped>
             </check>
            </treat>
           </choose>
           <let line="3888" var="Q{}relative" as="xs:string" slot="10" eval="16">
            <check card="1" diag="0|1||xforms:resolveXPathStrings">
             <cvUntyped to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="Q{}this" slot="0"/>
                <axis name="attribute" nodeTest="attribute(Q{}origin)" jsTest="return item.name==='origin'"/>
               </slash>
              </data>
             </cvUntyped>
            </check>
            <choose line="835">
             <fn name="starts-with">
              <varRef name="Q{}relative" slot="10"/>
              <str val="/"/>
             </fn>
             <varRef line="836" name="Q{}relative" slot="10"/>
             <fn line="838" name="starts-with">
              <varRef name="Q{}relative" slot="10"/>
              <str val="instance("/>
             </fn>
             <varRef line="839" name="Q{}relative" slot="10"/>
             <fn line="841" name="not">
              <varRef name="Q{}base" slot="4"/>
             </fn>
             <varRef line="842" name="Q{}relative" slot="10"/>
             <or line="844" op="or">
              <fn name="not">
               <varRef name="Q{}relative" slot="10"/>
              </fn>
              <vc op="eq" onEmpty="0" comp="CCC">
               <varRef name="Q{}relative" slot="10"/>
               <str val="."/>
              </vc>
             </or>
             <varRef line="845" name="Q{}base" slot="4"/>
             <true/>
             <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="11" eval="16">
              <choose>
               <fn name="contains">
                <varRef name="Q{}relative" slot="10"/>
                <str val="/"/>
               </fn>
               <fn name="count">
                <filter flags="b">
                 <fn name="tokenize">
                  <varRef name="Q{}relative" slot="10"/>
                  <str val="/"/>
                  <str val=""/>
                 </fn>
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <dot type="xs:string"/>
                  <str val=".."/>
                 </vc>
                </filter>
               </fn>
               <fn name="contains">
                <varRef name="Q{}relative" slot="10"/>
                <str val=".."/>
               </fn>
               <int val="1"/>
               <true/>
               <int val="0"/>
              </choose>
              <let line="852" var="Q{}slashes" as="xs:integer*" slot="12" eval="4">
               <choose>
                <fn name="contains">
                 <varRef name="Q{}base" slot="4"/>
                 <str val="/"/>
                </fn>
                <fn name="index-of">
                 <fn name="string-to-codepoints">
                  <varRef name="Q{}base" slot="4"/>
                 </fn>
                 <int val="47"/>
                </fn>
                <true/>
                <int val="0"/>
               </choose>
               <choose line="884">
                <compareToInt op="gt" val="0">
                 <varRef name="Q{}parentCallCount" slot="11"/>
                </compareToInt>
                <fn line="888" name="concat">
                 <fn name="substring">
                  <varRef name="Q{}base" slot="4"/>
                  <int val="1"/>
                  <choose line="863">
                   <and op="and">
                    <vc op="ge" onEmpty="0" comp="CAVC">
                     <fn name="count">
                      <varRef name="Q{}slashes" slot="12"/>
                     </fn>
                     <varRef name="Q{}parentCallCount" slot="11"/>
                    </vc>
                    <compareToInt op="gt" val="0">
                     <varRef name="Q{}parentCallCount" slot="11"/>
                    </compareToInt>
                   </and>
                   <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="13" eval="13">
                    <arith op="-" calc="i-i">
                     <varRef name="Q{}parentCallCount" slot="11"/>
                     <int val="1"/>
                    </arith>
                    <check card="1" diag="3|0|XTTE0570|parentSlash">
                     <filter flags="p">
                      <varRef name="Q{}slashes" slot="12"/>
                      <arith op="-" calc="i-i">
                       <fn name="last"/>
                       <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="13"/>
                      </arith>
                     </filter>
                    </check>
                   </let>
                   <true/>
                   <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
                    <lastOf>
                     <varRef name="Q{}slashes" slot="12"/>
                    </lastOf>
                   </check>
                  </choose>
                 </fn>
                 <fn name="replace">
                  <varRef name="Q{}relative" slot="10"/>
                  <str val="\.\./"/>
                  <str val=""/>
                  <str val=""/>
                 </fn>
                </fn>
                <true/>
                <fn line="891" name="concat">
                 <varRef name="Q{}base" slot="4"/>
                 <str val="/"/>
                 <varRef name="Q{}relative" slot="10"/>
                </fn>
               </choose>
              </let>
             </let>
            </choose>
           </let>
          </let>
         </ifCall>
        </choose>
        <choose line="3894">
         <fn name="exists">
          <slash simple="1">
           <varRef name="Q{}this" slot="0"/>
           <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          </slash>
         </fn>
         <ifCall line="3895" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="nested-actions"/>
          <let line="3896" var="Q{}array" as="map(*)*" slot="14" eval="3">
           <treat line="3897" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|array">
            <forEach>
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <applyT line="3898" bSlot="2">
              <dot role="select" type="element()"/>
             </applyT>
            </forEach>
           </treat>
           <ifCall line="3901" name="Q{http://www.w3.org/2005/xpath-functions/array}_from-sequence" type="array(*)">
            <varRef name="Q{}array" slot="14"/>
           </ifCall>
          </let>
         </ifCall>
        </choose>
       </sequence>
       <map size="2">
        <str val="duplicates"/>
        <str val="reject"/>
        <str val="duplicates-error-code"/>
        <str val="XTDE3365"/>
       </map>
      </ifCall>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="69" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-constraints-on-fields" line="956" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="4">
   <arg name="Q{}updatedInstanceXML" as="document-node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="959" var="Q{}constraint-fieldsi" as="element()*" slot="1" eval="8">
    <filter flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-constraint)" jsTest="return item.name==='data-constraint'"/>
     </fn>
    </filter>
    <forEach line="963">
     <varRef name="Q{}constraint-fieldsi" slot="1"/>
     <let line="964" var="Q{}contexti" as="node()" slot="2" eval="16">
      <treat line="965" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|contexti">
       <check card="1" diag="3|0|XTTE0570|contexti">
        <evaluate dxns="">
         <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
          <cvUntyped to="xs:string">
           <attVal name="Q{}data-ref" chk="0"/>
          </cvUntyped>
         </check>
         <varRef role="cxt" name="Q{}updatedInstanceXML" slot="0"/>
         <varRef role="nsCxt" name="Q{}updatedInstanceXML" slot="0"/>
         <str role="sa" val="no"/>
         <map role="options" size="0"/>
         <map role="wp" size="0"/>
        </evaluate>
       </check>
      </treat>
      <let line="968" var="Q{}resulti" as="xs:boolean" slot="3" eval="16">
       <treat line="971" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|resulti">
        <check card="1" diag="3|0|XTTE0570|resulti">
         <cvUntyped to="xs:boolean" diag="3|0|XTTE0570|resulti">
          <data>
           <evaluate dxns="">
            <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
             <cvUntyped to="xs:string">
              <attVal name="Q{}data-constraint" chk="0"/>
             </cvUntyped>
            </check>
            <varRef role="cxt" name="Q{}contexti" slot="2"/>
            <varRef role="nsCxt" name="Q{}contexti" slot="2"/>
            <str role="sa" val="no"/>
            <map role="options" size="0"/>
            <map role="wp" size="0"/>
           </evaluate>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <choose line="979">
        <fn name="not">
         <varRef name="Q{}resulti" slot="3"/>
        </fn>
        <dot type="element()"/>
       </choose>
      </let>
     </let>
    </forEach>
   </let>
  </function>
 </co>
 <co id="48" binds="57">
  <mode name="Q{}binding-calculation-initial" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="28" rank="0" minImp="0" slots="2" flags="s" line="2709" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2710">
     <param name="Q{}instance-id" slot="0" as="xs:string">
      <str role="select" val="saxon-forms-default"/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|instance-id">
       <check card="1" diag="8|0|XTTE0590|instance-id">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|instance-id">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="2712" var="Q{}calculationMap" as="map(xs:string, xs:string)" slot="1" eval="16">
      <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|calculationMap">
       <check card="1" diag="3|0|XTTE0570|calculationMap">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getCalculationMap"/>
         <array size="0"/>
        </ifCall>
       </check>
      </treat>
      <copy line="2726" flags="cin">
       <applyT role="content" mode="Q{}binding-calculation" bSlot="0">
        <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        <withParam name="Q{}curPath" as="xs:string">
         <choose line="2716">
          <vc op="eq" onEmpty="0" comp="CCC">
           <varRef name="Q{}instance-id" slot="0"/>
           <str val="saxon-forms-default"/>
          </vc>
          <str val=""/>
          <true/>
          <cvUntyped line="2720" to="xs:string" diag="3|0|XTTE0570|curPath">
           <cast as="xs:untypedAtomic" emptiable="0">
            <fn name="concat">
             <str val="instance('"/>
             <varRef name="Q{}instance-id" slot="0"/>
             <str val="')/"/>
            </fn>
           </cast>
          </cvUntyped>
         </choose>
        </withParam>
        <withParam name="Q{}calculationMap" flags="t" as="map(xs:string, xs:string)">
         <varRef line="2728" name="Q{}calculationMap" slot="1"/>
        </withParam>
       </applyT>
      </copy>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="70" binds="18 18">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onchange" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="0" flags="s" line="709" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="710" name="Q{}xforms-value-changed" bSlot="0" flags="t">
     <withParam name="Q{}form-control" flags="c" as="node()">
      <dot line="711" type="element(Q{}input)"/>
     </withParam>
    </callT>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="0" minImp="0" slots="0" flags="s" line="719" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="720" name="Q{}xforms-value-changed" bSlot="1" flags="t">
     <withParam name="Q{}form-control" flags="c" as="node()">
      <dot line="721" type="element(Q{}select)"/>
     </withParam>
    </callT>
   </templateRule>
  </mode>
 </co>
 <co id="54" binds="46 71 58 58 72 42">
  <template name="Q{}xformsjs-main" flags="os" line="111" module="saxon-xforms.xsl" slots="23">
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="607" var="Q{http://saxon.sf.net/generated-variable}v1" as="item()" slot="5" eval="13">
    <check card="1" diag="0|0||ixsl:call">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
    </check>
    <let line="577" var="Q{http://saxon.sf.net/generated-variable}v0" as="item()" slot="6" eval="13">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <sequence line="112">
      <param name="Q{}xforms-doc" slot="0" as="document-node()?">
       <empty role="select"/>
       <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
        <check card="?" diag="8|0|XTTE0590|xforms-doc">
         <supplied slot="0"/>
        </check>
       </treat>
      </param>
      <param line="113" name="Q{}xforms-file" slot="1" as="xs:string?">
       <empty role="select"/>
       <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xforms-file">
        <check card="?" diag="8|0|XTTE0590|xforms-file">
         <cvUntyped to="xs:string" diag="8|0|XTTE0590|xforms-file">
          <data>
           <supplied slot="1"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
      </param>
      <param line="122" name="Q{}instance-xml" slot="2" as="document-node()*">
       <empty role="select"/>
       <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|instance-xml">
        <supplied slot="2"/>
       </treat>
      </param>
      <param line="123" name="Q{}instance-docs" slot="3" as="map(*)?">
       <empty role="select"/>
       <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|instance-docs">
        <check card="?" diag="8|0|XTTE0590|instance-docs">
         <supplied slot="3"/>
        </check>
       </treat>
      </param>
      <param line="125" name="Q{}xFormsId" slot="4" as="xs:string">
       <gVarRef role="select" name="Q{}xform-html-id" bSlot="0"/>
       <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xFormsId">
        <check card="1" diag="8|0|XTTE0590|xFormsId">
         <cvUntyped to="xs:string" diag="8|0|XTTE0590|xFormsId">
          <data>
           <supplied slot="4"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
      </param>
      <message line="127">
       <valueOf role="select">
        <str val="[xformsjs-main] START"/>
       </valueOf>
       <str role="terminate" val="no"/>
       <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
      </message>
      <let line="135" var="Q{}xforms-doci" as="document-node()?" slot="7" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="Q{}xforms-doc" slot="0"/>
        </fn>
        <fn name="doc">
         <varRef name="Q{}xforms-file" slot="1"/>
        </fn>
        <true/>
        <varRef name="Q{}xforms-doc" slot="0"/>
       </choose>
       <let line="137" var="Q{}xform" as="element(Q{http://www.w3.org/2002/xforms}xform, Q{http://www.w3.org/2001/XMLSchema}untyped)" slot="8" eval="16">
        <treat as="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';" diag="3|0|XTTE0570|xform">
         <let var="Q{}this" as="element()" slot="9" eval="16">
          <check card="1" diag="0|0||xforms:addNamespaceDeclarations">
           <slash simple="1">
            <varRef name="Q{}xforms-doci" slot="7"/>
            <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
          </check>
          <compElem line="3000">
           <fn role="name" name="name">
            <varRef name="Q{}this" slot="9"/>
           </fn>
           <sequence role="content" line="3001">
            <namespace flags="l">
             <str role="name" val="xforms"/>
             <str role="select" val="http://www.w3.org/2002/xforms"/>
            </namespace>
            <forEach line="3002">
             <filter flags="b">
              <filter flags="b">
               <slash simple="1">
                <varRef name="Q{}this" slot="9"/>
                <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
               <fn name="boolean">
                <fn name="namespace-uri">
                 <dot type="element()"/>
                </fn>
               </fn>
              </filter>
              <fn name="not">
               <gc op="=" card="N:1" comp="CCC">
                <sequence>
                 <slash>
                  <fn name="reverse">
                   <axis name="ancestor" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                  </fn>
                  <fn name="namespace-uri">
                   <dot type="element()"/>
                  </fn>
                 </slash>
                 <slash>
                  <fn name="reverse">
                   <axis name="preceding" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                  </fn>
                  <fn name="namespace-uri">
                   <dot type="element()"/>
                  </fn>
                 </slash>
                </sequence>
                <fn name="namespace-uri">
                 <dot type="element()"/>
                </fn>
               </gc>
              </fn>
             </filter>
             <namespace line="3005" flags="l">
              <fn role="name" line="3004" name="substring-before">
               <fn name="name">
                <dot type="element()"/>
               </fn>
               <str val=":"/>
              </fn>
              <convert role="select" from="xs:anyURI" to="xs:string">
               <fn line="3003" name="namespace-uri">
                <dot type="element()"/>
               </fn>
              </convert>
             </namespace>
            </forEach>
            <copyOf line="3007" flags="vc">
             <sequence>
              <slash simple="1">
               <varRef name="Q{}this" slot="9"/>
               <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
              </slash>
              <slash simple="1">
               <varRef name="Q{}this" slot="9"/>
               <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
              </slash>
             </sequence>
            </copyOf>
           </sequence>
          </compElem>
         </let>
        </treat>
        <let line="141" var="Q{}xforms-instances" as="map(xs:string, element())" slot="10" eval="16">
         <choose line="143">
          <fn name="empty">
           <varRef name="Q{}instance-docs" slot="3"/>
          </fn>
          <treat line="146" as="map(xs:string, element())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|xforms-instances">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
            <choose>
             <fn name="empty">
              <varRef name="Q{}instance-xml" slot="2"/>
             </fn>
             <let line="147" var="Q{}instances" as="element(Q{http://www.w3.org/2002/xforms}instance)*" slot="11" eval="4">
              <slash simple="2">
               <slash simple="2">
                <slash simple="1">
                 <varRef name="Q{}xforms-doci" slot="7"/>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
               </slash>
               <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
              </slash>
              <sequence line="148">
               <choose>
                <fn name="exists">
                 <filter flags="b">
                  <varRef name="Q{}instances" slot="11"/>
                  <fn name="empty">
                   <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                  </fn>
                 </filter>
                </fn>
                <treat line="150" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="20|0|XTTE3375|xsl:map sequence constructor">
                 <message>
                  <str role="select" val="[xformsjs-main] FATAL ERROR: The XForm contains more than one instance with no ID. At most one instance may have no ID."/>
                  <str role="terminate" val="yes"/>
                  <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                 </message>
                </treat>
               </choose>
               <forEach line="153">
                <varRef name="Q{}instances" slot="11"/>
                <let line="154" var="Q{}instance-with-explicit-namespaces" as="element()" slot="12" eval="16">
                 <treat line="155" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|instance-with-explicit-namespaces">
                  <check card="1" diag="3|0|XTTE0570|instance-with-explicit-namespaces">
                   <applyT mode="Q{}namespace-fix" bSlot="1">
                    <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                   </applyT>
                  </check>
                 </treat>
                 <ifCall line="164" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                  <check card="1" diag="0|0||map:entry">
                   <cast as="xs:string" emptiable="1">
                    <choose>
                     <fn name="exists">
                      <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                     </fn>
                     <attVal name="Q{}id" chk="0"/>
                     <true/>
                     <str val="saxon-forms-default"/>
                    </choose>
                   </cast>
                  </check>
                  <varRef name="Q{}instance-with-explicit-namespaces" slot="12"/>
                 </ifCall>
                </let>
               </forEach>
              </sequence>
             </let>
             <true/>
             <ifCall line="174" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
              <check card="1" diag="0|0||map:entry">
               <cast as="xs:string" emptiable="1">
                <choose>
                 <fn name="exists">
                  <slash simple="2">
                   <slash simple="2">
                    <varRef name="Q{}instance-xml" slot="2"/>
                    <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                   </slash>
                   <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                  </slash>
                 </fn>
                 <atomSing card="?" diag="2|0||cast as">
                  <slash simple="2">
                   <conditionalSort>
                    <fn name="exists">
                     <tail start="2">
                      <varRef name="Q{}instance-xml" slot="2"/>
                     </tail>
                    </fn>
                    <docOrder intra="0">
                     <slash simple="2">
                      <varRef name="Q{}instance-xml" slot="2"/>
                      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                     </slash>
                    </docOrder>
                   </conditionalSort>
                   <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                  </slash>
                 </atomSing>
                 <true/>
                 <str val="saxon-forms-default"/>
                </choose>
               </cast>
              </check>
              <conditionalSort>
               <fn name="exists">
                <tail start="2">
                 <varRef name="Q{}instance-xml" slot="2"/>
                </tail>
               </fn>
               <docOrder intra="0">
                <slash simple="2">
                 <varRef name="Q{}instance-xml" slot="2"/>
                 <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </slash>
               </docOrder>
              </conditionalSort>
             </ifCall>
            </choose>
            <map size="2">
             <str val="duplicates"/>
             <str val="reject"/>
             <str val="duplicates-error-code"/>
             <str val="XTDE3365"/>
            </map>
           </ifCall>
          </treat>
          <true/>
          <treat line="180" as="map(xs:string, element())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|xforms-instances">
           <check card="1" diag="3|0|XTTE0570|xforms-instances">
            <varRef name="Q{}instance-docs" slot="3"/>
           </check>
          </treat>
         </choose>
         <let line="187" var="Q{}default-instance" as="element()" slot="13" eval="16">
          <choose line="189">
           <fn name="empty">
            <varRef name="Q{}instance-docs" slot="3"/>
           </fn>
           <choose line="191">
            <fn name="exists">
             <filter flags="b">
              <slash simple="2">
               <slash simple="2">
                <slash simple="1">
                 <varRef name="Q{}xforms-doci" slot="7"/>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
               </slash>
               <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
              </slash>
              <fn name="empty">
               <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              </fn>
             </filter>
            </fn>
            <check line="192" card="1" diag="3|0|XTTE0570|default-instance">
             <slash simple="2">
              <slash>
               <slash simple="2">
                <slash simple="1">
                 <varRef name="Q{}xforms-doci" slot="7"/>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
               </slash>
               <first>
                <filter flags="b">
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
                 <fn name="empty">
                  <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                 </fn>
                </filter>
               </first>
              </slash>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
            </check>
            <true/>
            <check line="195" card="1" diag="3|0|XTTE0570|default-instance">
             <slash simple="2">
              <slash>
               <slash simple="2">
                <slash simple="1">
                 <varRef name="Q{}xforms-doci" slot="7"/>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
               </slash>
               <first>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
               </first>
              </slash>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
            </check>
           </choose>
           <true/>
           <treat line="201" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="3|0|XTTE0570|default-instance">
            <check card="1" diag="3|0|XTTE0570|default-instance">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="getDefaultInstance"/>
              <array size="0"/>
             </ifCall>
            </check>
           </treat>
          </choose>
          <let line="207" var="Q{}bindings" as="map(xs:string, element(Q{http://www.w3.org/2002/xforms}bind))" slot="14" eval="8">
           <ifCall line="209" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
            <forEach>
             <slash simple="2">
              <slash simple="2">
               <slash simple="1">
                <varRef name="Q{}xforms-doci" slot="7"/>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
               </slash>
               <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
              </slash>
              <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}bind)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='bind';"/>
             </slash>
             <ifCall line="217" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
              <check card="1" diag="0|0||map:entry">
               <cast as="xs:string" emptiable="1">
                <choose>
                 <fn name="exists">
                  <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                 </fn>
                 <attVal name="Q{}id" chk="0"/>
                 <true/>
                 <attVal name="Q{}nodeset" chk="0"/>
                </choose>
               </cast>
              </check>
              <dot type="element(Q{http://www.w3.org/2002/xforms}bind)"/>
             </ifCall>
            </forEach>
            <map size="2">
             <str val="duplicates"/>
             <str val="reject"/>
             <str val="duplicates-error-code"/>
             <str val="XTDE3365"/>
            </map>
           </ifCall>
           <let line="231" var="Q{}bindingKeys" as="xs:anyAtomicType*" slot="15" eval="3">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
             <varRef name="Q{}bindings" slot="14"/>
            </ifCall>
            <let line="233" var="Q{}RelevantBindings" as="map(xs:string, xs:string)" slot="16" eval="16">
             <treat line="235" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|RelevantBindings">
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
               <forEach>
                <varRef name="Q{}bindingKeys" slot="15"/>
                <let line="236" var="Q{}bindingNode" as="element(Q{http://www.w3.org/2002/xforms}bind)" slot="17" eval="16">
                 <check card="1" diag="3|0|XTTE0570|bindingNode">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <varRef name="Q{}bindings" slot="14"/>
                   <cast as="xs:string" emptiable="0">
                    <dot type="xs:anyAtomicType"/>
                   </cast>
                  </ifCall>
                 </check>
                 <choose line="238">
                  <fn name="exists">
                   <filter flags="b">
                    <varRef name="Q{}bindingNode" slot="17"/>
                    <fn name="exists">
                     <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                    </fn>
                   </filter>
                  </fn>
                  <ifCall line="240" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                   <check line="239" card="1" diag="3|0|XTTE0570|keyi">
                    <cast as="xs:string" emptiable="1">
                     <data>
                      <slash simple="1">
                       <varRef name="Q{}bindingNode" slot="17"/>
                       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                      </slash>
                     </data>
                    </cast>
                   </check>
                   <cast as="xs:string" emptiable="1">
                    <data>
                     <slash simple="1">
                      <varRef name="Q{}bindingNode" slot="17"/>
                      <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                     </slash>
                    </data>
                   </cast>
                  </ifCall>
                 </choose>
                </let>
               </forEach>
               <map size="2">
                <str val="duplicates"/>
                <str val="reject"/>
                <str val="duplicates-error-code"/>
                <str val="XTDE3365"/>
               </map>
              </ifCall>
             </treat>
             <let line="249" var="Q{}CalculationBindings" as="map(xs:string, xs:string)" slot="18" eval="16">
              <treat line="251" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|CalculationBindings">
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
                <forEach>
                 <varRef name="Q{}bindingKeys" slot="15"/>
                 <let line="252" var="Q{}bindingNode" as="element(Q{http://www.w3.org/2002/xforms}bind)" slot="19" eval="16">
                  <check card="1" diag="3|0|XTTE0570|bindingNode">
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <varRef name="Q{}bindings" slot="14"/>
                    <cast as="xs:string" emptiable="0">
                     <dot type="xs:anyAtomicType"/>
                    </cast>
                   </ifCall>
                  </check>
                  <choose line="254">
                   <fn name="exists">
                    <filter flags="b">
                     <varRef name="Q{}bindingNode" slot="19"/>
                     <fn name="exists">
                      <axis name="attribute" nodeTest="attribute(Q{}calculate)" jsTest="return item.name==='calculate'"/>
                     </fn>
                    </filter>
                   </fn>
                   <ifCall line="256" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                    <check line="255" card="1" diag="3|0|XTTE0570|keyi">
                     <cast as="xs:string" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="Q{}bindingNode" slot="19"/>
                        <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                       </slash>
                      </data>
                     </cast>
                    </check>
                    <cast as="xs:string" emptiable="1">
                     <data>
                      <slash simple="1">
                       <varRef name="Q{}bindingNode" slot="19"/>
                       <axis name="attribute" nodeTest="attribute(Q{}calculate)" jsTest="return item.name==='calculate'"/>
                      </slash>
                     </data>
                    </cast>
                   </ifCall>
                  </choose>
                 </let>
                </forEach>
                <map size="2">
                 <str val="duplicates"/>
                 <str val="reject"/>
                 <str val="duplicates-error-code"/>
                 <str val="XTDE3365"/>
                </map>
               </ifCall>
              </treat>
              <sequence line="268">
               <choose>
                <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                 <data>
                  <slash simple="2">
                   <slash simple="1">
                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                    <axis name="descendant" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
                   </slash>
                   <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                  </slash>
                 </data>
                 <data>
                  <gVarRef name="Q{}xforms-cache-id" bSlot="2"/>
                 </data>
                </gc>
                <sequence line="269">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setXFormsDoc"/>
                  <arrayBlock>
                   <varRef name="Q{}xforms-doc" slot="0"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="270" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setXForm"/>
                  <arrayBlock>
                   <varRef name="Q{}xform" slot="8"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="271" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setXFormsID"/>
                  <arrayBlock>
                   <varRef name="Q{}xFormsId" slot="4"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="272" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setRelevantMap"/>
                  <arrayBlock>
                   <varRef name="Q{}RelevantBindings" slot="16"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="273" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setCalculationMap"/>
                  <arrayBlock>
                   <varRef name="Q{}CalculationBindings" slot="18"/>
                  </arrayBlock>
                 </ifCall>
                </sequence>
                <true/>
                <sequence line="284">
                 <forEach>
                  <slash simple="1">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                   <axis name="descendant" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
                  </slash>
                  <resultDoc line="293" global="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;">
                   <str role="href" val="?."/>
                   <elem role="content" line="294" name="script" nsuri="" namespaces="xd rdf xhtml js sfp in fn map array ev">
                    <sequence>
                     <att name="type" flags="l">
                      <str val="text/javascript"/>
                     </att>
                     <att name="id" flags="l">
                      <fn name="string-join">
                       <convert from="xs:anyAtomicType" to="xs:string">
                        <data>
                         <mergeAdj>
                          <gVarRef name="Q{}xforms-cache-id" bSlot="3"/>
                         </mergeAdj>
                        </data>
                       </convert>
                       <str val=" "/>
                      </fn>
                     </att>
                     <valueOf flags="l">
                      <str val="                &#xA;                            var XFormsDoc = null;&#xA;                            var XForm = null;&#xA;                            var defaultInstanceDoc = null;&#xA;                            &#xA;                            // MD 2018: OND's suggestion for multiple instances&#xA;                            var instanceDocs = {};&#xA;                            &#xA;                            var pendingUpdatesMap = null;&#xA;                            var updatesMap = null;&#xA;                            var XFormsID = '"/>
                     </valueOf>
                     <valueOf line="304" flags="l">
                      <varRef name="Q{}xFormsId" slot="4"/>
                     </valueOf>
                     <valueOf flags="l">
                      <str val="';&#xA;                            var actions = {};&#xA;                            var submissions = {};&#xA;                            var outputs = {};&#xA;                            var repeats = {};&#xA;                            var relevantMap = {};&#xA;                            var calculationMap = {};&#xA;                            var repeatIndexMap = {};&#xA;                            var repeatSizeMap = {};&#xA;                            var elementsUsingIndexFunction = {};&#xA;                            &#xA;                            var getCurrentDate = function(){&#xA;                                var today = new Date();&#xA;                                var dd = today.getDate();&#xA;                                var mm = today.getMonth()+1; //January is 0!&#xA;                                var yyyy = today.getFullYear();&#xA;                            &#xA;                                if(dd &lt; 10) {&#xA;                                    dd = '0' + dd;&#xA;                                } &#xA;                            &#xA;                                if(mm &lt; 10) {&#xA;                                    mm = '0' + mm;&#xA;                                } &#xA;                            &#xA;                                today = yyyy + '-' + mm + '-' + dd;&#xA;                                return today;&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var setXFormsDoc = function(doc) {&#xA;                                XFormsDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getXFormsDoc = function() {&#xA;                                return XFormsDoc;&#xA;                            }&#xA;                            &#xA;                            var setXForm = function(element) {&#xA;                                XForm = element;&#xA;                            }&#xA;                            &#xA;                            var getXForm = function() {&#xA;                                return XForm;&#xA;                            }&#xA;                            &#xA;                            var setXFormsID = function(id) {&#xA;                                XFormsID = id;&#xA;                            }&#xA;                            &#xA;                            var getXFormsID = function() {&#xA;                                return XFormsID;&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var setInstance = function(name, value) {&#xA;                                instanceDocs[name] = value;&#xA;                            } &#xA;                            &#xA;                            var getInstance = function(name) {&#xA;                                return instanceDocs[name];&#xA;                            }&#xA;                            &#xA;                            &#xA;                            //[OND] Maybe we can just set the key-&gt; value without having to copy the entire instanceDocs object.&#xA;                            var updateInstance = function(instanceDocs, key, value){&#xA;                                instanceDocs[key] = value;&#xA;                                return instanceDocs;&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var setDefaultInstance = function(doc) {&#xA;                                defaultInstanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getDefaultInstance = function() {&#xA;                                return defaultInstanceDoc;&#xA;                            }&#xA;                            &#xA;                           &#xA;                            var getInstanceKeys = function() {&#xA;                                return Object.keys(instanceDocs);&#xA;                            }&#xA;                            &#xA;                            var getInstances = function() {&#xA;                                return instanceDocs;&#xA;                            }&#xA;                            &#xA;                            var setPendingUpdates = function(map1) {&#xA;                                pendingUpdatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearPendingUpdates = function() {&#xA;                                pendingUpdatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getPendingUpdates = function() {&#xA;                                return pendingUpdatesMap;&#xA;                            }&#xA;                            &#xA;                            var setUpdates = function(map1) {&#xA;                                updatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearUpdates = function() {&#xA;                                updatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getUpdates = function() {&#xA;                                return updatesMap;&#xA;                            }&#xA;                            &#xA;                            var addAction = function(name, value){&#xA;                                actions[name] = value;&#xA;                            }&#xA;&#xA;                            var getAction = function(name){&#xA;                                return actions[name];&#xA;                            }&#xA;                            &#xA;                            var updateAction = function(actioni, key, value){&#xA;                                actioni[key] = value;&#xA;                                return actioni;&#xA;                            }&#xA;                            &#xA;                            var addSubmission = function(name, value){&#xA;                                submissions[name] = value;&#xA;                            }&#xA;                            &#xA;                            var getSubmission = function(name){&#xA;                                return submissions[name];&#xA;                            }     &#xA;                            &#xA;                            var addOutput = function(name, value){&#xA;                                outputs[name] = value;&#xA;                            }&#xA;                            &#xA;                            var getOutput = function(name){&#xA;                                return outputs[name];&#xA;                            }&#xA;                            &#xA;                            var getOutputKeys = function() {&#xA;                                return Object.keys(outputs);&#xA;                            }&#xA;                            &#xA;                            // repeats is a map of HTML IDs to (parsed) xf:repeat/@nodeset values&#xA;                            var addRepeat = function(name, value){&#xA;                                repeats[name] = value;&#xA;                            }&#xA;                            &#xA;                            var getRepeat = function(name){&#xA;                                return repeats[name];&#xA;                            }&#xA;                            &#xA;                            var getRepeatKeys = function() {&#xA;                                return Object.keys(repeats);&#xA;                            }&#xA;                            &#xA;                            var setRelevantMap = function(map1) {&#xA;                                relevantMap = map1;                            &#xA;                            }&#xA;                            &#xA;                            var getRelevantMap = function() {&#xA;                                return relevantMap;&#xA;                            }&#xA;                            &#xA;  &#xA;                            var setCalculationMap = function(map1) {&#xA;                                calculationMap = map1;                            &#xA;                            }&#xA;  &#xA;                            var getCalculationMap = function() {&#xA;                                return calculationMap;&#xA;                            }&#xA;  &#xA;                            &#xA;                            var setRepeatIndex = function(name, value) {&#xA;                                repeatIndexMap[name] = value;&#xA;                            }&#xA;                            &#xA;                            var getRepeatIndex = function(name) {&#xA;                                if ( typeof(repeatIndexMap[name]) != 'undefined' ) {&#xA;                                    return repeatIndexMap[name];&#xA;                                }&#xA;                                else {&#xA;                                    return 0;&#xA;                                }&#xA;                            } &#xA;                            &#xA;                            var setRepeatSize = function(name, value) {&#xA;                                repeatSizeMap[name] = value;&#xA;                            }&#xA;                            &#xA;                            var getRepeatSize = function(name) {&#xA;                                if ( typeof(repeatSizeMap[name]) != 'undefined' ) {&#xA;                                    return repeatSizeMap[name];&#xA;                                }&#xA;                                else {&#xA;                                    return 0;&#xA;                                }&#xA;                            } &#xA;                            &#xA;                            var setElementUsingIndexFunction = function(name, value) {&#xA;                                elementsUsingIndexFunction[name] = value;&#xA;                            } &#xA;                            &#xA;                            var getElementUsingIndexFunction = function(name) {&#xA;                                return elementsUsingIndexFunction[name];&#xA;                            }&#xA;                            &#xA;                            var getElementsUsingIndexFunctionKeys = function() {&#xA;                            return Object.keys(elementsUsingIndexFunction);&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var startTime = function(name) {&#xA;                                console.time(name);&#xA;                            }&#xA;                            &#xA;                            var endTime = function(name) {&#xA;                                console.timeEnd(name);&#xA;                            }&#xA;                            &#xA;                            var highlightClicked = function(id) {&#xA;                                var item = document.getElementById(id);&#xA;                                toggleClass(item);&#xA;                            }&#xA;                            &#xA;                            var toggleClass = function(element) {&#xA;                                if (element.className == 'selected') {&#xA;                                    element.classList.remove('selected');&#xA;                                }&#xA;                                else {&#xA;                                    var x = document.getElementsByClassName('selected');&#xA;                                    var i;&#xA;                                    for (i = 0; i &lt; x.length; i++) {&#xA;                                        x[i].classList.remove('selected');&#xA;                                    } &#xA;                                    element.classList.add('selected');&#xA;                                }&#xA;                            }&#xA;                            &#xA;                            var setFocus = function(id) {&#xA;                                var item = document.getElementById(id);&#xA;                                item.focus();&#xA;                                // alert('setFocus on ' + id);&#xA;                            }&#xA;                            &#xA;                        "/>
                     </valueOf>
                    </sequence>
                   </elem>
                  </resultDoc>
                 </forEach>
                 <ifCall line="556" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setXFormsDoc"/>
                  <arrayBlock>
                   <varRef name="Q{}xforms-doc" slot="0"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="557" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setXForm"/>
                  <arrayBlock>
                   <varRef name="Q{}xform" slot="8"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="558" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setDefaultInstance"/>
                  <arrayBlock>
                   <varRef name="Q{}default-instance" slot="13"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="559" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setRelevantMap"/>
                  <arrayBlock>
                   <varRef name="Q{}RelevantBindings" slot="16"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="560" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setCalculationMap"/>
                  <arrayBlock>
                   <varRef name="Q{}CalculationBindings" slot="18"/>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="565" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setPendingUpdates"/>
                  <arrayBlock>
                   <treat line="562" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
                    <map size="0"/>
                   </treat>
                  </arrayBlock>
                 </ifCall>
                 <ifCall line="566" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setUpdates"/>
                  <arrayBlock>
                   <treat line="563" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
                    <map size="0"/>
                   </treat>
                  </arrayBlock>
                 </ifCall>
                </sequence>
               </choose>
               <forEach line="575">
                <treat line="573" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|instanceKeys">
                 <cvUntyped to="xs:string" diag="3|0|XTTE0570|instanceKeys">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
                   <varRef name="Q{}xforms-instances" slot="10"/>
                  </ifCall>
                 </cvUntyped>
                </treat>
                <ifCall line="577" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                 <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="6"/>
                 <str val="setInstance"/>
                 <arrayBlock>
                  <dot type="xs:string"/>
                  <check line="576" card="1" diag="3|0|XTTE0570|instance">
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <varRef name="Q{}xforms-instances" slot="10"/>
                    <dot type="xs:string"/>
                   </ifCall>
                  </check>
                 </arrayBlock>
                </ifCall>
               </forEach>
               <let line="582" var="Q{}submissions" as="map(xs:string, map(*))" slot="20" eval="8">
                <ifCall line="584" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
                 <forEach>
                  <slash simple="2">
                   <slash simple="2">
                    <slash simple="1">
                     <varRef name="Q{}xforms-doci" slot="7"/>
                     <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                    </slash>
                    <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
                   </slash>
                   <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}submission)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submission';"/>
                  </slash>
                  <let line="588" var="Q{}map-key" as="xs:string" slot="21" eval="16">
                   <choose>
                    <fn name="exists">
                     <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                    </fn>
                    <check card="1" diag="3|0|XTTE0570|map-key">
                     <cast as="xs:string" emptiable="1">
                      <attVal name="Q{}id" chk="0"/>
                     </cast>
                    </check>
                    <true/>
                    <str val="saxon-forms-default-submission"/>
                   </choose>
                   <let line="589" var="Q{}map-value" as="map(*)" slot="22" eval="16">
                    <treat line="590" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|map-value">
                     <check card="1" diag="3|0|XTTE0570|map-value">
                      <callT name="Q{}setSubmission" bSlot="4">
                       <withParam name="Q{}this" flags="c" as="element()">
                        <dot line="591" type="element(Q{http://www.w3.org/2002/xforms}submission)"/>
                       </withParam>
                       <withParam name="Q{}submission-id" flags="c" as="xs:string">
                        <varRef line="592" name="Q{}map-key" slot="21"/>
                       </withParam>
                      </callT>
                     </check>
                    </treat>
                    <ifCall line="595" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                     <varRef name="Q{}map-key" slot="21"/>
                     <varRef name="Q{}map-value" slot="22"/>
                    </ifCall>
                   </let>
                  </let>
                 </forEach>
                 <map size="2">
                  <str val="duplicates"/>
                  <str val="reject"/>
                  <str val="duplicates-error-code"/>
                  <str val="XTDE3365"/>
                 </map>
                </ifCall>
                <sequence line="604">
                 <forEach>
                  <treat line="602" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|submissionKeys">
                   <cvUntyped to="xs:string" diag="3|0|XTTE0570|submissionKeys">
                    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
                     <varRef name="Q{}submissions" slot="20"/>
                    </ifCall>
                   </cvUntyped>
                  </treat>
                  <sequence line="606">
                   <message>
                    <sequence role="select">
                     <valueOf>
                      <str val="Setting submission with ID '"/>
                     </valueOf>
                     <valueOf>
                      <dot type="xs:string"/>
                     </valueOf>
                     <valueOf flags="S">
                      <str val="'"/>
                     </valueOf>
                    </sequence>
                    <str role="terminate" val="no"/>
                    <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                   </message>
                   <ifCall line="607" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                    <varRef name="Q{http://saxon.sf.net/generated-variable}v1" slot="5"/>
                    <str val="addSubmission"/>
                    <arrayBlock>
                     <dot type="xs:string"/>
                     <check line="605" card="1" diag="3|0|XTTE0570|submission">
                      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                       <varRef name="Q{}submissions" slot="20"/>
                       <dot type="xs:string"/>
                      </ifCall>
                     </check>
                    </arrayBlock>
                   </ifCall>
                  </sequence>
                 </forEach>
                 <resultDoc line="616" global="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Sat Feb 22 19:55:54 GMT 2020&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
                  <fn role="href" name="concat">
                   <str val="#"/>
                   <varRef name="Q{}xFormsId" slot="4"/>
                  </fn>
                  <applyT role="content" line="617" bSlot="5">
                   <slash role="select" simple="1">
                    <varRef name="Q{}xforms-doci" slot="7"/>
                    <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                   </slash>
                   <withParam name="Q{}instances" flags="t" as="map(xs:string, element())">
                    <varRef line="618" name="Q{}xforms-instances" slot="10"/>
                   </withParam>
                   <withParam name="Q{}bindings" flags="t" as="map(xs:string, node())">
                    <varRef line="619" name="Q{}bindings" slot="14"/>
                   </withParam>
                   <withParam name="Q{}submissions" flags="t" as="map(xs:string, map(*))">
                    <varRef line="620" name="Q{}submissions" slot="20"/>
                   </withParam>
                   <withParam name="Q{}nodeset" flags="t" as="xs:string">
                    <str val=""/>
                   </withParam>
                  </applyT>
                 </resultDoc>
                </sequence>
               </let>
              </sequence>
             </let>
            </let>
           </let>
          </let>
         </let>
        </let>
       </let>
      </let>
     </sequence>
    </let>
   </let>
  </template>
 </co>
 <co id="71" binds="71">
  <mode name="Q{}namespace-fix" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="31" rank="0" minImp="0" slots="1" flags="s" line="2864" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2865" var="Q{}current-namespace" as="xs:anyURI" slot="0" eval="8">
     <fn name="namespace-uri">
      <dot type="element()"/>
     </fn>
     <compElem line="2867">
      <convert role="name" from="xs:QName" to="xs:string">
       <fn line="2866" name="QName">
        <convert from="xs:anyURI" to="xs:string">
         <varRef name="Q{}current-namespace" slot="0"/>
        </convert>
        <fn name="name">
         <dot type="element()"/>
        </fn>
       </fn>
      </convert>
      <convert role="namespace" from="xs:anyURI" to="xs:string">
       <varRef name="Q{}current-namespace" slot="0"/>
      </convert>
      <sequence role="content" line="2868">
       <namespace flags="l">
        <str role="name" val="xforms"/>
        <str role="select" val="http://www.w3.org/2002/xforms"/>
       </namespace>
       <applyT line="2870" mode="Q{}namespace-fix" bSlot="0">
        <sequence role="select">
         <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        </sequence>
       </applyT>
      </sequence>
     </compElem>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="53" binds="68 5 35">
  <template name="Q{}HTTPsubmit" cxt="map(*)" jsTest="return SaxonJS.U.isMap(item)" flags="s" line="1008" module="saxon-xforms.xsl" slots="5">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="1014">
    <param name="Q{}instance-id" slot="0" as="xs:string">
     <str role="select" val="saxon-forms-default"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|instance-id">
      <check card="1" diag="8|0|XTTE0590|instance-id">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|instance-id">
        <data>
         <supplied slot="0"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="1015" name="Q{}targetref" slot="1" as="xs:string?">
     <empty role="select"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|targetref">
      <check card="?" diag="8|0|XTTE0590|targetref">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|targetref">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="1016" name="Q{}replace" slot="2" as="xs:string?">
     <empty role="select"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|replace">
      <check card="?" diag="8|0|XTTE0590|replace">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|replace">
        <data>
         <supplied slot="2"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="1018" var="Q{}refi" as="xs:string" slot="3" eval="8">
     <fn name="concat">
      <str val="instance('"/>
      <varRef name="Q{}instance-id" slot="0"/>
      <str val="')/"/>
     </fn>
     <let line="1020" var="Q{}responseXML" as="document-node()" slot="4" eval="16">
      <treat as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="3|0|XTTE0570|responseXML">
       <check card="1" diag="3|0|XTTE0570|responseXML">
        <lookup>
         <dot type="map(*)"/>
         <str val="body"/>
        </lookup>
       </check>
      </treat>
      <choose line="1023">
       <fn name="empty">
        <varRef name="Q{}responseXML" slot="4"/>
       </fn>
       <callT line="1024" name="Q{}serverError" bSlot="0" flags="t">
        <withParam name="Q{}responseMap" flags="c" as="map(*)">
         <dot line="1025" type="map(*)"/>
        </withParam>
       </callT>
       <vc line="1037" op="eq" onEmpty="0" comp="CCC">
        <varRef name="Q{}replace" slot="2"/>
        <str val="instance"/>
       </vc>
       <sequence line="1038">
        <ufCall name="Q{http://www.w3.org/2002/xforms}setInstance-JS" tailCall="false" bSlot="1" eval="6 16">
         <varRef name="Q{}refi" slot="3"/>
         <check card="1" diag="0|1||xforms:setInstance-JS">
          <slash simple="1">
           <varRef name="Q{}responseXML" slot="4"/>
           <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          </slash>
         </check>
        </ufCall>
        <callT line="1040" name="Q{}xforms-rebuild" bSlot="2" flags="t"/>
       </sequence>
      </choose>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="41" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}instance" line="126" module="xforms-function-library.xsl" eval="7" flags="pU" as="element()?" slots="1">
   <arg name="Q{}instance-id" as="xs:string"/>
   <treat role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ map=~" line="128" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="5|0|XTTE0780|xforms:instance#1">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <str val="getInstance"/>
     <arrayBlock>
      <varRef name="Q{}instance-id" slot="0"/>
     </arrayBlock>
    </ifCall>
   </treat>
  </function>
 </co>
 <co id="73" binds="49 67 11">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onclick" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="3" rank="0" minImp="0" slots="3" flags="s" line="731" module="saxon-xforms.xsl">
    <p.withUpper role="match" axis="ancestor" upFirst="false">
     <p.withPredicate>
      <p.nodeTest test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
      <or ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="731" op="or">
       <axis name="self" nodeTest="element(Q{}span)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='span';"/>
       <axis name="self" nodeTest="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
      </or>
     </p.withPredicate>
     <p.withPredicate>
      <p.nodeTest test="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
      <vc ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="731" op="eq" onEmpty="0" comp="CCC">
       <cast as="xs:string" emptiable="1">
        <data>
         <axis name="attribute" nodeTest="attribute(Q{}data-repeat-item)" jsTest="return item.name==='data-repeat-item'"/>
        </data>
       </cast>
       <str val="true"/>
      </vc>
     </p.withPredicate>
    </p.withUpper>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="740" var="Q{http://saxon.sf.net/generated-variable}v0" as="item()" slot="0" eval="13">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <sequence line="732">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="highlightClicked"/>
       <arrayBlock>
        <fn name="string">
         <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        </fn>
       </arrayBlock>
      </ifCall>
      <forEach line="735">
       <fn name="reverse">
        <filter flags="b">
         <axis name="ancestor" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
         <vc op="eq" onEmpty="0" comp="CCC">
          <cast as="xs:string" emptiable="1">
           <attVal name="Q{}data-repeat-item" chk="0"/>
          </cast>
          <str val="true"/>
         </vc>
        </filter>
       </fn>
       <let line="736" var="Q{}repeat-id" as="xs:string" slot="1" eval="16">
        <check card="1" diag="3|0|XTTE0570|repeat-id">
         <cvUntyped to="xs:string" diag="3|0|XTTE0570|repeat-id">
          <data>
           <slash simple="1">
            <first>
             <filter flags="b">
              <axis name="ancestor" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}data-repeatable-context)" jsTest="return item.name==='data-repeatable-context'"/>
              </fn>
             </filter>
            </first>
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
           </slash>
          </data>
         </cvUntyped>
        </check>
        <let line="737" var="Q{}item-position" as="xs:integer" slot="2" eval="16">
         <arith op="+" calc="i+i">
          <fn name="count">
           <filter flags="b">
            <axis name="preceding-sibling" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
            <vc op="eq" onEmpty="0" comp="CCC">
             <cast as="xs:string" emptiable="1">
              <attVal name="Q{}data-repeat-item" chk="0"/>
             </cast>
             <str val="true"/>
            </vc>
           </filter>
          </fn>
          <int val="1"/>
         </arith>
         <sequence line="739">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="[div onclick] Setting repeat index '"/>
            </valueOf>
            <valueOf>
             <varRef name="Q{}repeat-id" slot="1"/>
            </valueOf>
            <valueOf>
             <str val="' to value '"/>
            </valueOf>
            <valueOf>
             <convert from="xs:integer" to="xs:string">
              <varRef name="Q{}item-position" slot="2"/>
             </convert>
            </valueOf>
            <valueOf flags="S">
             <str val="'"/>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <ifCall line="740" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="0"/>
           <str val="setRepeatIndex"/>
           <arrayBlock>
            <varRef name="Q{}repeat-id" slot="1"/>
            <varRef name="Q{}item-position" slot="2"/>
           </arrayBlock>
          </ifCall>
         </sequence>
        </let>
       </let>
      </forEach>
      <choose line="743">
       <fn name="exists">
        <axis name="self" nodeTest="element(Q{}span)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='span';"/>
       </fn>
       <callT line="744" name="Q{}refreshElementsUsingIndexFunction-JS" bSlot="0" flags="t"/>
      </choose>
     </sequence>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="23" rank="0" minImp="0" slots="0" flags="s" line="2011" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2011" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="2013" name="Q{}DOMActivate" bSlot="1" flags="t">
     <withParam name="Q{}form-control" flags="c" as="node()">
      <dot line="2014" type="element(Q{}button)"/>
     </withParam>
    </callT>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="4" rank="0" minImp="0" slots="0" flags="s" line="991" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="991" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-submit)" jsTest="return item.name==='data-submit'"/>
     </fn>
    </p.withPredicate>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="993" name="Q{}xforms-submit" bSlot="2" flags="t">
     <withParam name="Q{}submission" flags="c" as="xs:string">
      <fn line="994" name="string">
       <axis name="attribute" nodeTest="attribute(Q{}data-submit)" jsTest="return item.name==='data-submit'"/>
      </fn>
     </withParam>
    </callT>
   </templateRule>
  </mode>
 </co>
 <co id="72" binds="62 63 64">
  <template name="Q{}setSubmission" flags="os" line="3919" module="saxon-xforms.xsl" slots="5">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3920">
    <param name="Q{}this" slot="0" flags="i" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3921" name="Q{}submission-id" slot="1" flags="i" as="xs:string">
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|submission-id">
      <check card="1" diag="8|0|XTTE0590|submission-id">
       <cvUntyped to="xs:string" diag="8|0|XTTE0590|submission-id">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="3924" var="Q{}bindingi" as="node()?" slot="2" eval="7">
     <treat line="3925" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
      <check card="?" diag="3|0|XTTE0570|bindingi">
       <callT name="Q{}getBinding" bSlot="0">
        <withParam name="Q{}this" flags="c" as="element()">
         <varRef line="3926" name="Q{}this" slot="0"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <let line="3931" var="Q{}refi" as="xs:string" slot="3" eval="16">
      <treat line="3932" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
       <check card="1" diag="3|0|XTTE0570|refi">
        <cvUntyped to="xs:string" diag="3|0|XTTE0570|refi">
         <data>
          <callT name="Q{}getDataRef" bSlot="1">
           <withParam name="Q{}this" flags="c" as="element()">
            <varRef line="3933" name="Q{}this" slot="0"/>
           </withParam>
           <withParam name="Q{}bindingi" flags="c" as="node()?">
            <varRef line="3934" name="Q{}bindingi" slot="2"/>
           </withParam>
          </callT>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <let line="3939" var="Q{}actions" as="map(*)*" slot="4" eval="8">
       <treat line="3940" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
        <callT name="Q{}setActions" bSlot="2">
         <withParam name="Q{}this" flags="c" as="element()">
          <treat line="3941" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
           <dot flags="a"/>
          </treat>
         </withParam>
         <withParam name="Q{}nodeset" flags="t" as="xs:string">
          <varRef line="3942" name="Q{}refi" slot="3"/>
         </withParam>
        </callT>
       </treat>
       <sequence line="3946">
        <choose>
         <fn name="exists">
          <varRef name="Q{}actions" slot="4"/>
         </fn>
         <ifCall line="3947" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="addAction"/>
          <arrayBlock>
           <varRef name="Q{}submission-id" slot="1"/>
           <varRef name="Q{}actions" slot="4"/>
          </arrayBlock>
         </ifCall>
        </choose>
        <ifCall line="3952" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
         <sequence>
          <ifCall line="3953" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <varRef name="Q{}refi" slot="3"/>
          </ifCall>
          <choose line="3956">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}resource)" jsTest="return item.name==='resource'"/>
            </slash>
           </fn>
           <ifCall line="3957" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@resource"/>
            <cast as="xs:string" emptiable="1">
             <data>
              <slash simple="1">
               <varRef name="Q{}this" slot="0"/>
               <axis name="attribute" nodeTest="attribute(Q{}resource)" jsTest="return item.name==='resource'"/>
              </slash>
             </data>
            </cast>
           </ifCall>
          </choose>
          <choose line="3959">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}mode)" jsTest="return item.name==='mode'"/>
            </slash>
           </fn>
           <ifCall line="3960" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@mode"/>
            <cast as="xs:string" emptiable="1">
             <data>
              <slash simple="1">
               <varRef name="Q{}this" slot="0"/>
               <axis name="attribute" nodeTest="attribute(Q{}mode)" jsTest="return item.name==='mode'"/>
              </slash>
             </data>
            </cast>
           </ifCall>
          </choose>
          <ifCall line="3963" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@method"/>
           <choose line="3965">
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}method)" jsTest="return item.name==='method'"/>
             </slash>
            </fn>
            <fn line="3966" name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}method)" jsTest="return item.name==='method'"/>
             </slash>
            </fn>
            <true/>
            <str val="POST"/>
           </choose>
          </ifCall>
          <choose line="3975">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}validate)" jsTest="return item.name==='validate'"/>
            </slash>
           </fn>
           <ifCall line="3976" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@validate"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}validate)" jsTest="return item.name==='validate'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="3978">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
            </slash>
           </fn>
           <ifCall line="3979" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@relevant"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="3981">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}serialization)" jsTest="return item.name==='serialization'"/>
            </slash>
           </fn>
           <ifCall line="3982" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@serialization"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}serialization)" jsTest="return item.name==='serialization'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="3984">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}version)" jsTest="return item.name==='version'"/>
            </slash>
           </fn>
           <ifCall line="3985" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@version"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}version)" jsTest="return item.name==='version'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="3987">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}indent)" jsTest="return item.name==='indent'"/>
            </slash>
           </fn>
           <ifCall line="3988" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@indent"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}indent)" jsTest="return item.name==='indent'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <ifCall line="3992" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@mediatype"/>
           <choose line="3994">
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}mediatype)" jsTest="return item.name==='mediatype'"/>
             </slash>
            </fn>
            <fn line="3995" name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}mediatype)" jsTest="return item.name==='mediatype'"/>
             </slash>
            </fn>
            <true/>
            <str val="text/plain"/>
           </choose>
          </ifCall>
          <choose line="4005">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}encoding)" jsTest="return item.name==='encoding'"/>
            </slash>
           </fn>
           <ifCall line="4006" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@encoding"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}encoding)" jsTest="return item.name==='encoding'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="4008">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}omit-xml-declaration)" jsTest="return item.name==='omit-xml-declaration'"/>
            </slash>
           </fn>
           <ifCall line="4009" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@omit-xml-declaration"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}omit-xml-declaration)" jsTest="return item.name==='omit-xml-declaration'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="4011">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}standalone)" jsTest="return item.name==='standalone'"/>
            </slash>
           </fn>
           <ifCall line="4012" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@standalone"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}standalone)" jsTest="return item.name==='standalone'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="4014">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}cdata-section-elements)" jsTest="return item.name==='cdata-section-elements'"/>
            </slash>
           </fn>
           <ifCall line="4015" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@cdata-section-elements"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}cdata-section-elements)" jsTest="return item.name==='cdata-section-elements'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <ifCall line="4018" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@replace"/>
           <choose line="4020">
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}replace)" jsTest="return item.name==='replace'"/>
             </slash>
            </fn>
            <fn line="4021" name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}replace)" jsTest="return item.name==='replace'"/>
             </slash>
            </fn>
            <true/>
            <str val="all"/>
           </choose>
          </ifCall>
          <choose line="4032">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}instance)" jsTest="return item.name==='instance'"/>
            </slash>
           </fn>
           <ifCall line="4033" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@instance"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}instance)" jsTest="return item.name==='instance'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="4035">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}targetref)" jsTest="return item.name==='targetref'"/>
            </slash>
           </fn>
           <ifCall line="4036" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@targetref"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}targetref)" jsTest="return item.name==='targetref'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="4038">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}separator)" jsTest="return item.name==='separator'"/>
            </slash>
           </fn>
           <ifCall line="4039" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@separator"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}separator)" jsTest="return item.name==='separator'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="4041">
           <fn name="exists">
            <slash simple="1">
             <varRef name="Q{}this" slot="0"/>
             <axis name="attribute" nodeTest="attribute(Q{}includenamespaceprefixes)" jsTest="return item.name==='includenamespaceprefixes'"/>
            </slash>
           </fn>
           <ifCall line="4042" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@includenamespaceprefixes"/>
            <fn name="string">
             <slash simple="1">
              <varRef name="Q{}this" slot="0"/>
              <axis name="attribute" nodeTest="attribute(Q{}includenamespaceprefixes)" jsTest="return item.name==='includenamespaceprefixes'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
         </sequence>
         <map size="2">
          <str val="duplicates"/>
          <str val="reject"/>
          <str val="duplicates-error-code"/>
          <str val="XTDE3365"/>
         </map>
        </ifCall>
       </sequence>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="74" binds="18">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onkeyup" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="698" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
     <gc ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="698" op="=" card="N:1" comp="CCC">
      <fn name="tokenize">
       <cvUntyped to="xs:string" diag="3|0|XTTE0570|class">
        <data>
         <slash simple="1">
          <dot type="element(Q{}input)"/>
          <axis line="3036" name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
         </slash>
        </data>
       </cvUntyped>
      </fn>
      <str val="incremental"/>
     </gc>
    </p.withPredicate>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="700" name="Q{}xforms-value-changed" bSlot="0" flags="t">
     <withParam name="Q{}form-control" flags="c" as="node()">
      <dot line="701" type="element(Q{}input)"/>
     </withParam>
    </callT>
   </templateRule>
  </mode>
 </co>
 <co id="62" binds="">
  <template name="Q{}getBinding" flags="os" line="3274" module="saxon-xforms.xsl" slots="4">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3275">
    <param name="Q{}this" slot="0" flags="r" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3276" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
     <map role="select" size="0"/>
     <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
      <check card="1" diag="8|0|XTTE0590|bindings">
       <supplied slot="1"/>
      </check>
     </treat>
    </param>
    <let line="3285" var="Q{}ref-binding" as="xs:string" slot="2" eval="16">
     <choose>
      <fn name="exists">
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </slash>
      </fn>
      <check card="1" diag="3|0|XTTE0570|ref-binding">
       <cast as="xs:string" emptiable="1">
        <data>
         <slash simple="1">
          <varRef name="Q{}this" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
         </slash>
        </data>
       </cast>
      </check>
      <fn name="exists">
       <slash simple="1">
        <varRef name="Q{}this" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </slash>
      </fn>
      <check card="1" diag="3|0|XTTE0570|ref-binding">
       <cast as="xs:string" emptiable="1">
        <data>
         <slash simple="1">
          <varRef name="Q{}this" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </slash>
        </data>
       </cast>
      </check>
      <true/>
      <str val=""/>
     </choose>
     <let line="3287" var="Q{}binding" as="element()?" slot="3" eval="7">
      <choose line="3292">
       <fn name="empty">
        <varRef name="Q{}ref-binding" slot="2"/>
       </fn>
       <empty/>
       <true/>
       <treat as="element()" jsTest="return item.nodeType===1;" diag="3|0|XTTE0570|binding">
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="Q{}bindings" slot="1"/>
         <varRef name="Q{}ref-binding" slot="2"/>
        </ifCall>
       </treat>
      </choose>
      <sequence line="3295">
       <choose>
        <fn name="exists">
         <varRef name="Q{}binding" slot="3"/>
        </fn>
        <message line="3301">
         <sequence role="select">
          <valueOf>
           <str val="[getBinding for "/>
          </valueOf>
          <valueOf>
           <fn name="name">
            <varRef name="Q{}this" slot="0"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val="] Binding found: "/>
          </valueOf>
          <valueOf>
           <fn name="serialize">
            <varRef name="Q{}binding" slot="3"/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
       </choose>
       <varRef line="3305" name="Q{}binding" slot="3"/>
      </sequence>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="75" binds="">
  <globalVariable name="Q{}default-instance-id" type="xs:string" line="75" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <str val="saxon-forms-default"/>
  </globalVariable>
 </co>
 <co id="76" binds="">
  <globalVariable name="Q{}debugTiming" type="xs:boolean" line="74" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalVariable>
 </co>
 <co id="44" binds="62">
  <function name="Q{http://www.w3.org/2002/xforms}getDataRef" line="3133" module="saxon-xforms.xsl" eval="16" flags="pU" as="xs:string" slots="11">
   <arg name="Q{}this" as="element()"/>
   <arg name="Q{}nodeset" as="xs:string?"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3142" var="Q{}this-ref" as="xs:string?" slot="2" eval="7">
    <choose>
     <fn name="exists">
      <slash simple="1">
       <varRef name="Q{}this" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
      </slash>
     </fn>
     <fn name="normalize-space">
      <cast as="xs:string" emptiable="1">
       <data>
        <slash simple="1">
         <varRef name="Q{}this" slot="0"/>
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </slash>
       </data>
      </cast>
     </fn>
     <fn name="exists">
      <slash simple="1">
       <varRef name="Q{}this" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
      </slash>
     </fn>
     <fn name="normalize-space">
      <cast as="xs:string" emptiable="1">
       <data>
        <slash simple="1">
         <varRef name="Q{}this" slot="0"/>
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </slash>
       </data>
      </cast>
     </fn>
    </choose>
    <let line="3145" var="Q{}this-binding" as="node()?" slot="3" eval="7">
     <treat line="3146" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|this-binding">
      <check card="?" diag="3|0|XTTE0570|this-binding">
       <callT name="Q{}getBinding" bSlot="0">
        <withParam name="Q{}this" flags="c" as="element()">
         <varRef line="3147" name="Q{}this" slot="0"/>
        </withParam>
       </callT>
      </check>
     </treat>
     <choose line="3172">
      <fn name="exists">
       <varRef name="Q{}this-binding" slot="3"/>
      </fn>
      <let line="3153" var="Q{}relative" as="xs:string" slot="4" eval="16">
       <check card="1" diag="0|1||xforms:resolveXPathStrings">
        <choose>
         <fn name="exists">
          <varRef name="Q{}this-binding" slot="3"/>
         </fn>
         <cvUntyped line="3164" to="xs:string" diag="3|0|XTTE0570|this-binding-ref">
          <cast as="xs:untypedAtomic" emptiable="0">
           <choose>
            <fn name="exists">
             <slash simple="1">
              <varRef name="Q{}this-binding" slot="3"/>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </fn>
            <fn name="normalize-space">
             <cast as="xs:string" emptiable="1">
              <data>
               <slash simple="1">
                <varRef name="Q{}this-binding" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
             </cast>
            </fn>
            <true/>
            <fn name="normalize-space">
             <cast as="xs:string" emptiable="1">
              <data>
               <slash simple="1">
                <varRef name="Q{}this-binding" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </cast>
            </fn>
           </choose>
          </cast>
         </cvUntyped>
        </choose>
       </check>
       <choose line="835">
        <fn name="starts-with">
         <varRef name="Q{}relative" slot="4"/>
         <str val="/"/>
        </fn>
        <varRef line="836" name="Q{}relative" slot="4"/>
        <fn line="838" name="starts-with">
         <varRef name="Q{}relative" slot="4"/>
         <str val="instance("/>
        </fn>
        <varRef line="839" name="Q{}relative" slot="4"/>
        <true/>
        <varRef line="842" name="Q{}relative" slot="4"/>
       </choose>
      </let>
      <fn line="3175" name="exists">
       <varRef name="Q{}this-ref" slot="2"/>
      </fn>
      <let line="3176" var="Q{}base" as="xs:string" slot="5" eval="16">
       <check card="1" diag="0|0||xforms:resolveXPathStrings">
        <varRef name="Q{}nodeset" slot="1"/>
       </check>
       <let var="Q{}relative" as="xs:string" slot="6" eval="16">
        <check card="1" diag="0|1||xforms:resolveXPathStrings">
         <varRef name="Q{}this-ref" slot="2"/>
        </check>
        <choose line="835">
         <fn name="starts-with">
          <varRef name="Q{}relative" slot="6"/>
          <str val="/"/>
         </fn>
         <varRef line="836" name="Q{}relative" slot="6"/>
         <fn line="838" name="starts-with">
          <varRef name="Q{}relative" slot="6"/>
          <str val="instance("/>
         </fn>
         <varRef line="839" name="Q{}relative" slot="6"/>
         <fn line="841" name="not">
          <varRef name="Q{}base" slot="5"/>
         </fn>
         <varRef line="842" name="Q{}relative" slot="6"/>
         <or line="844" op="or">
          <fn name="not">
           <varRef name="Q{}relative" slot="6"/>
          </fn>
          <vc op="eq" onEmpty="0" comp="CCC">
           <varRef name="Q{}relative" slot="6"/>
           <str val="."/>
          </vc>
         </or>
         <varRef line="845" name="Q{}base" slot="5"/>
         <true/>
         <let line="849" var="Q{}parentCallCount" as="xs:integer" slot="7" eval="16">
          <choose>
           <fn name="contains">
            <varRef name="Q{}relative" slot="6"/>
            <str val="/"/>
           </fn>
           <fn name="count">
            <filter flags="b">
             <fn name="tokenize">
              <varRef name="Q{}relative" slot="6"/>
              <str val="/"/>
              <str val=""/>
             </fn>
             <vc op="eq" onEmpty="0" comp="CCC">
              <dot type="xs:string"/>
              <str val=".."/>
             </vc>
            </filter>
           </fn>
           <fn name="contains">
            <varRef name="Q{}relative" slot="6"/>
            <str val=".."/>
           </fn>
           <int val="1"/>
           <true/>
           <int val="0"/>
          </choose>
          <let line="852" var="Q{}slashes" as="xs:integer*" slot="8" eval="4">
           <choose>
            <fn name="contains">
             <varRef name="Q{}base" slot="5"/>
             <str val="/"/>
            </fn>
            <fn name="index-of">
             <fn name="string-to-codepoints">
              <varRef name="Q{}base" slot="5"/>
             </fn>
             <int val="47"/>
            </fn>
            <true/>
            <int val="0"/>
           </choose>
           <choose line="884">
            <compareToInt op="gt" val="0">
             <varRef name="Q{}parentCallCount" slot="7"/>
            </compareToInt>
            <fn line="888" name="concat">
             <fn name="substring">
              <varRef name="Q{}base" slot="5"/>
              <int val="1"/>
              <choose line="863">
               <and op="and">
                <vc op="ge" onEmpty="0" comp="CAVC">
                 <fn name="count">
                  <varRef name="Q{}slashes" slot="8"/>
                 </fn>
                 <varRef name="Q{}parentCallCount" slot="7"/>
                </vc>
                <compareToInt op="gt" val="0">
                 <varRef name="Q{}parentCallCount" slot="7"/>
                </compareToInt>
               </and>
               <let line="864" var="Q{http://saxon.sf.net/generated-variable}v0" as="xs:integer" slot="9" eval="16">
                <arith op="-" calc="i-i">
                 <varRef name="Q{}parentCallCount" slot="7"/>
                 <int val="1"/>
                </arith>
                <check card="1" diag="3|0|XTTE0570|parentSlash">
                 <filter flags="p">
                  <varRef name="Q{}slashes" slot="8"/>
                  <arith op="-" calc="i-i">
                   <fn name="last"/>
                   <varRef name="Q{http://saxon.sf.net/generated-variable}v0" slot="9"/>
                  </arith>
                 </filter>
                </check>
               </let>
               <true/>
               <check line="867" card="1" diag="3|0|XTTE0570|parentSlash">
                <lastOf>
                 <varRef name="Q{}slashes" slot="8"/>
                </lastOf>
               </check>
              </choose>
             </fn>
             <fn name="replace">
              <varRef name="Q{}relative" slot="6"/>
              <str val="\.\./"/>
              <str val=""/>
              <str val=""/>
             </fn>
            </fn>
            <true/>
            <fn line="891" name="concat">
             <varRef name="Q{}base" slot="5"/>
             <str val="/"/>
             <varRef name="Q{}relative" slot="6"/>
            </fn>
           </choose>
          </let>
         </let>
        </choose>
       </let>
      </let>
      <varRef line="3178" name="Q{}nodeset" slot="1"/>
      <let line="3179" var="Q{}relative" as="xs:string" slot="10" eval="16">
       <check card="1" diag="0|1||xforms:resolveXPathStrings">
        <varRef name="Q{}nodeset" slot="1"/>
       </check>
       <choose line="835">
        <fn name="starts-with">
         <varRef name="Q{}relative" slot="10"/>
         <str val="/"/>
        </fn>
        <varRef line="836" name="Q{}relative" slot="10"/>
        <fn line="838" name="starts-with">
         <varRef name="Q{}relative" slot="10"/>
         <str val="instance("/>
        </fn>
        <varRef line="839" name="Q{}relative" slot="10"/>
        <true/>
        <varRef line="842" name="Q{}relative" slot="10"/>
       </choose>
      </let>
      <true/>
      <str val=""/>
     </choose>
    </let>
   </let>
  </function>
 </co>
 <co id="23" binds="">
  <template name="Q{}getInstance" flags="os" as="element()?" line="3248" module="saxon-xforms.xsl" slots="2">
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xd=http://www.oxygenxml.com/ns/doc/xsl xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=~ sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=~ sfp=http://saxon.sf.net/ns/packages map=~" line="3249" card="?" diag="7|0|XTTE0505|getInstance">
    <sequence>
     <param name="Q{}instance-id" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|instance-id">
       <check card="1" diag="8|0|XTTE0590|instance-id">
        <cvUntyped to="xs:string" diag="8|0|XTTE0590|instance-id">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="3250" name="Q{}instances" slot="1" flags="ti" as="map(xs:string, element())">
      <treat role="conversion" as="map(xs:string, element())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|instances">
       <check card="1" diag="8|0|XTTE0590|instances">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <choose line="3254">
      <varRef name="Q{}instance-id" slot="0"/>
      <ifCall line="3255" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
       <varRef name="Q{}instances" slot="1"/>
       <varRef name="Q{}instance-id" slot="0"/>
      </ifCall>
      <true/>
      <copyOf line="3259" flags="vc">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
        <varRef name="Q{}instances" slot="1"/>
        <str val="saxon-forms-default"/>
       </ifCall>
      </copyOf>
     </choose>
    </sequence>
   </check>
  </template>
 </co>
 <overridden/>
 <output>
  <property name="indent" value="no"/>
  <property name="doctype-system" value="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
  <property name="encoding" value="utf-8"/>
  <property name="doctype-public" value="-//W3C//DTD XHTML 1.0 Transitional//EN"/>
  <property name="omit-xml-declaration" value="no"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
  <property name="method" value="html"/>
 </output>
 <decimalFormat/>
</package><?Σ 3be02299?>